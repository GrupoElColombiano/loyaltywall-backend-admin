import { Plan } from './entity/plan.entity';
import { Subscription } from './entity/subscription.entity';
import { Category } from '../category/entity/category.entity';
import { PlansProductCategory } from '../common/entity/plans-products-categories.entity';
import { Rate } from 'src/common/entity/rate.entity';
import { RegisterlogService } from 'src/registerlog/registerlog.service';
import { Model } from 'mongoose';
import { PlanVersion } from './schema/plan-version.schema';
import { PlanVersion as Versionamiento } from '../plans/entity/plan-versions.entity';
import { CategorysAccess } from 'src/common/entity/categorys-access.entity';
import { UserPlan } from 'src/common/entity/user-plan.entity';
import { EntityManager, Repository, DataSource } from 'typeorm';
import { PlanTemplate } from './entity/plan-template.entity';
import { Template } from 'src/template-manager/chemma/template.schema';
import { Event } from 'src/common/entity/event.entity';
import { Site } from 'src/common/entity/site.entity';
import { PointsEvents } from 'src/common/entity/points-events.entity';
import { EventsPointsSite } from 'src/common/entity/events-points-site.entity';
import { PlanHistory } from './schema/plan-history.schema';
import { PlanUserHistory } from './entity/plan_user_history.entity';
import { Versioning } from '../paywall/entities/versioning.schema';
export declare class PlansService {
    private readonly planRepository;
    private readonly subscriptionRepository;
    private readonly categoryRepository;
    private readonly plansProductCategoryRepository;
    private readonly rateRepository;
    private readonly registerlogService;
    private readonly versionPlanModel;
    private readonly planHistoryModel;
    private readonly categorysAccessRepository;
    private readonly versionamiento;
    private readonly userPlanRepository;
    private readonly templateModel;
    private readonly planTemplateRepository;
    private readonly siteRpo;
    private readonly eventsRpo;
    private readonly pointsValueRepo;
    private readonly eventsPointsSite;
    private entityManager;
    private readonly planUserHistoryRepository;
    private readonly dataSource;
    private versioningModel;
    constructor(planRepository: Repository<Plan>, subscriptionRepository: Repository<Subscription>, categoryRepository: Repository<Category>, plansProductCategoryRepository: Repository<PlansProductCategory>, rateRepository: Repository<Rate>, registerlogService: RegisterlogService, versionPlanModel: Model<PlanVersion>, planHistoryModel: Model<PlanHistory>, categorysAccessRepository: Repository<CategorysAccess>, versionamiento: Repository<Versionamiento>, userPlanRepository: Repository<UserPlan>, templateModel: Model<Template>, planTemplateRepository: Repository<PlanTemplate>, siteRpo: Repository<Site>, eventsRpo: Repository<Event>, pointsValueRepo: Repository<PointsEvents>, eventsPointsSite: Repository<EventsPointsSite>, entityManager: EntityManager, planUserHistoryRepository: Repository<PlanUserHistory>, dataSource: DataSource, versioningModel: Model<Versioning>);
    create(plan: any): Promise<any>;
    createPlanAnonimo(plan: any): Promise<any>;
    getProductsCategoriesPlan(planId: number): Promise<any>;
    setProductCategoriesPlan(params: any): Promise<any>;
    deleteCategory(planId: number, idPlansProductCategory: number): Promise<void>;
    deleteCategoryProduct(idPlan: number, idProduct: number): Promise<void>;
    updatePlanFinal(id: number, updatedPlan: any): Promise<any>;
    findAllPlans(): Promise<any>;
    findAll(page: number, limit: number): Promise<Plan[] | any>;
    findOne(siteName: string, userId: string, id: any): Promise<Plan | any>;
    getPlanUser(planName: string, idUser: string): Promise<Plan | any>;
    updateIsActive(id: number, isActive: any): Promise<Plan | any>;
    findByFilter(query: any): Promise<Plan[]>;
    findByFilterAndPagination(query: any): Promise<any>;
    createVersionPlan(plan: any): Promise<any>;
    findByFilterVersionPlan(query: any): Promise<any>;
    findAllRates(): Promise<any>;
    findAllPlansWithCategoriesAndProducts(): Promise<any>;
    transformDataToRequiredStructure(dataFromBackend: any): Promise<{
        products: any[];
    }>;
    getVersionsPlan(idPlan: number): Promise<any>;
    createPlanTemplate(body: any): Promise<any>;
    getPlanTemplate(id_template: string): Promise<any>;
    registerPointsEvent(obj: any): Promise<any>;
    updateCategoryAccess(idPlansProductCategory: number, body: any): Promise<CategorysAccess>;
    updatePlanState(planId: number, body: any): Promise<void>;
    setPlanVersioning(body: any): Promise<Plan | any>;
    setPlanVersioningMongo(planCurrent: any, idPlan: number, versionPlan: number): Promise<any>;
    getPlanVersioning(idPlan: number): Promise<any>;
    getPlanSubscription(idPlan: number, versionPlan: number): Promise<any>;
}

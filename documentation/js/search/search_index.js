var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccessModulesController.html",[0,1.101,1,3.17]],["body/controllers/AccessModulesController.html",[0,1.345,1,2.34,2,0.546,3,0.054,4,0.049,5,0.044,6,4.802,7,4.493,8,1.676,9,0.851,10,6.2,11,2.786,12,2.416,13,3.164,14,3.164,15,3.164,16,3.164,17,2.781,18,3.164,19,0.167,20,0.639,21,2.182,22,1.863,23,2.781,24,3.564,25,4.148,26,3.564,27,3.564,28,2.958,29,1.565,30,0.01,31,1.676,32,5.883,33,1.907,34,4.878,35,6.571,36,0.634,37,1.907,38,1.47,39,1.073,40,1.186,41,1.524,42,1.948,43,2.526,44,3.164,45,1.907,46,1.14,47,0.699,48,0.533,49,0.888,50,3.164,51,1.907,52,1.907,53,4.092,54,3.824,55,6.571,56,1.907,57,1.907,58,2.781,59,3.164,60,1.676,61,1.225,62,1.907,63,4.441,64,4.588,65,3.164,66,1.907,67,6.17,68,4.961,69,1.32,70,3.685,71,2.498,72,1.907,73,1.907,74,1.907,75,2.052,76,1.907,77,4.175,78,1.907,79,2.337,80,2.543,81,2.34,82,2.34,83,4.719,84,1.676,85,4.6,86,1.907,87,1.907,88,1.907,89,4.6,90,1.073,91,4.6,92,1.676,93,1.907,94,2.441,95,0.159,96,1.75,97,1.244,98,3.363,99,0.309,100,2.646,101,1.676,102,0.576,103,0.748,104,0.725,105,0.772,106,3.652,107,4.802,108,0.949,109,0.704,110,1.907,111,1.907,112,0.054,113,0.062,114,0.823,115,0.576,116,4.628,117,4.719,118,1.907,119,3.52,120,1.907,121,1.651,122,1.907,123,1.907,124,4.055,125,4.055,126,1.907,127,1.907,128,1.907,129,1.907,130,1.907,131,1.907,132,1.907,133,1.32,134,1.907,135,1.907,136,1.41,137,1.32,138,1.907,139,1.676,140,1.41,141,1.907,142,0.004,143,0.004]],["title/modules/AccessModulesModule.html",[42,0.964,144,2.966]],["body/modules/AccessModulesModule.html",[1,5.487,2,1.929,3,0.15,4,0.136,5,0.123,6,3.914,7,3.662,10,4.986,11,1.896,30,0.01,42,1.854,63,3.792,95,0.288,99,0.857,100,5.381,101,4.651,112,0.15,113,0.171,142,0.008,143,0.008,144,5.707,145,2.285,146,2.447,147,2.447,148,2.285,149,3.43,150,2.363,151,4.651,152,4.651,153,3.117,154,2.363,155,2.447,156,5.292,157,5.292,158,2.737,159,1.896,160,2.633,161,3.914,162,4.398,163,4.665,164,4.229,165,4.17,166,3.914,167,4.986,168,4.17,169,3.914,170,3.453,171,3.914,172,4.398,173,2.447,174,5.292]],["title/injectables/AccessModulesService.html",[100,2.797,175,1.016]],["body/injectables/AccessModulesService.html",[3,0.04,4,0.036,5,0.032,6,4.786,7,4.479,11,1.379,12,1.368,17,4.783,19,0.122,20,0.49,21,1.779,22,1.43,23,2.134,24,2.134,25,2.134,26,2.83,27,2.83,28,1.818,30,0.011,36,0.64,38,1.407,39,1.366,40,1.18,42,1.797,43,2.32,46,1.239,47,0.759,48,0.579,49,0.965,53,1.366,54,3.895,55,5.548,58,2.134,60,2.134,61,1.907,63,3.061,64,4.115,67,6.902,68,5.214,75,1.875,77,1.033,81,1.795,82,1.795,84,1.227,85,6.124,89,3.383,90,1.366,91,2.83,94,1.991,95,0.183,98,3.058,99,0.226,100,1.584,112,0.04,113,0.045,115,1.317,121,1.91,142,0.003,143,0.003,159,0.5,160,3.051,161,1.033,162,2.511,163,1.68,164,1.116,165,2.381,166,1.033,167,1.795,168,3.528,169,1.033,170,3.721,171,1.033,172,2.511,175,0.576,176,0.548,177,1.227,178,1.83,179,3.22,180,2.427,181,3.22,182,1.014,183,1.396,184,3.172,185,3.22,186,5.138,187,1.396,188,2.427,189,1.396,190,1.396,191,1.396,192,1.396,193,4.349,194,3.383,195,2.34,196,3.904,197,3.821,198,2.427,199,1.396,200,4.359,201,1.396,202,2.427,203,1.396,204,1.396,205,1.396,206,3.849,207,2.427,208,1.396,209,1.396,210,5.138,211,1.396,212,1.396,213,1.396,214,0.646,215,0.669,216,1.396,217,0.274,218,1.227,219,1.998,220,1.396,221,1.396,222,1.396,223,1.396,224,1.396,225,2.427,226,2.089,227,2.911,228,1.396,229,1.576,230,1.396,231,2.427,232,1.396,233,1.396,234,1.396,235,1.396,236,1.396,237,0.752,238,2.089,239,1.396,240,2.146,241,2.089,242,1.946,243,1.946,244,1.354,245,2.452,246,1.396,247,2.229,248,4.359,249,4.359,250,2.134,251,2.427,252,2.427,253,3.22,254,3.22,255,3.22,256,1.396,257,1.396,258,1.396,259,2.427,260,1.396,261,2.427,262,1.396,263,1.396,264,2.427,265,3.22,266,2.134,267,1.396,268,3.22,269,4.782,270,3.849,271,3.831,272,5.441,273,2.427,274,3.22,275,2.427,276,3.821,277,2.427,278,4.359,279,1.396,280,1.396,281,2.427,282,2.427,283,2.427,284,2.427,285,2.427,286,2.427,287,3.22,288,2.382,289,3.22,290,2.292,291,3.22,292,1.896,293,3.22,294,2.427,295,1.396,296,1.396,297,0.752,298,1.396,299,3.849,300,1.396,301,1.396,302,1.396,303,2.427,304,1.396,305,1.396,306,2.427,307,1.396,308,1.396,309,1.396,310,1.396,311,2.427,312,1.396,313,2.427,314,2.427,315,1.396,316,1.396,317,1.033,318,1.227,319,1.396]],["title/classes/ApiException.html",[113,0.139,320,3.17]],["body/classes/ApiException.html",[0,1.633,3,0.137,4,0.124,5,0.112,19,0.423,30,0.011,36,0.72,40,0.697,46,0.976,47,0.598,48,0.456,49,0.761,71,2.019,95,0.271,99,0.783,102,1.461,103,1.895,104,1.838,105,1.956,106,3.576,108,2.405,109,1.784,112,0.18,113,0.206,114,2.087,115,1.921,119,2.719,121,1.991,142,0.007,143,0.007,182,2.656,219,2.019,242,2.839,320,4.702,321,1.461,322,3.863,323,4.148,324,6.357,325,6.244,326,6.244,327,4.834,328,6.432,329,6.244,330,4.834,331,3.576,332,4.834,333,4.249,334,4.834,335,4.834,336,4.834,337,4.394,338,3.863,339,2.317,340,2.317,341,3.047,342,2.847,343,5.251,344,5.081,345,2.5,346,3.575,347,4.249,348,4.249,349,3.345,350,4.249,351,3.863,352,4.249,353,3.863,354,5.588,355,3.863,356,4.249,357,4.249,358,4.249,359,4.249,360,4.249,361,4.249]],["title/controllers/AppController.html",[0,1.101,349,2.966]],["body/controllers/AppController.html",[0,1.626,2,1.374,3,0.136,4,0.124,5,0.111,19,0.42,20,1.279,29,1.584,30,0.011,31,4.222,36,0.642,38,1.245,40,0.913,46,0.97,47,0.595,48,0.453,49,0.756,71,2.007,95,0.27,99,0.778,102,1.452,103,1.884,104,1.827,105,1.943,106,3.561,108,2.39,109,1.772,112,0.179,113,0.205,114,2.074,115,1.913,119,2.702,121,1.986,142,0.007,143,0.007,182,2.007,219,2.007,242,2.145,320,3.553,322,3.839,323,3.134,325,4.222,326,4.222,328,6.016,329,4.222,331,2.702,333,5.565,337,4.38,338,3.839,339,2.302,340,2.302,341,3.034,342,2.829,343,5.345,344,6.016,345,2.485,346,3.553,347,4.222,348,4.222,349,4.382,350,5.565,351,6.016,352,4.222,353,3.839,354,5.565,355,3.839,356,4.222,357,4.222,358,4.222,359,4.222,360,4.222,361,4.222,362,4.803,363,4.803,364,4.803,365,4.803]],["title/modules/AppModule.html",[42,0.964,366,3.17]],["body/modules/AppModule.html",[2,1.379,3,0.092,4,0.084,5,0.075,7,2.252,10,2.407,11,1.166,30,0.011,42,1.29,95,0.292,99,0.527,103,1.276,104,1.237,105,1.316,112,0.092,113,0.105,142,0.006,143,0.006,144,4.909,145,1.405,146,1.504,147,1.504,148,1.405,149,2.653,150,1.453,153,2.228,154,1.453,155,1.504,173,2.653,240,2.013,244,1.011,337,4.387,338,2.6,343,3.144,345,1.683,349,3.971,366,6.49,367,2.86,368,2.86,369,2.86,370,5.08,371,4.909,372,4.628,373,4.909,374,4.909,375,4.909,376,4.909,377,4.909,378,4.909,379,4.909,380,4.909,381,4.909,382,3.254,383,5.576,384,4.235,385,2.6,386,3.254,387,2.407,388,3.851,389,6.344,390,2.86,391,3.254,392,3.254,393,3.254,394,3.254,395,3.254,396,3.254,397,3.254,398,3.254,399,2.86,400,4.819,401,3.254,402,3.254,403,4.819,404,3.254,405,3.254,406,3.254,407,4.235,408,3.851,409,3.254,410,3.254,411,4.235,412,3.254,413,4.819,414,4.819,415,3.144,416,3.254,417,2.86,418,3.254,419,3.254,420,3.335,421,2.013,422,2.252,423,3.254,424,3.254,425,3.254,426,3.254,427,3.254,428,3.254,429,3.254,430,3.144,431,3.254,432,2.252,433,2.252,434,3.254,435,3.254,436,3.254,437,3.254,438,2.123,439,3.254,440,3.254,441,2.86,442,3.254,443,3.254,444,2.86,445,3.254,446,3.254,447,3.254,448,4.235,449,3.254,450,5.738,451,5.738]],["title/injectables/AppService.html",[175,1.016,337,2.651]],["body/injectables/AppService.html",[3,0.179,4,0.163,5,0.147,19,0.554,20,1.52,30,0.01,36,0.642,38,1.245,40,1.086,95,0.213,99,1.025,112,0.179,113,0.205,121,1.671,142,0.009,143,0.009,175,1.785,176,2.483,337,4.657,351,6.644,355,5.06,452,5.565,453,6.331,454,6.331]],["title/controllers/AuthController.html",[0,1.101,455,3.17]],["body/controllers/AuthController.html",[0,1.613,2,1.796,3,0.178,4,0.162,5,0.145,9,2.804,30,0.01,95,0.269,96,2.711,99,1.017,108,3.124,109,2.317,112,0.178,113,0.203,114,2.711,115,1.897,142,0.009,143,0.009,342,3.698,455,5.541,456,5.519,457,5.519,458,2.903,459,5.224,460,5.519,461,6.279,462,6.279]],["title/modules/AuthModule.html",[42,0.964,370,2.966]],["body/modules/AuthModule.html",[2,1.993,3,0.158,4,0.144,5,0.129,11,1.997,30,0.01,42,1.708,95,0.268,99,0.903,104,2.12,112,0.158,113,0.181,142,0.008,143,0.008,145,2.407,146,2.578,147,2.578,148,2.407,149,3.513,150,3.111,153,3.221,154,2.49,155,2.578,173,2.578,370,5.983,415,5.712,417,4.901,455,5.62,459,5.453,460,4.901,463,4.901,464,4.901,465,4.901,466,5.576,467,5.576,468,5.576]],["title/injectables/AuthService.html",[175,1.016,459,2.797]],["body/injectables/AuthService.html",[3,0.179,4,0.163,5,0.147,30,0.01,95,0.213,99,1.025,112,0.179,113,0.205,142,0.009,143,0.009,175,1.785,176,2.483,292,3.728,459,4.912,469,5.565,470,5.565,471,5.565,472,5.565,473,6.331,474,6.331,475,5.565,476,6.331,477,3.562,478,5.565,479,5.06,480,5.06,481,6.331,482,4.131,483,5.06,484,5.565]],["title/entities/Category.html",[485,1.26,486,2.054]],["body/entities/Category.html",[3,0.137,4,0.124,5,0.112,12,2.032,19,0.423,29,2.013,30,0.011,36,0.816,40,1.161,47,1.016,48,0.759,61,1.921,79,3.761,95,0.239,112,0.137,113,0.157,142,0.007,143,0.007,217,0.95,485,1.869,486,3.047,487,2.087,488,4.249,489,1.508,490,4.617,491,5.677,492,3.894,493,2.773,494,4.834,495,3.863,496,4.834,497,4.834,498,4.148,499,4.834,500,3.576,501,4.834,502,4.834,503,4.834,504,3.163,505,4.834,506,4.834,507,3.863,508,3.863,509,2.939,510,4.635,511,5.677,512,2.847,513,4.834,514,4.834]],["title/controllers/CategoryController.html",[0,1.101,515,3.17]],["body/controllers/CategoryController.html",[0,1.389,2,0.843,3,0.084,4,0.076,5,0.068,9,1.316,12,1.547,19,0.258,20,0.904,21,2.792,28,2.296,29,1.624,30,0.011,36,0.612,38,1.438,43,2.146,46,1.311,47,0.846,48,0.707,49,0.851,61,2.264,69,2.04,70,2.635,71,1.232,80,3.254,94,3.124,95,0.218,96,2.803,97,1.923,98,3.002,99,0.477,102,0.891,103,1.156,104,1.121,105,1.193,106,4.216,107,2.18,108,1.467,109,1.088,112,0.084,113,0.095,114,1.273,115,0.891,119,4.116,121,1.593,133,2.04,142,0.005,143,0.005,178,1.917,195,2.464,196,4.526,227,1.869,229,1.471,238,2.592,240,1.232,244,1.876,339,1.413,340,1.413,341,2.592,408,2.356,458,1.363,486,3.997,512,4.636,515,3.31,516,2.591,517,3.933,518,4,519,4.754,520,2.948,521,2.18,522,2.378,523,2.948,524,2.517,525,4.526,526,2.948,527,2.18,528,3.31,529,2.18,530,4.634,531,2.948,532,4.493,533,4.826,534,2.948,535,4.236,536,2.948,537,4.802,538,4.413,539,3.31,540,3.31,541,2.948,542,6.492,543,2.948,544,2.948,545,2.948,546,5.409,547,3.933,548,3.31,549,3.529,550,2.591,551,5.409,552,2.948,553,4.475,554,4.802,555,2.948,556,2.948,557,2.356,558,2.04,559,2.894,560,2.948,561,2.948,562,2.948,563,5.409,564,5.409,565,2.356,566,2.18,567,2.948,568,2.04,569,2.591,570,1.588,571,1.823,572,2.948,573,2.948,574,2.948,575,2.948,576,2.948,577,2.948,578,2.18,579,2.948]],["title/modules/CategoryModule.html",[42,0.964,371,2.966]],["body/modules/CategoryModule.html",[2,2.037,3,0.164,4,0.149,5,0.134,11,2.068,30,0.01,42,1.735,95,0.278,99,0.935,112,0.164,113,0.187,142,0.008,143,0.008,145,2.492,146,2.669,147,2.669,148,2.492,149,3.568,150,2.578,153,3.291,154,2.578,155,2.669,158,2.986,159,2.068,173,2.669,371,5.833,486,3.412,515,5.709,549,5.5,550,5.074,580,5.074,581,5.074,582,5.772,583,5.772,584,5.074,585,4.269]],["title/injectables/CategoryService.html",[175,1.016,549,2.797]],["body/injectables/CategoryService.html",[3,0.076,4,0.069,5,0.062,12,1.648,19,0.236,20,0.844,21,2.664,28,2.191,30,0.011,34,3.337,36,0.632,38,1.398,43,1.741,46,1.332,47,0.88,48,0.544,49,0.907,61,1.546,70,3.393,79,2.284,80,3.831,94,3.225,95,0.194,98,2.664,99,0.436,112,0.076,113,0.087,121,1.645,142,0.005,143,0.005,159,0.965,175,0.991,176,1.057,178,1.878,182,1.745,184,2.664,194,2.368,195,2.432,196,4.398,197,2.154,214,1.246,215,1.291,217,0.53,219,1.126,226,2.761,227,3.116,229,1.518,237,2.756,241,2.761,242,2.573,243,2.945,244,2.209,245,3.241,247,1.865,250,2.368,486,4.103,490,3.671,491,2.154,492,1.246,500,1.516,504,1.341,512,4.393,517,3.671,519,4.495,522,2.004,524,2.35,525,3.564,530,3.759,532,1.865,535,3.337,537,4.261,538,3.884,539,3.089,540,3.089,549,2.725,584,2.368,586,2.368,587,3.338,588,2.695,589,2.695,590,3.671,591,4.177,592,2.695,593,2.695,594,4.177,595,2.161,596,3.338,597,2.695,598,2.695,599,5.761,600,2.695,601,2.368,602,3.671,603,3.671,604,2.695,605,4.495,606,3.164,607,4.177,608,2.695,609,1.993,610,3.54,611,1.667,612,2.695,613,2.695,614,2.695,615,2.695,616,2.695,617,1.993,618,2.154,619,2.154,620,4.177,621,4.177,622,4.177,623,4.177,624,2.695,625,2.695,626,2.695,627,2.368,628,2.695,629,4.177,630,1.993,631,3.089,632,2.695,633,2.368,634,2.695,635,2.161,636,2.695,637,2.695,638,2.695,639,4.177,640,2.695,641,2.368,642,2.695,643,3.671,644,2.695,645,2.695,646,2.695,647,5.115,648,2.695,649,2.695,650,2.154,651,2.695,652,2.695,653,2.695,654,2.695,655,2.695,656,2.695,657,2.695,658,2.695,659,2.695,660,2.695,661,2.695,662,4.177,663,2.695]],["title/entities/ChangePasswordEntity.html",[485,1.26,664,2.966]],["body/entities/ChangePasswordEntity.html",[3,0.165,4,0.15,5,0.135,19,0.509,29,1.937,30,0.01,36,0.785,40,1.165,43,2.34,48,0.731,49,1.126,61,2.161,95,0.196,112,0.165,113,0.188,142,0.008,143,0.008,217,1.143,485,2.103,487,2.511,489,1.696,493,2.804,509,3.58,664,4.95,665,6.457,666,4.648,667,3.458,668,4.561,669,5.112,670,5.112,671,5.112]],["title/controllers/ChangePasswordMailController.html",[0,1.101,672,3.17]],["body/controllers/ChangePasswordMailController.html",[0,1.425,2,1.587,3,0.157,4,0.143,5,0.129,9,2.478,19,0.486,20,1.403,29,1.388,30,0.01,36,0.563,38,1.091,40,1.094,46,1.121,47,0.687,48,0.524,49,0.873,71,2.318,95,0.255,96,2.395,99,0.899,102,1.677,103,2.176,104,2.11,105,2.245,112,0.157,113,0.18,114,2.395,121,1.464,142,0.008,143,0.008,178,1.847,229,1.351,339,2.659,340,2.659,341,3.329,458,2.565,667,2.478,672,5.137,673,6.105,674,5.608,675,4.877,676,5.551,677,4.877,678,6.946,679,3.742,680,5.549,681,4.947,682,3.432,683,4.947,684,4.434,685,4.434,686,4.434,687,4.877,688,5.549,689,5.549]],["title/injectables/ChangePasswordMailService.html",[175,1.016,683,2.797]],["body/injectables/ChangePasswordMailService.html",[3,0.11,4,0.099,5,0.09,19,0.338,20,1.102,30,0.011,36,0.641,38,1.073,40,0.912,46,1.277,47,0.783,48,0.597,49,0.996,95,0.266,99,0.626,112,0.11,113,0.125,115,1.911,121,1.019,142,0.006,143,0.006,154,1.725,159,1.384,175,1.294,176,2.139,178,1.832,182,2.279,184,3.651,214,1.786,215,1.852,217,0.759,219,2.642,226,2.615,227,2.871,229,1.674,241,2.615,242,3.237,243,2.824,244,1.2,288,2.857,290,1.852,317,2.857,345,1.998,430,2.521,432,2.674,433,2.674,477,2.173,482,2.521,568,2.674,570,3.408,606,2.39,664,5.207,665,3.087,667,2.824,668,3.213,674,5.083,679,2.94,681,4.73,682,2.39,683,3.56,684,5.493,690,3.087,691,5.456,692,5.456,693,3.863,694,5.055,695,5.72,696,3.863,697,5.456,698,5.456,699,3.863,700,2.521,701,5.456,702,3.863,703,2.521,704,3.087,705,3.087,706,5.493,707,3.087,708,3.863,709,1.998,710,2.674,711,2.674,712,2.674,713,3.087,714,5.559,715,3.863,716,3.863,717,3.863,718,2.521,719,2.94,720,3.087,721,3.396,722,3.396,723,2.857,724,4.795,725,3.863,726,3.396,727,2.857,728,2.857,729,3.396,730,4.035,731,2.674,732,3.863,733,3.863,734,3.087,735,3.396,736,3.087,737,2.857,738,4.36,739,3.396,740,3.396,741,3.863,742,3.863,743,3.863]],["title/modules/CommonModule.html",[42,0.964,372,2.797]],["body/modules/CommonModule.html",[3,0.162,4,0.147,5,0.133,11,2.052,30,0.011,42,1.857,63,3.986,95,0.29,99,0.928,112,0.162,113,0.186,142,0.008,143,0.008,158,2.963,159,2.052,160,3.525,162,4.623,164,4.579,165,4.383,167,5.241,168,4.383,170,3.738,171,4.237,172,4.623,173,2.649,372,4.623,585,4.237,595,2.963,744,5.729,745,3.525,746,5.729,747,3.965,748,5.729,749,5.729,750,5.729,751,7.085]],["title/controllers/ConfirmCreateUserController.html",[0,1.101,752,3.17]],["body/controllers/ConfirmCreateUserController.html",[0,1.271,2,1.416,3,0.14,4,0.127,5,0.115,9,2.21,19,0.433,20,1.304,29,1.615,30,0.01,36,0.654,38,1.269,40,1.168,46,1,47,0.613,48,0.467,49,0.779,71,2.067,95,0.242,96,2.136,99,0.802,102,1.495,103,1.941,104,1.882,105,2.002,112,0.14,113,0.16,115,1.495,121,1.704,142,0.008,143,0.008,178,1.973,182,2.067,195,2.239,219,2.067,229,1.205,339,2.372,340,2.372,341,3.094,458,2.288,522,2.969,667,3.527,676,6.086,681,3.229,686,3.955,719,3.479,752,4.775,753,6.315,754,5.633,755,4.35,756,7.185,757,4.949,758,5.843,759,6.456,760,4.949,761,6.456,762,4.949,763,4.688,764,4.35,765,4.35,766,4.949,767,4.35,768,4.949,769,4.949]],["title/injectables/ConfirmCreateUserService.html",[175,1.016,763,2.797]],["body/injectables/ConfirmCreateUserService.html",[3,0.106,4,0.096,5,0.086,19,0.327,20,1.075,30,0.011,36,0.54,38,0.733,40,1.073,46,1.075,47,0.659,48,0.502,49,0.838,95,0.25,99,0.604,112,0.106,113,0.121,115,1.608,121,0.985,142,0.006,143,0.006,159,1.336,175,1.262,176,1.463,178,1.511,182,2.224,184,3.128,195,1.565,214,1.725,215,1.788,217,0.733,219,2.224,226,1.788,227,2.827,229,1.511,241,1.788,242,2.377,243,2.771,244,1.928,245,2.099,290,3.873,292,3.654,317,2.76,345,1.93,430,2.434,432,2.582,433,2.582,438,2.434,477,2.994,480,2.982,482,3.473,483,5.407,522,2.588,570,4.292,571,3.292,667,3.021,668,3.654,694,4.254,695,5.662,703,2.434,709,1.93,710,2.582,711,2.582,712,2.582,718,2.434,719,2.868,720,2.982,723,2.76,726,3.279,727,2.76,728,2.76,731,2.582,737,3.937,754,4.59,763,3.473,770,5.454,771,3.279,772,5.323,773,3.731,774,3.731,775,5.323,776,6.205,777,3.731,778,5.323,779,6.288,780,3.279,781,3.731,782,3.279,783,3.731,784,3.731,785,4.678,786,6.288,787,7.154,788,3.731,789,6.205,790,3.731,791,3.731,792,3.731,793,3.731,794,3.279,795,3.731,796,3.731,797,3.731,798,2.994,799,5.454,800,3.731,801,5.323,802,3.731,803,3.731,804,4.59,805,4.254,806,3.731,807,3.731,808,3.279,809,3.731,810,2.982,811,3.279,812,3.279,813,3.279,814,3.279,815,6.205,816,4.254,817,3.731,818,3.731,819,2.76]],["title/classes/CreateProductDto.html",[113,0.139,820,2.966]],["body/classes/CreateProductDto.html",[3,0.133,4,0.12,5,0.108,12,2.418,19,0.409,29,1.94,30,0.01,36,0.786,40,1.074,43,2.251,47,0.96,48,0.732,49,1.301,61,2.251,75,2.74,79,3.773,81,4.6,82,4.6,95,0.209,109,1.725,112,0.133,113,0.201,142,0.007,143,0.007,238,3.961,321,1.413,486,2.981,489,1.475,490,4.115,492,2.875,504,3.477,533,6.605,820,4.304,821,4.11,822,4.676,823,4.676,824,6.219,825,4.676,826,4.676,827,2.685,828,4.676,829,4.676,830,4.676,831,4.676,832,4.56,833,5.585,834,6.198,835,4.676,836,4.97,837,2.892,838,5.898]],["title/classes/CreateRoleDto.html",[113,0.139,839,2.797]],["body/classes/CreateRoleDto.html",[3,0.192,4,0.175,5,0.157,30,0.01,112,0.192,113,0.22,142,0.009,143,0.009,321,2.049,839,5.114,840,5.96,841,5.419]],["title/classes/CreateSiteDto.html",[113,0.139,842,2.797]],["body/classes/CreateSiteDto.html",[3,0.121,4,0.11,5,0.099,12,2.274,19,0.373,29,1.794,30,0.01,36,0.727,40,1.12,47,0.826,48,0.677,75,2.615,95,0.241,109,1.574,112,0.121,113,0.189,115,2.555,142,0.007,143,0.007,290,3.879,321,1.289,343,2.784,345,2.207,346,3.156,477,4.036,480,6.757,489,1.386,606,4.438,798,4.471,827,2.524,832,4.351,836,4.672,837,2.639,838,5.559,842,3.814,843,6.606,844,3.41,845,4.266,846,6.306,847,7.174,848,6.757,849,8.454,850,5.846,851,4.266,852,4.266,853,5.846,854,5.846,855,5.846,856,5.846,857,4.266,858,4.266,859,4.266,860,4.266,861,5.846,862,4.266,863,4.266,864,4.266,865,5.846,866,6.006,867,4.266,868,4.266,869,4.266,870,4.266,871,5.846]],["title/classes/CreateUserAdminDto.html",[113,0.139,872,2.651]],["body/classes/CreateUserAdminDto.html",[3,0.129,4,0.117,5,0.105,12,2.262,19,0.397,29,1.977,30,0.01,36,0.801,40,1.232,48,0.746,49,1.158,54,3.428,95,0.205,109,1.674,112,0.129,113,0.197,115,2.651,142,0.007,143,0.007,266,5.357,321,1.371,489,1.445,667,3.073,679,3.709,832,5.158,837,2.806,838,5.973,866,6.454,872,3.77,873,7.098,874,3.356,875,4.491,876,6.747,877,5.091,878,4.537,879,6.095,880,4.537,881,7.359,882,6.095,883,4.537,884,4.537,885,6.095,886,6.095,887,4.537,888,4.537,889,4.537,890,6.095,891,4.537,892,4.537,893,3.626,894,6.095,895,4.537,896,4.537]],["title/modules/DatabaseModule.html",[42,0.964,373,2.966]],["body/modules/DatabaseModule.html",[3,0.143,4,0.13,5,0.117,11,1.804,30,0.011,42,1.468,48,0.475,95,0.267,99,0.816,112,0.143,113,0.163,121,1.723,142,0.008,143,0.008,150,2.249,158,3.378,159,1.804,173,2.328,217,0.99,227,2.728,238,2.414,240,2.104,290,3.129,292,3.845,373,4.519,383,5.739,387,3.725,679,3.904,719,3.904,897,5.036,898,7.246,899,6.53,900,6.53,901,6.53,902,7.667,903,6.53,904,6.738,905,4.426,906,3.485,907,5.036,908,6.53,909,6.53,910,6.369,911,7.246,912,6.369,913,5.036,914,4.426,915,5.036,916,5.036,917,4.426,918,5.036,919,5.036,920,5.036,921,5.036,922,5.036]],["title/injectables/KeycloakConfigService.html",[175,1.016,415,2.797]],["body/injectables/KeycloakConfigService.html",[3,0.165,4,0.15,5,0.135,19,0.509,20,1.444,30,0.01,36,0.59,38,1.143,95,0.241,99,0.942,103,2.281,104,2.212,105,2.353,112,0.165,113,0.188,121,1.535,142,0.008,143,0.008,175,1.696,176,2.281,240,2.43,415,4.666,430,3.795,923,6.286,924,5.112,925,8.079,926,5.816,927,7.744,928,7.152,929,5.816,930,7.152,931,2.689,932,5.112,933,5.816,934,5.112,935,5.816,936,5.816,937,5.816,938,5.816,939,5.816,940,5.816,941,5.816,942,5.816,943,5.816,944,5.816,945,5.816,946,5.816]],["title/controllers/KeycloakController.html",[0,1.101,947,3.17]],["body/controllers/KeycloakController.html",[0,0.935,2,0.647,3,0.064,4,0.058,5,0.052,9,1.011,11,2.192,12,1.975,19,0.198,20,0.735,28,1.384,29,1.673,30,0.011,34,2.374,35,3.198,36,0.678,38,1.529,40,1.109,42,1.504,43,2.444,46,1.299,47,0.796,48,0.607,49,1.012,53,1.273,63,4.275,70,4.663,71,2.556,80,4.095,94,1.882,95,0.176,96,1.97,97,1.477,98,3.41,99,0.367,102,0.684,103,0.887,104,1.384,105,0.916,106,3.884,107,2.692,108,1.126,109,0.835,112,0.064,113,0.073,114,0.977,115,0.684,119,3.763,121,1.765,142,0.004,143,0.004,160,2.271,178,2.002,193,4.179,195,2.533,196,4.81,229,1.629,244,2.078,458,1.046,522,2.566,524,2.941,525,3.234,554,1.674,557,1.809,578,2.692,635,1.882,668,4.579,719,4.595,947,2.692,948,1.989,949,3.198,950,4.011,951,4.011,952,5.228,953,3.198,954,4.564,955,3.198,956,5.879,957,1.989,958,2.263,959,2.263,960,1.989,961,7.109,962,2.263,963,2.263,964,6.227,965,2.263,966,2.263,967,4.179,968,2.263,969,2.263,970,2.263,971,2.263,972,1.989,973,2.263,974,2.263,975,2.263,976,2.263,977,2.263,978,1.989,979,2.263,980,4.891,981,2.263,982,2.263,983,2.263,984,5.379,985,2.263,986,5.379,987,1.989,988,2.978,989,1.989,990,2.263,991,2.263,992,6.689,993,2.263,994,2.263,995,2.263,996,2.263,997,2.263,998,4.564,999,2.263,1000,2.263,1001,2.263,1002,4.564,1003,2.263,1004,2.263,1005,2.263,1006,2.263,1007,2.263,1008,2.263,1009,2.263,1010,2.263,1011,2.263,1012,2.263,1013,2.263,1014,2.263,1015,2.263]],["title/modules/KeycloakModule.html",[42,0.964,374,2.966]],["body/modules/KeycloakModule.html",[2,1.975,3,0.156,4,0.141,5,0.127,11,1.968,30,0.01,42,1.697,95,0.284,99,0.89,112,0.156,113,0.178,142,0.008,143,0.008,145,2.372,146,2.541,147,2.541,148,2.372,149,3.49,150,2.454,153,3.192,154,2.454,155,2.541,158,2.843,159,1.968,160,3.435,161,4.064,173,3.192,372,5.433,374,5.915,585,4.064,947,5.583,988,5.433,989,4.83,1016,4.83,1017,5.495,1018,4.83,1019,5.495,1020,5.495,1021,6.904,1022,4.392,1023,5.495]],["title/injectables/KeycloakService.html",[175,1.016,988,2.797]],["body/injectables/KeycloakService.html",[3,0.053,4,0.048,5,0.043,10,3.441,11,1.666,12,1.693,19,0.163,20,0.627,28,1.517,30,0.011,34,2.025,36,0.707,38,1.461,40,1.125,42,1.255,43,2.297,46,1.252,47,0.767,48,0.701,49,0.976,53,1.048,63,3.735,70,4.105,71,1.943,80,3.756,94,1.605,95,0.199,98,3.151,99,0.302,112,0.053,113,0.06,115,1.205,121,1.698,142,0.004,143,0.004,159,0.667,160,1.984,161,1.378,175,0.736,176,0.731,178,1.939,182,1.297,184,2.151,195,2.482,196,4.598,214,0.862,215,0.893,217,0.366,218,1.638,219,2.912,226,2.971,227,3.105,229,1.51,241,2.971,242,2.874,243,3.043,244,2.279,245,3.487,387,1.378,489,0.736,522,2.156,524,2.617,525,1.92,606,1.153,635,2.406,668,4.256,719,4.528,798,1.746,904,5.201,932,3.506,934,3.506,949,2.728,950,2.728,951,2.728,953,2.728,955,2.728,956,2.728,957,2.728,960,2.728,961,6.611,964,6.448,967,2.481,972,2.728,978,2.728,980,3.718,986,4.542,987,4.904,988,2.025,1022,1.489,1024,1.638,1025,3.989,1026,3.104,1027,4.652,1028,3.104,1029,1.863,1030,5.58,1031,3.989,1032,3.104,1033,1.863,1034,1.863,1035,3.104,1036,1.863,1037,3.104,1038,1.863,1039,1.863,1040,1.863,1041,1.863,1042,3.104,1043,1.863,1044,3.104,1045,3.104,1046,3.104,1047,1.863,1048,1.863,1049,5.917,1050,1.638,1051,1.863,1052,1.863,1053,1.863,1054,1.863,1055,1.863,1056,1.863,1057,6.97,1058,5.58,1059,1.863,1060,1.863,1061,1.863,1062,1.863,1063,6.639,1064,3.104,1065,1.863,1066,1.863,1067,5.168,1068,5.168,1069,4.652,1070,4.652,1071,1.256,1072,3.104,1073,3.104,1074,1.863,1075,1.863,1076,1.863,1077,3.104,1078,1.863,1079,3.989,1080,1.863,1081,1.863,1082,1.863,1083,1.863,1084,1.863,1085,1.863,1086,1.863,1087,1.863]],["title/modules/MailModule.html",[42,0.964,375,2.966]],["body/modules/MailModule.html",[2,1.633,3,0.117,4,0.106,5,0.095,11,1.476,30,0.011,42,1.472,95,0.285,99,0.667,112,0.117,113,0.133,142,0.007,143,0.007,145,1.779,146,1.905,147,1.905,148,1.779,149,3.027,150,2.924,153,2.639,154,1.84,155,1.905,158,2.131,159,1.476,173,1.905,182,1.721,238,1.975,345,2.131,375,5.958,457,3.622,522,2.459,664,2.852,672,4.843,674,4.221,683,5.484,685,4.561,700,2.689,703,2.689,709,2.131,710,2.852,713,4.561,719,2.22,752,4.843,754,4.221,763,5.484,764,3.622,765,3.622,910,3.622,912,3.622,1088,3.622,1089,3.622,1090,3.622,1091,5.484,1092,5.817,1093,4.12,1094,4.843,1095,4.12,1096,4.12,1097,3.95,1098,4.12,1099,3.622,1100,4.12,1101,4.221,1102,3.293,1103,4.12,1104,3.622,1105,4.12,1106,4.12,1107,4.12,1108,4.12,1109,4.12,1110,4.12,1111,4.12,1112,4.12,1113,4.12,1114,4.12,1115,4.12,1116,4.12,1117,4.12,1118,4.12,1119,4.12,1120,3.622,1121,4.12,1122,4.12,1123,4.12,1124,4.12]],["title/entities/PaywallModule.html",[160,2.132,485,1.26]],["body/entities/PaywallModule.html",[3,0.157,4,0.143,5,0.128,12,2.167,19,0.485,29,1.986,30,0.01,36,0.805,40,1.145,43,2.289,47,0.938,48,0.771,61,2.096,95,0.186,112,0.157,113,0.179,142,0.008,143,0.008,160,3.45,217,1.088,485,2.039,487,2.39,489,1.645,493,2.764,509,3.502,1125,4.865,1126,4.685,1127,3.901,1128,4.865,1129,4.525,1130,2.413,1131,5.129,1132,5.535,1133,5.535,1134,5.535,1135,5.535,1136,5.542]],["title/entities/PaywallModuleAction.html",[165,2.651,485,1.26]],["body/entities/PaywallModuleAction.html",[3,0.171,4,0.155,5,0.139,12,2.249,19,0.527,29,1.826,30,0.01,36,0.74,40,1.053,42,1.767,43,2.375,48,0.689,61,2.206,95,0.202,112,0.171,113,0.195,142,0.009,143,0.009,165,4.516,166,5.813,217,1.182,485,2.146,487,2.597,489,1.731,493,2.657,509,3.634,1137,4.807,1138,6.015,1139,6.015]],["title/entities/PaywallModuleActionRelation.html",[168,2.651,485,1.26]],["body/entities/PaywallModuleActionRelation.html",[3,0.152,4,0.138,5,0.124,19,0.469,29,1.866,30,0.01,36,0.756,42,1.82,43,2.254,48,0.704,61,2.052,95,0.251,112,0.152,113,0.173,142,0.008,143,0.008,160,4.18,165,5.197,167,3.96,168,4.201,169,5.802,170,5.118,217,1.052,240,3.277,485,1.997,487,2.311,489,1.61,498,4.431,509,3.448,510,4.867,1140,4.706,1141,5.354,1142,6.269,1143,5.354,1144,5.354,1145,4.279,1146,5.354]],["title/entities/Plan.html",[485,1.26,1147,2.651]],["body/entities/Plan.html",[3,0.087,4,0.079,5,0.071,12,1.587,19,0.269,29,2.099,30,0.011,36,0.851,40,1.114,47,1.02,48,0.815,49,0.727,61,2.452,75,2.176,79,1.373,95,0.208,112,0.087,113,0.1,142,0.005,143,0.005,217,0.604,238,2.214,240,3.487,485,1.358,487,1.327,489,1.095,493,2.85,495,2.457,507,2.457,509,2.136,595,1.59,611,3.816,745,3.069,747,2.128,827,2.663,1071,1.244,1127,4.47,1129,4.025,1130,2.3,1136,3.692,1147,2.857,1148,2.702,1149,4.104,1150,4.315,1151,4.877,1152,4.09,1153,4.576,1154,4.877,1155,6.612,1156,4.104,1157,4.877,1158,4.877,1159,4.877,1160,4.877,1161,3.62,1162,4.315,1163,4.104,1164,2.76,1165,3.075,1166,4.06,1167,3.075,1168,3.075,1169,6.664,1170,6.097,1171,3.075,1172,3.692,1173,3.075,1174,3.075,1175,3.075,1176,3.075,1177,3.692,1178,3.075,1179,3.075,1180,2.457,1181,4.619,1182,3.075,1183,3.692,1184,3.075,1185,3.692,1186,3.075,1187,3.692,1188,3.075,1189,3.692,1190,3.075,1191,3.692,1192,3.075,1193,3.075,1194,3.075,1195,3.075,1196,4.06,1197,3.075,1198,3.075,1199,3.075,1200,4.06,1201,3.075,1202,4.06,1203,3.692,1204,1.657]],["title/classes/PlanDto.html",[113,0.139,1205,3.17]],["body/classes/PlanDto.html",[3,0.132,4,0.12,5,0.108,12,1.997,19,0.408,29,2.066,30,0.01,36,0.838,40,1.218,47,0.864,48,0.78,49,1.3,61,1.877,75,2.737,95,0.157,112,0.176,113,0.201,142,0.007,143,0.007,290,2.236,321,1.41,470,4.101,482,3.045,489,1.473,512,4.111,827,2.681,832,5.39,833,4.964,834,6.193,836,5.579,837,2.887,1164,4.046,1205,4.594,1206,3.729,1207,6.136,1208,6.136,1209,6.136,1210,6.136,1211,4.666,1212,4.101,1213,4.666,1214,4.666,1215,4.666,1216,4.666,1217,4.666,1218,4.666,1219,6.211,1220,4.666,1221,4.666,1222,6.211,1223,5.459,1224,4.101,1225,3.451,1226,4.101,1227,4.101,1228,3.729,1229,4.101,1230,4.666,1231,4.101]],["title/controllers/PlansController.html",[0,1.101,1232,3.17]],["body/controllers/PlansController.html",[0,1.141,2,0.622,3,0.062,4,0.056,5,0.05,9,0.971,12,1.811,19,0.19,20,0.712,21,2.054,22,2.075,28,2.721,29,1.649,30,0.011,36,0.668,38,1.515,39,1.224,41,1.738,43,2.502,46,1.445,47,0.783,48,0.597,49,0.996,53,3.381,61,2.303,69,1.505,70,2.075,71,0.909,75,2.201,80,2.753,90,1.224,92,1.912,94,3.109,95,0.229,96,1.521,97,1.419,98,3.309,99,0.571,102,0.657,103,0.853,104,0.827,105,0.88,106,4.42,108,1.082,109,0.803,112,0.062,113,0.07,114,0.939,115,0.657,119,4.336,121,1.739,133,1.505,136,1.609,137,1.505,139,1.912,142,0.004,143,0.004,178,1.659,195,2.444,196,4.768,227,0.909,229,0.53,240,0.909,244,1.867,271,3.098,339,1.042,340,1.042,341,2.129,411,1.912,458,1.006,518,2.607,521,1.609,522,2.091,524,1.983,525,4.936,527,1.609,528,3.286,529,1.609,530,4.67,535,4.3,537,5.396,538,4.297,539,3.779,540,3.779,547,5.282,548,2.607,554,1.609,557,1.738,558,1.505,559,3.159,566,1.609,578,2.607,609,1.609,610,4.561,611,2.748,635,1.823,682,2.18,827,1.918,1071,0.88,1130,0.757,1147,5.264,1153,1.505,1204,4.462,1205,4.445,1232,2.607,1233,1.912,1234,3.524,1235,4.49,1236,2.607,1237,3.905,1238,2.175,1239,2.175,1240,1.912,1241,2.175,1242,2.175,1243,3.098,1244,2.175,1245,2.175,1246,1.609,1247,2.175,1248,4.49,1249,2.175,1250,2.175,1251,2.175,1252,1.912,1253,5.614,1254,3.779,1255,2.175,1256,2.175,1257,2.899,1258,1.912,1259,2.175,1260,2.175,1261,2.175,1262,2.175,1263,1.912,1264,2.175,1265,2.175,1266,2.175,1267,2.175,1268,3.524,1269,2.175,1270,2.175,1271,2.175,1272,2.175,1273,2.175,1274,2.175,1275,2.175,1276,2.175,1277,2.175,1278,2.175,1279,2.175,1280,2.175,1281,2.175,1282,2.175,1283,2.175,1284,2.175,1285,2.175,1286,2.175]],["title/modules/PlansModule.html",[42,0.964,376,2.966]],["body/modules/PlansModule.html",[2,2.005,3,0.16,4,0.145,5,0.13,11,2.017,30,0.01,42,1.716,95,0.282,99,0.912,112,0.16,113,0.182,142,0.008,143,0.008,145,2.431,146,2.603,147,2.603,148,2.431,149,3.529,150,2.514,153,3.241,154,2.514,155,2.603,158,2.912,159,2.017,173,2.603,376,5.798,585,4.164,595,2.912,745,3.487,747,3.897,1147,4.336,1232,5.645,1257,5.466,1258,4.949,1287,4.949,1288,4.949,1289,5.63,1290,5.63,1291,4.949,1292,4.164]],["title/entities/PlansProductCategory.html",[485,1.26,745,2.132]],["body/entities/PlansProductCategory.html",[3,0.117,4,0.106,5,0.096,19,0.362,29,2.065,30,0.01,36,0.837,40,1.021,47,0.92,48,0.779,61,2.495,95,0.221,112,0.117,113,0.134,142,0.007,143,0.007,217,0.813,485,1.682,487,1.785,489,1.357,490,3.864,492,3.554,493,2.882,495,3.305,498,3.733,500,3.691,504,2.847,508,3.305,509,2.645,510,4.281,511,5.243,595,4.314,745,3.264,827,2.47,1147,5.044,1150,4.281,1152,3.539,1162,4.85,1169,3.635,1292,6.168,1293,3.635,1294,5.243,1295,5.243,1296,5.94,1297,4.853,1298,5.243,1299,4.135,1300,4.135,1301,4.135,1302,4.135,1303,4.135,1304,4.135,1305,4.135,1306,4.135,1307,4.135,1308,4.135,1309,4.135,1310,4.135,1311,4.135,1312,4.135,1313,4.135,1314,4.135,1315,4.135,1316,4.135]],["title/injectables/PlansService.html",[175,1.016,1257,2.797]],["body/injectables/PlansService.html",[3,0.046,4,0.041,5,0.037,12,1.799,19,0.141,20,0.555,21,1.659,22,1.617,28,1.612,30,0.011,36,0.616,38,1.406,39,1.545,43,2.356,46,1.175,47,0.937,48,0.549,49,0.916,53,2.384,61,2.243,70,3.427,75,2.664,80,2.977,94,3.01,95,0.16,98,2.908,99,0.261,112,0.046,113,0.052,115,0.83,121,1.536,142,0.003,143,0.003,159,0.577,175,0.651,176,0.632,178,1.887,182,1.147,184,2.555,195,2.439,196,4.425,214,1.27,215,0.772,217,0.317,219,1.147,226,2.648,227,3.297,229,1.687,241,2.648,242,2.599,243,2.968,244,2.223,245,2.912,247,1.901,290,2.279,292,2.496,438,1.792,477,1.545,486,1.316,490,2.113,500,2.019,512,1.617,522,1.801,524,2.019,525,3.89,530,3.377,532,2.484,535,4.104,537,4.305,538,3.048,539,3.135,540,3.135,568,2.933,569,1.416,570,0.868,571,0.997,595,0.834,603,1.416,606,2.22,610,4.703,611,1.699,617,2.031,618,1.288,619,1.288,630,1.192,631,3.135,635,2.46,745,0.802,747,1.115,794,3.154,819,1.192,846,1.416,848,1.288,1147,5.158,1150,4.337,1151,1.416,1152,2.22,1153,2.484,1154,1.416,1156,4.491,1157,1.416,1158,1.416,1159,1.416,1160,1.416,1161,1.052,1162,2.766,1164,1.785,1204,4.202,1235,3.726,1236,2.654,1237,2.414,1240,2.414,1243,2.414,1246,2.031,1248,5.115,1252,2.414,1257,1.792,1291,1.416,1292,1.192,1294,2.868,1295,2.868,1297,2.654,1298,2.868,1317,1.416,1318,2.746,1319,2.746,1320,1.612,1321,3.589,1322,1.612,1323,2.746,1324,2.746,1325,1.612,1326,1.612,1327,3.388,1328,2.746,1329,1.612,1330,1.612,1331,3.726,1332,2.746,1333,1.612,1334,1.612,1335,2.746,1336,1.612,1337,5.82,1338,1.612,1339,1.612,1340,1.612,1341,2.746,1342,4.239,1343,3.589,1344,1.288,1345,1.288,1346,1.612,1347,1.612,1348,1.612,1349,1.612,1350,1.612,1351,1.612,1352,1.612,1353,1.612,1354,1.612,1355,1.612,1356,1.612,1357,1.612,1358,1.612,1359,1.612,1360,1.612,1361,3.589,1362,1.612,1363,1.612,1364,1.612,1365,2.746,1366,1.612,1367,2.746,1368,1.612,1369,1.612,1370,1.612,1371,1.612,1372,1.612,1373,1.612,1374,1.612,1375,1.612,1376,1.612,1377,1.612,1378,1.612,1379,1.612,1380,2.868,1381,4.239,1382,3.589,1383,1.612,1384,1.416,1385,1.612,1386,1.612,1387,1.612,1388,2.746,1389,1.612,1390,2.414,1391,2.746,1392,3.589,1393,2.746,1394,1.416,1395,1.612,1396,1.612,1397,1.612,1398,1.612,1399,1.612,1400,1.612,1401,1.612,1402,5.176,1403,1.612,1404,1.612,1405,1.612,1406,2.746,1407,2.414,1408,2.414,1409,1.416,1410,1.612,1411,1.416,1412,1.416,1413,1.612,1414,2.746,1415,2.746,1416,2.746,1417,2.746,1418,2.746,1419,1.288,1420,1.612,1421,1.612,1422,1.612,1423,1.612,1424,1.612]],["title/entities/Product.html",[79,1.914,485,1.26]],["body/entities/Product.html",[3,0.108,4,0.098,5,0.089,12,2.351,19,0.335,28,2.06,29,1.97,30,0.011,36,0.799,40,0.987,47,0.955,48,0.767,49,0.853,61,1.637,75,2.467,79,3.762,81,4.007,82,4.007,95,0.23,109,1.411,112,0.108,113,0.124,142,0.006,143,0.006,217,0.752,238,2.596,240,2.263,485,1.593,486,3.84,487,1.651,489,1.285,490,3.19,492,3.704,493,2.535,498,2.495,500,3.539,504,2.695,508,3.057,509,2.505,510,3.535,511,5.027,533,4.329,641,3.361,827,2.339,838,5.703,893,4.329,1127,4.432,1129,4.464,1130,2.512,1131,5.06,1149,4.653,1163,4.653,1170,4.007,1180,3.057,1203,4.329,1425,3.361,1426,3.824,1427,3.824,1428,4.761,1429,3.824,1430,5.417,1431,3.824,1432,5.417,1433,4.761,1434,5.417,1435,3.824,1436,3.824,1437,3.749,1438,4.761,1439,3.824,1440,3.057,1441,3.824,1442,3.824,1443,3.824,1444,3.824,1445,3.824,1446,5.417,1447,3.824,1448,5.417,1449,3.824,1450,3.361,1451,3.361,1452,3.824]],["title/controllers/ProductController.html",[0,1.101,1453,3.17]],["body/controllers/ProductController.html",[0,0.878,2,0.978,3,0.097,4,0.088,5,0.079,9,1.527,12,1.859,19,0.299,20,1.009,21,3.004,29,1.806,30,0.01,34,3.261,36,0.732,38,1.503,43,2.182,46,1.396,47,0.923,48,0.736,49,1.088,53,2.811,69,2.366,71,1.428,79,3.693,95,0.243,96,2.157,97,2.231,98,2.31,99,0.554,102,1.033,103,1.341,104,1.3,105,1.383,106,4.194,107,5.112,108,1.701,109,1.262,112,0.097,113,0.111,114,1.476,115,1.033,119,4.061,121,1.905,133,2.366,142,0.006,143,0.006,178,2.064,195,2.388,197,3.994,229,1.758,240,1.428,244,1.552,339,1.639,340,1.639,341,2.395,458,1.581,486,2.395,492,2.31,518,4.368,521,2.529,522,1.739,524,2.811,527,2.529,528,4.805,529,2.529,530,3.854,538,4.071,548,3.696,558,2.366,565,2.732,566,2.529,595,3.857,820,5.16,967,3.994,1380,3.994,1453,3.696,1454,3.005,1455,5.191,1456,4.392,1457,4.997,1458,4.997,1459,3.419,1460,3.419,1461,4.997,1462,3.419,1463,3.005,1464,3.419,1465,3.419,1466,3.419,1467,3.419,1468,3.419,1469,3.419,1470,3.419,1471,3.419,1472,5.711,1473,3.419,1474,3.419,1475,3.419,1476,3.005,1477,3.419,1478,3.419,1479,3.854,1480,3.005,1481,2.732,1482,3.005,1483,3.419,1484,3.419,1485,3.419,1486,3.419,1487,3.419,1488,3.419,1489,3.419,1490,3.419,1491,3.419,1492,3.419,1493,3.419,1494,3.419,1495,3.005,1496,3.419,1497,3.419]],["title/modules/ProductModule.html",[42,0.964,377,2.966]],["body/modules/ProductModule.html",[2,2.024,3,0.162,4,0.147,5,0.132,11,2.047,30,0.01,42,1.728,79,2.552,95,0.283,99,0.926,112,0.162,113,0.185,142,0.008,143,0.008,145,2.467,146,2.642,147,2.642,148,2.467,149,3.552,150,2.552,153,3.271,154,2.552,155,2.642,158,2.956,159,2.047,173,2.642,377,5.819,486,3.391,1453,5.683,1479,5.486,1480,5.023,1481,4.567,1498,5.023,1499,5.023,1500,5.715,1501,5.715,1502,5.023,1503,5.715]],["title/injectables/ProductService.html",[175,1.016,1479,2.797]],["body/injectables/ProductService.html",[3,0.073,4,0.066,5,0.06,19,0.225,20,0.813,21,2.597,30,0.011,34,3.238,36,0.685,38,1.272,43,2.224,46,1.306,47,0.891,48,0.61,49,1.018,61,1.955,70,1.514,75,2.202,79,3.404,80,2.169,94,1.33,95,0.218,99,0.416,112,0.073,113,0.083,115,1.217,121,1.707,142,0.005,143,0.005,159,0.921,175,0.955,176,1.008,178,1.974,182,1.682,184,3.126,195,2.242,214,1.188,215,1.232,217,0.505,219,1.682,226,3.1,227,3.268,229,1.704,240,1.682,241,3.1,242,2.888,243,3.213,244,2.235,245,3.639,247,3.887,288,1.901,290,1.232,292,2.371,472,3.539,477,3.16,482,2.627,486,2.692,492,2.295,500,4.349,504,3.662,532,1.779,535,3.238,538,3.591,568,1.779,570,1.385,571,1.59,587,3.218,590,4.362,595,3.154,596,3.218,601,2.259,602,2.259,605,4.362,606,3.07,609,1.901,610,3.435,611,1.59,617,1.901,618,2.054,619,2.054,630,1.901,631,2.978,633,2.259,635,2.083,804,2.978,820,1.779,1228,2.054,1236,2.978,1246,2.978,1394,2.259,1419,2.054,1455,3.539,1456,3.539,1463,3.539,1479,2.627,1481,2.054,1482,2.259,1502,2.259,1504,2.259,1505,4.026,1506,2.571,1507,2.571,1508,4.026,1509,4.026,1510,2.571,1511,2.571,1512,2.571,1513,2.571,1514,2.571,1515,4.026,1516,2.571,1517,2.571,1518,2.571,1519,2.571,1520,2.571,1521,4.026,1522,2.571,1523,2.571,1524,2.571,1525,4.026,1526,2.571,1527,2.571,1528,2.259,1529,2.571,1530,4.963,1531,2.571,1532,2.571,1533,4.963,1534,2.571,1535,2.571,1536,2.571,1537,2.571,1538,2.571,1539,4.026,1540,2.571,1541,4.026,1542,4.026,1543,2.571,1544,2.571,1545,2.571,1546,2.571,1547,2.571,1548,2.571,1549,2.259,1550,2.571,1551,2.571,1552,2.571,1553,2.571,1554,2.571,1555,2.571,1556,2.571,1557,4.026,1558,4.026,1559,4.026,1560,2.571,1561,2.571,1562,2.571,1563,2.571,1564,2.571,1565,2.571,1566,2.571,1567,4.026,1568,2.571,1569,2.571]],["title/entities/ResetPasswordEntity.html",[485,1.26,700,2.797]],["body/entities/ResetPasswordEntity.html",[3,0.165,4,0.15,5,0.135,19,0.509,29,1.937,30,0.01,36,0.785,40,1.165,43,2.34,48,0.731,49,1.126,61,2.161,95,0.196,112,0.165,113,0.188,142,0.008,143,0.008,217,1.143,485,2.103,487,2.511,489,1.696,493,2.804,509,3.58,666,4.648,667,3.458,668,4.561,669,5.112,670,5.112,671,5.112,700,4.666,1570,7.101]],["title/controllers/ResetPasswordMailController.html",[0,1.101,1094,3.17]],["body/controllers/ResetPasswordMailController.html",[0,1.221,2,1.36,3,0.178,4,0.122,5,0.11,9,2.123,19,0.416,20,1.27,29,1.189,30,0.01,36,0.482,38,0.934,40,1.155,46,0.96,47,0.588,48,0.449,49,0.748,71,1.986,95,0.252,96,2.052,99,1.018,102,1.436,103,1.864,104,1.808,105,1.923,112,0.135,113,0.154,114,2.052,121,1.254,142,0.007,143,0.007,178,1.716,214,2.907,226,2.278,229,1.158,241,2.278,242,3.146,243,2.808,244,1.953,290,2.278,339,2.278,340,2.278,341,3.013,438,3.102,458,2.198,477,2.674,570,2.561,635,2.459,667,3.146,676,5.025,677,4.178,679,3.388,681,4.103,682,2.94,685,3.799,686,3.799,687,4.178,758,5.545,767,4.178,819,3.516,1091,4.597,1094,4.65,1097,4.876,1104,4.178,1380,3.799,1571,5.526,1572,4.178,1573,6.287,1574,4.754,1575,6.287,1576,4.754,1577,5.526,1578,5.526,1579,5.526,1580,5.025,1581,5.025,1582,5.526,1583,6.287,1584,6.287,1585,4.754,1586,4.754,1587,4.754,1588,4.754,1589,4.754,1590,4.754,1591,4.754,1592,4.754,1593,4.754]],["title/injectables/ResetPasswordMailService.html",[175,1.016,1091,2.797]],["body/injectables/ResetPasswordMailService.html",[3,0.115,4,0.105,5,0.094,19,0.356,20,1.141,30,0.011,36,0.659,38,1.111,40,1.103,46,1.313,47,0.804,48,0.613,49,1.023,95,0.269,99,0.658,112,0.115,113,0.132,115,1.964,142,0.007,143,0.007,159,1.455,175,1.34,176,1.593,178,1.862,182,2.361,184,3.626,214,1.878,215,1.947,217,0.799,219,2.715,226,2.708,227,2.935,229,1.711,241,2.708,242,3.297,243,2.902,244,1.262,290,1.947,317,3.004,345,2.101,430,2.65,432,2.811,433,2.811,570,2.189,667,2.902,668,3.827,681,4.818,690,3.246,694,5.194,695,5.801,700,5.117,703,2.65,709,2.101,710,2.811,711,2.811,712,2.811,713,3.246,718,2.65,719,3.045,720,3.246,721,3.57,722,3.57,723,3.004,727,3.004,728,3.004,730,3.004,731,2.811,738,4.516,739,3.57,740,3.57,758,4.807,798,2.285,1091,3.687,1097,5.111,1099,3.57,1594,6.175,1595,5.651,1596,5.651,1597,4.062,1598,4.062,1599,5.651,1600,5.651,1601,4.062,1602,5.651,1603,4.062,1604,3.246,1605,4.062,1606,4.062,1607,4.062,1608,3.57,1609,3.57,1610,4.062,1611,4.062,1612,4.062]],["title/classes/Role.html",[54,1.914,113,0.139]],["body/classes/Role.html",[3,0.193,4,0.175,5,0.158,30,0.01,54,3.506,112,0.193,113,0.22,142,0.009,143,0.009,321,2.055,1613,5.978]],["title/entities/RolePaywallModule.html",[162,2.797,485,1.26]],["body/entities/RolePaywallModule.html",[3,0.15,4,0.136,5,0.123,19,0.463,29,1.954,30,0.01,36,0.792,40,0.972,43,2.242,48,0.737,54,3.312,61,2.037,63,4.538,75,2.909,95,0.227,112,0.15,113,0.171,142,0.008,143,0.008,160,4.169,162,4.398,163,5.583,217,1.04,238,3.743,240,2.816,485,1.982,487,2.285,489,1.599,493,2.64,498,3.453,509,3.43,510,4.398,827,2.91,1130,2.345,1142,5.387,1145,4.229,1170,3.914,1183,4.229,1614,4.651,1615,5.292,1616,5.292,1617,5.292,1618,5.292]],["title/entities/RolePaywallModuleActionRelation.html",[172,2.797,485,1.26]],["body/entities/RolePaywallModuleActionRelation.html",[3,0.146,4,0.132,5,0.119,19,0.45,29,1.932,30,0.01,36,0.783,40,0.954,42,1.84,43,2.211,48,0.729,54,3.267,61,1.999,63,4.603,95,0.246,112,0.146,113,0.166,142,0.008,143,0.008,160,4.141,163,5.532,168,5.149,170,3.352,171,3.8,172,4.316,217,1.01,240,3.227,485,1.945,487,2.218,489,1.569,493,2.473,498,4.316,509,3.382,510,4.773,1137,4.106,1142,6.174,1145,4.106,1619,5.138,1620,5.138,1621,5.138,1622,5.138]],["title/controllers/RolesController.html",[0,1.101,1623,3.17]],["body/controllers/RolesController.html",[0,1.13,2,1.258,3,0.125,4,0.113,5,0.102,9,1.964,19,0.385,20,1.205,21,3.359,22,3.515,28,2.269,29,1.9,30,0.011,36,0.77,38,1.493,39,2.474,40,1.192,43,2.367,46,1.467,47,0.899,48,0.686,49,1.144,71,2.493,90,2.474,95,0.264,96,2.576,98,2.033,99,0.712,102,1.329,103,1.724,104,1.672,105,1.779,108,2.188,109,1.623,112,0.125,113,0.142,114,1.898,115,1.329,121,2.004,136,4.414,137,3.043,140,3.253,142,0.007,143,0.007,297,2.37,339,2.108,340,2.108,341,2.86,342,2.59,458,3.132,522,2.076,839,5.111,1623,4.414,1624,3.865,1625,4.414,1626,3.865,1627,4.397,1628,4.397,1629,4.397,1630,3.253,1631,5.968,1632,4.397,1633,5.641,1634,4.77,1635,4.397,1636,3.514,1637,4.42,1638,3.865,1639,2.869,1640,4.77,1641,2.869,1642,4.397,1643,4.397,1644,3.043,1645,4.397,1646,4.397,1647,4.397,1648,4.397,1649,3.865,1650,4.397]],["title/modules/RolesModule.html",[42,0.964,378,2.966]],["body/modules/RolesModule.html",[2,2.082,3,0.17,4,0.154,5,0.139,11,2.143,30,0.01,42,1.763,95,0.264,99,0.969,112,0.17,113,0.194,142,0.008,143,0.008,145,2.583,146,2.766,147,2.766,148,2.583,149,3.625,150,2.672,153,3.364,154,2.672,155,2.766,378,5.884,1623,5.8,1637,5.547,1638,5.259,1651,5.259,1652,5.259,1653,5.984,1654,5.984]],["title/injectables/RolesService.html",[175,1.016,1637,2.797]],["body/injectables/RolesService.html",[3,0.135,4,0.123,5,0.111,19,0.418,20,1.273,21,3.472,22,3.713,28,2.398,30,0.01,36,0.792,38,1.608,39,3.547,40,1.126,43,2.424,46,1.517,47,0.93,48,0.709,49,1.182,54,3.353,61,2.539,64,4.392,71,1.994,77,3.531,90,3.547,95,0.238,99,0.773,112,0.135,113,0.155,121,2.06,142,0.007,143,0.007,175,1.495,176,1.872,244,1.483,522,2.193,839,5.094,1625,4.663,1626,5.542,1630,4.663,1633,5.661,1637,4.114,1639,3.115,1640,5.039,1641,3.115,1655,4.196,1656,4.773,1657,4.773,1658,4.773,1659,4.773,1660,4.773,1661,4.773,1662,4.196]],["title/classes/SetDb1691181176026.html",[113,0.139,1663,3.426]],["body/classes/SetDb1691181176026.html",[3,0.086,4,0.079,5,0.071,12,1.758,19,0.267,20,0.927,28,2.506,30,0.01,36,0.56,38,0.903,40,0.44,46,0.927,47,0.954,48,0.521,49,0.723,64,4.336,75,2.165,79,2.743,95,0.103,102,2.092,112,0.086,113,0.099,142,0.005,143,0.005,178,1.686,195,1.806,217,0.6,229,2.051,237,4.683,240,1.274,297,3.551,321,0.922,331,4.336,489,1.089,490,2.704,491,2.438,492,2.123,500,2.583,504,2.284,512,4.078,559,3.158,611,1.887,745,3.445,798,2.583,827,2.652,931,2.123,1071,1.234,1126,1.887,1129,4.518,1130,2.632,1149,2.256,1150,1.99,1152,3.801,1153,2.111,1161,2.996,1162,1.99,1163,2.256,1164,1.517,1166,2.681,1196,2.681,1204,2.474,1294,2.438,1295,2.438,1296,3.669,1298,2.438,1437,3.178,1663,4.91,1664,5.4,1665,2.841,1666,1.796,1667,2.646,1668,2.201,1669,2.123,1670,1.887,1671,2.201,1672,3.626,1673,3.05,1674,2.201,1675,1.887,1676,4.874,1677,3.894,1678,4.91,1679,4.256,1680,4.907,1681,4.825,1682,5.122,1683,5.126,1684,3.05,1685,5.266,1686,4.036,1687,3.05,1688,4.853,1689,2.256,1690,4.036,1691,2.438,1692,3.05,1693,3.05,1694,3.05,1695,3.05,1696,4.91,1697,3.05,1698,4.036,1699,3.05,1700,3.835,1701,4.036,1702,4.3,1703,4.3,1704,4.084,1705,4.591,1706,3.05,1707,4.036,1708,4.036,1709,4.036,1710,2.681,1711,3.278,1712,4.874]],["title/classes/SetDb1691184456498.html",[113,0.139,1713,3.426]],["body/classes/SetDb1691184456498.html",[3,0.132,4,0.12,5,0.108,19,0.408,20,1.254,28,2.362,30,0.01,36,0.708,38,1.221,40,0.673,46,1.254,47,0.959,48,0.659,49,0.978,64,4.187,79,3.558,95,0.157,102,2.408,112,0.132,113,0.151,142,0.007,143,0.007,178,1.941,195,2.188,217,0.917,229,1.941,297,3.347,321,1.41,331,3.494,489,1.473,493,2.099,559,2.977,931,2.871,1071,1.888,1130,1.623,1152,4.318,1665,3.441,1666,2.748,1667,3.346,1668,2.977,1669,2.871,1670,2.887,1671,2.977,1672,4.008,1674,2.977,1675,2.887,1677,3.684,1683,4.604,1696,5.579,1700,3.965,1702,4.052,1703,4.052,1704,4.594,1707,5.459,1711,3.09,1713,5.948,1714,6.541,1715,4.666,1716,5.459,1717,5.459]],["title/classes/SetDb1691184574917.html",[113,0.139,1718,3.426]],["body/classes/SetDb1691184574917.html",[3,0.117,4,0.107,5,0.096,19,0.363,20,1.157,28,2.694,30,0.01,36,0.666,38,1.126,40,0.598,46,1.157,47,0.921,48,0.62,49,0.902,64,4.521,79,3.435,95,0.139,102,2.324,112,0.117,113,0.134,142,0.007,143,0.007,178,1.873,195,2.083,217,0.814,229,2.049,297,3.818,321,1.252,331,3.986,489,1.359,493,2.395,504,3.827,559,3.396,745,3.827,931,2.649,1071,1.676,1130,1.441,1152,4.062,1665,3.276,1666,2.44,1667,3.147,1668,2.746,1669,2.649,1670,2.563,1671,2.746,1672,3.91,1674,2.746,1675,2.563,1677,3.89,1683,4.971,1686,5.772,1700,4.186,1701,5.035,1702,4.623,1703,4.623,1704,5.24,1711,3.525,1716,6.227,1717,5.035,1718,5.662,1719,6.227,1720,4.143,1721,5.729,1722,5.729]],["title/classes/SetDb1691186525496.html",[113,0.139,1723,3.426]],["body/classes/SetDb1691186525496.html",[3,0.113,4,0.102,5,0.092,19,0.348,20,1.123,28,2.645,30,0.01,36,0.651,38,1.093,40,0.573,46,1.123,47,0.907,48,0.606,49,0.875,64,4.474,95,0.134,102,2.294,112,0.113,113,0.129,142,0.006,143,0.006,178,1.849,195,2.045,217,0.781,229,2.086,297,3.748,321,1.2,331,3.913,489,1.319,493,2.351,500,3.611,504,3.194,512,5.045,559,3.812,931,2.571,1071,1.606,1130,1.381,1665,3.216,1666,2.338,1667,3.077,1668,2.666,1669,2.571,1670,2.456,1671,2.666,1672,3.873,1674,2.666,1675,2.456,1677,3.961,1679,3.913,1683,4.919,1696,5.131,1698,5.643,1700,4.262,1702,4.539,1703,4.539,1704,4.114,1708,4.889,1709,4.889,1710,4.889,1711,3.957,1723,5.559,1724,6.114,1725,3.97,1726,5.562,1727,5.562]],["title/classes/SetDb1691512677390.html",[113,0.139,1728,3.426]],["body/classes/SetDb1691512677390.html",[3,0.142,4,0.129,5,0.116,19,0.437,20,1.311,30,0.01,36,0.732,38,1.276,40,0.72,46,1.311,47,0.981,48,0.681,49,1.022,95,0.168,102,2.454,112,0.142,113,0.162,142,0.008,143,0.008,178,1.978,195,2.247,217,0.981,229,1.861,237,3.498,321,1.509,489,1.54,490,3.824,493,2.195,500,3.652,559,3.112,745,3.801,931,3.002,1071,2.02,1130,1.737,1665,3.533,1666,2.94,1667,3.458,1668,3.112,1669,3.002,1670,3.088,1671,3.112,1672,4.061,1674,3.112,1675,3.088,1677,3.533,1679,3.652,1700,3.801,1711,3.23,1728,6.107,1729,6.716,1730,4.388]],["title/classes/SetDb1691515083659.html",[113,0.139,1731,3.426]],["body/classes/SetDb1691515083659.html",[3,0.142,4,0.129,5,0.116,19,0.437,20,1.311,30,0.01,36,0.732,38,1.276,40,0.72,46,1.311,47,0.981,48,0.681,49,1.022,95,0.168,102,2.454,112,0.142,113,0.162,142,0.008,143,0.008,178,1.978,195,2.247,217,0.981,229,1.861,321,1.509,489,1.54,493,2.195,745,3.23,931,3.002,1071,2.02,1130,2.51,1296,5.189,1345,3.99,1665,3.662,1666,2.94,1667,3.458,1668,3.112,1669,3.002,1670,3.088,1671,3.112,1672,4.061,1674,3.112,1675,3.088,1676,3.692,1677,3.002,1700,3.23,1711,2.484,1712,3.692,1730,4.388,1731,6.107,1732,6.716,1733,6.493,1734,6.493,1735,4.992,1736,4.992,1737,4.802,1738,4.992]],["title/classes/SetDb1691708514379.html",[113,0.139,1739,3.426]],["body/classes/SetDb1691708514379.html",[3,0.135,4,0.123,5,0.11,12,1.363,19,0.417,20,1.272,30,0.01,36,0.715,38,1.238,40,0.687,46,1.272,47,1.012,48,0.665,49,0.991,75,1.868,95,0.16,102,2.422,112,0.135,113,0.154,142,0.007,143,0.007,178,1.952,195,2.206,217,0.936,229,1.533,237,4.405,321,1.439,331,2.68,489,1.493,798,3.542,827,2.056,931,2.911,1071,1.927,1126,2.947,1129,4.108,1130,2.454,1161,4.108,1437,4.357,1665,3.469,1666,2.805,1667,3.38,1668,3.018,1669,2.911,1670,2.947,1671,3.018,1672,4.025,1674,3.018,1675,2.947,1676,3.523,1677,2.911,1678,3.807,1680,3.895,1682,4.657,1683,4.362,1685,3.807,1688,5.534,1689,3.523,1690,5.534,1691,3.807,1712,3.523,1739,5.997,1740,6.595,1741,4.763,1742,6.296,1743,6.296,1744,4.763,1745,4.763,1746,4.763]],["title/classes/SetDbPaywalmodule1692297610787.html",[113,0.139,1747,3.426]],["body/classes/SetDbPaywalmodule1692297610787.html",[3,0.098,4,0.089,5,0.08,12,1.442,19,0.303,20,1.018,28,2.641,30,0.01,36,0.603,38,0.991,40,0.499,43,2.401,46,1.018,47,0.897,48,0.561,49,0.794,53,1.947,54,2.251,64,4.47,95,0.116,102,2.191,112,0.098,113,0.112,142,0.006,143,0.006,178,1.766,195,1.921,217,0.68,229,2.085,237,4.387,297,3.742,321,1.046,331,4.47,489,1.196,559,3.329,931,2.331,1071,1.4,1126,2.14,1129,2.258,1130,1.204,1665,3.021,1667,2.85,1668,2.416,1669,2.331,1671,2.416,1672,3.748,1674,2.416,1676,5.137,1677,3.959,1678,5.551,1679,4.315,1680,3.679,1681,3.88,1683,5.163,1685,5.551,1700,3.953,1702,4.532,1703,4.532,1711,3.455,1712,5.137,1747,5.222,1748,5.743,1749,5.222,1750,2.765,1751,3.041,1752,3.46,1753,3.041,1754,4.029,1755,3.46,1756,5.041,1757,3.46,1758,7.25,1759,5.362,1760,5.041,1761,3.46,1762,5.794,1763,5.041,1764,3.46,1765,4.833,1766,3.46,1767,5.041,1768,5.227,1769,5.041,1770,3.46,1771,5.041,1772,5.041,1773,3.46,1774,4.431]],["title/classes/SetDbPaywalmodule1692380137673.html",[113,0.139,1775,3.426]],["body/classes/SetDbPaywalmodule1692380137673.html",[3,0.109,4,0.099,5,0.089,19,0.336,20,1.097,30,0.01,36,0.639,38,1.067,40,0.553,46,1.097,47,0.895,48,0.595,49,0.855,95,0.129,102,2.269,112,0.109,113,0.124,142,0.006,143,0.006,178,1.828,195,2.015,217,0.754,229,2.124,237,2.068,238,1.839,321,1.16,489,1.288,493,2.806,559,3.896,827,1.657,931,2.51,1071,1.553,1126,3.359,1127,3.055,1130,2.384,1150,3.543,1156,4.016,1161,3.543,1162,3.543,1172,4.34,1177,4.34,1185,4.34,1187,4.34,1189,4.34,1191,4.34,1204,4.671,1665,3.343,1667,3.02,1668,2.602,1669,2.51,1671,2.602,1672,3.843,1674,2.602,1677,4.032,1679,4.068,1680,3.359,1681,3.543,1682,2.838,1700,4.338,1711,4.091,1737,4.016,1749,5.476,1750,3.067,1751,3.373,1753,3.373,1754,4.34,1775,5.476,1776,6.022,1777,3.837]],["title/classes/SetNewPlansFields1692380743605.html",[113,0.139,1778,3.426]],["body/classes/SetNewPlansFields1692380743605.html",[3,0.108,4,0.098,5,0.088,19,0.334,20,1.092,30,0.01,36,0.637,38,1.062,40,0.55,46,1.092,47,0.893,48,0.592,49,0.851,95,0.128,102,2.264,112,0.108,113,0.123,142,0.006,143,0.006,178,1.824,195,2.009,217,0.749,229,2.122,237,2.054,238,1.827,244,2.122,321,1.152,489,1.282,493,2.803,559,3.891,827,1.646,931,2.499,1071,1.542,1126,3.343,1127,3.04,1130,2.377,1150,3.526,1156,3.997,1161,3.526,1162,3.526,1172,4.319,1177,4.319,1185,4.319,1187,4.319,1189,4.319,1191,4.319,1204,4.72,1665,3.335,1667,3.009,1668,2.59,1669,2.499,1671,2.59,1672,3.837,1674,2.59,1677,4.029,1679,4.057,1680,3.343,1681,3.526,1682,2.819,1700,4.335,1711,4.085,1737,3.997,1754,4.319,1778,5.46,1779,6.004,1780,2.638,1781,2.819,1782,3.812,1783,2.819]],["title/classes/SetNewPlansFields1692815139944.html",[113,0.139,1784,3.426]],["body/classes/SetNewPlansFields1692815139944.html",[3,0.117,4,0.106,5,0.095,19,0.36,20,1.151,30,0.01,36,0.663,38,1.121,40,0.593,46,1.151,47,0.918,48,0.617,49,0.897,53,3.207,54,3.582,75,2.235,95,0.138,102,2.319,112,0.117,113,0.133,142,0.007,143,0.007,178,1.869,195,2.077,217,0.809,229,2.096,237,3.806,238,1.971,244,2.194,321,1.243,489,1.352,493,2.712,559,3.845,827,1.776,931,2.635,1071,1.664,1130,1.983,1204,3.806,1665,3.266,1667,3.135,1668,2.732,1669,2.635,1671,2.732,1672,3.904,1674,2.732,1677,3.979,1679,4.173,1680,3.526,1681,3.719,1700,4.282,1711,3.991,1759,4.216,1762,5.645,1765,6.215,1780,2.847,1781,3.042,1783,3.042,1784,5.645,1785,6.208,1786,4.113,1787,5.7]],["title/classes/SetNewPlansFields1692822538207.html",[113,0.139,1788,3.426]],["body/classes/SetNewPlansFields1692822538207.html",[3,0.125,4,0.114,5,0.102,19,0.387,20,1.21,30,0.01,36,0.689,38,1.178,40,0.638,46,1.21,47,0.942,48,0.641,49,0.943,54,3.503,75,2.349,95,0.149,102,2.371,112,0.125,113,0.143,142,0.007,143,0.007,178,1.911,195,2.141,217,0.869,229,2.037,237,4.228,244,2.262,321,1.337,489,1.421,493,2.712,559,3.256,931,2.77,1071,1.79,1130,1.539,1204,3.924,1665,3.628,1667,3.256,1668,2.871,1669,2.77,1671,2.871,1672,3.965,1674,2.871,1677,3.867,1679,3.37,1680,2.736,1681,2.886,1700,4.161,1711,3.786,1737,5.386,1759,4.431,1762,5.82,1765,5.803,1780,3.061,1781,3.271,1783,3.271,1788,5.82,1789,6.401,1790,4.423]],["title/classes/SetNewPlansFields1692824385127.html",[113,0.139,1791,3.426]],["body/classes/SetNewPlansFields1692824385127.html",[3,0.137,4,0.124,5,0.112,19,0.423,20,1.284,28,1.838,30,0.01,36,0.72,38,1.25,40,0.697,46,1.284,47,0.97,48,0.67,49,1.001,64,3.576,95,0.163,102,2.432,112,0.137,113,0.157,142,0.007,143,0.007,178,1.96,195,2.219,217,0.95,229,1.838,244,2.344,297,2.605,321,1.461,331,2.719,489,1.508,493,1.634,559,3.047,931,2.939,1071,1.956,1130,1.682,1204,4.066,1665,3.489,1667,3.405,1668,3.047,1669,2.939,1671,3.047,1672,4.036,1674,3.047,1677,3.489,1679,2.719,1683,3.932,1700,3.754,1702,3.154,1703,3.154,1711,3.163,1759,5.254,1765,5.582,1768,4.249,1774,5.588,1780,3.345,1781,3.575,1783,3.575,1791,6.031,1792,6.633,1793,4.834]],["title/entities/Site.html",[485,1.26,492,1.982]],["body/entities/Site.html",[3,0.112,4,0.102,5,0.092,12,1.833,19,0.346,29,2.046,30,0.011,36,0.829,40,1.094,47,0.793,48,0.808,61,1.677,75,2.513,79,3.386,95,0.234,112,0.112,113,0.128,142,0.006,143,0.006,217,0.778,240,2.902,485,1.631,486,3.87,487,1.708,489,1.316,492,2.565,493,2.472,504,3.188,507,3.162,509,2.963,595,3.593,643,4.877,745,4.017,747,2.738,798,3.605,827,2.998,893,5.551,1126,3.964,1127,3.907,1128,3.478,1130,2.416,1131,5.137,1136,4.434,1180,5.121,1200,3.478,1202,4.877,1203,5.551,1428,6.105,1433,6.105,1437,4.807,1450,3.478,1689,4.104,1691,5.121,1794,3.478,1795,3.957,1796,6.946,1797,3.957,1798,3.957,1799,3.957,1800,3.957,1801,6.946,1802,3.957,1803,5.548,1804,3.957,1805,5.548,1806,3.957,1807,3.957,1808,3.957,1809,3.957]],["title/controllers/SitesController.html",[0,1.101,1810,3.17]],["body/controllers/SitesController.html",[0,0.72,2,0.802,3,0.079,4,0.072,5,0.065,9,1.252,12,1.5,19,0.245,20,0.87,21,2.72,22,2.536,28,2.739,29,1.802,30,0.011,36,0.73,38,1.549,39,1.577,40,1.065,41,2.241,43,2.584,46,1.409,47,0.864,48,0.658,49,1.098,61,2.025,69,1.94,71,1.171,80,2.32,90,1.577,94,3.043,95,0.225,96,1.859,98,3.098,99,0.454,102,0.847,103,1.099,104,1.066,105,1.134,106,4.155,108,1.395,109,1.034,112,0.079,113,0.091,114,1.21,115,0.847,116,4.352,119,4.052,121,1.9,133,1.94,136,2.074,137,1.94,140,2.074,142,0.005,143,0.005,178,1.277,193,2.241,195,2.172,229,0.683,240,1.171,297,3.76,339,1.344,340,1.344,341,2.064,342,1.651,458,1.296,492,3.985,504,1.395,518,3.878,521,2.074,522,2.331,524,4.563,527,2.074,528,4.352,529,2.074,530,3.421,538,3.947,548,3.185,558,1.94,565,2.241,566,2.074,595,2.228,609,2.074,635,2.228,842,4.699,1297,5.83,1472,3.785,1476,2.464,1495,2.464,1625,3.185,1630,2.074,1634,2.241,1636,2.241,1639,1.829,1641,1.829,1644,1.94,1649,2.464,1810,3.185,1811,2.464,1812,4.306,1813,4.306,1814,2.464,1815,2.804,1816,5.171,1817,3.785,1818,2.804,1819,2.804,1820,2.804,1821,2.804,1822,2.804,1823,2.804,1824,2.804,1825,2.804,1826,2.804,1827,2.804,1828,5.218,1829,2.804,1830,2.804,1831,3.785,1832,3.421,1833,2.464,1834,3.442,1835,2.804,1836,2.804,1837,2.464,1838,2.804,1839,2.804,1840,2.804,1841,2.804,1842,2.804,1843,2.804,1844,2.804,1845,2.804,1846,2.804,1847,2.804]],["title/modules/SitesModule.html",[42,0.964,379,2.966]],["body/modules/SitesModule.html",[2,2.037,3,0.164,4,0.149,5,0.134,11,2.068,30,0.01,42,1.735,95,0.278,99,0.935,112,0.164,113,0.187,142,0.008,143,0.008,145,2.492,146,2.669,147,2.669,148,2.492,149,3.568,150,2.578,153,3.291,154,2.578,155,2.669,158,2.986,173,2.669,217,1.135,379,5.833,492,2.669,1810,5.709,1832,5.5,1833,5.074,1848,5.074,1849,5.074,1850,5.772,1851,5.074,1852,5.772,1853,5.074,1854,5.772]],["title/injectables/SitesService.html",[175,1.016,1832,2.797]],["body/injectables/SitesService.html",[3,0.067,4,0.06,5,0.054,12,1.527,19,0.205,20,0.757,21,2.468,22,2.206,28,2.03,30,0.011,32,3.293,36,0.708,38,1.487,39,2.107,43,2.554,46,1.369,47,0.96,48,0.64,49,1.067,61,2.251,75,2.288,77,2.771,80,2.519,90,2.107,94,2.761,95,0.22,98,2.697,99,0.38,112,0.067,113,0.076,115,0.709,116,3.948,121,1.844,142,0.004,143,0.004,175,0.888,176,0.92,178,1.889,182,1.565,184,2.468,195,2.393,214,2.162,215,1.125,217,0.461,219,1.565,226,2.241,227,3.24,229,1.651,241,2.241,242,2.384,243,2.914,244,2.171,245,2.63,247,2.593,343,3.483,344,1.875,345,1.214,353,2.994,448,2.063,492,3.974,504,2.326,522,1.303,524,2.107,525,2.317,532,1.624,535,3.051,538,3.144,587,2.994,596,2.994,610,3.694,611,1.452,617,2.771,627,2.063,630,1.736,631,2.771,635,3.376,819,1.736,842,4.423,1149,2.771,1163,2.771,1236,2.771,1246,2.771,1297,5.168,1407,2.063,1408,2.063,1419,1.875,1625,3.948,1630,2.771,1639,1.531,1641,1.531,1662,3.293,1814,3.293,1816,4.692,1817,3.293,1828,4.959,1831,3.293,1832,2.444,1834,2.994,1837,4.11,1853,2.063,1855,2.063,1856,3.746,1857,2.347,1858,5.338,1859,2.347,1860,3.746,1861,2.347,1862,3.746,1863,3.746,1864,4.676,1865,2.347,1866,2.347,1867,2.347,1868,2.347,1869,3.746,1870,2.347,1871,3.746,1872,2.347,1873,2.347,1874,2.347,1875,2.347,1876,2.347,1877,2.347,1878,2.347,1879,2.347,1880,2.347,1881,3.746,1882,3.746,1883,4.676,1884,4.676,1885,2.347,1886,2.347,1887,2.347,1888,2.347,1889,2.347,1890,2.347,1891,2.347,1892,2.347,1893,2.347,1894,2.347,1895,2.347,1896,2.347,1897,2.347,1898,3.746,1899,2.347]],["title/classes/Template.html",[113,0.139,421,2.651]],["body/classes/Template.html",[3,0.138,4,0.125,5,0.112,12,2.037,19,0.425,29,2.084,30,0.01,36,0.845,40,1.257,47,0.881,48,0.795,95,0.214,112,0.181,113,0.157,142,0.007,143,0.007,321,1.467,421,3.943,489,1.512,731,4.926,906,3.36,1127,4.416,1900,5.5,1901,3.88,1902,7.118,1903,7.118,1904,7.118,1905,7.118,1906,8.81,1907,4.854,1908,4.854,1909,4.854,1910,4.854,1911,4.854,1912,4.854,1913,4.854,1914,4.854,1915,5.603,1916,4.854,1917,5.603,1918,3.88,1919,3.88]],["title/controllers/TemplateManagerController.html",[0,1.101,1920,3.17]],["body/controllers/TemplateManagerController.html",[0,1.392,2,1.55,3,0.154,4,0.139,5,0.126,9,2.419,21,2.505,30,0.011,40,0.987,43,2.067,95,0.23,96,3.507,97,3.535,98,2.505,99,0.877,112,0.154,113,0.175,114,2.339,115,1.637,121,2.079,137,3.749,140,4.007,142,0.008,143,0.008,178,1.919,229,1.919,421,4.232,422,3.749,458,2.505,558,3.749,1644,3.749,1900,3.535,1920,5.06,1921,4.761,1922,6.842,1923,4.893,1924,4.761,1925,5.417,1926,5.417,1927,5.417,1928,5.417,1929,5.417,1930,5.417,1931,5.417,1932,5.417]],["title/modules/TemplateManagerModule.html",[42,0.964,420,2.966]],["body/modules/TemplateManagerModule.html",[2,2.012,3,0.16,4,0.146,5,0.131,11,2.027,30,0.01,42,1.72,47,0.7,95,0.277,99,0.916,112,0.16,113,0.183,142,0.008,143,0.008,145,2.443,146,2.616,147,2.616,148,2.443,149,3.537,150,2.527,153,3.251,154,2.527,155,2.616,173,2.616,420,5.805,421,5.09,422,3.916,905,4.973,906,3.916,1900,3.692,1915,4.973,1920,5.658,1923,5.473,1924,4.973,1933,4.973,1934,4.973,1935,5.658,1936,5.658,1937,4.973,1938,5.658]],["title/injectables/TemplateManagerService.html",[175,1.016,1923,2.797]],["body/injectables/TemplateManagerService.html",[3,0.123,4,0.112,5,0.101,21,2.006,30,0.011,39,2.441,40,0.853,47,0.537,90,2.441,95,0.243,99,0.703,112,0.123,113,0.141,121,1.907,142,0.007,143,0.007,175,1.402,176,1.701,178,1.76,195,2.124,214,2.006,219,1.813,226,3.463,227,3.259,229,1.76,241,3.463,242,3.226,243,3.376,244,2.424,245,3.327,421,4.938,422,3.003,635,3.059,906,3.003,1344,3.468,1900,2.831,1918,3.468,1919,3.468,1923,3.859,1937,3.814,1939,3.814,1940,4.339,1941,5.914,1942,4.339,1943,4.339,1944,4.339,1945,7.56,1946,4.339,1947,4.339,1948,6.728,1949,4.339,1950,4.339,1951,4.339,1952,5.914,1953,4.339,1954,5.914,1955,4.339,1956,5.914]],["title/injectables/TwoFactorAuthenticationMailService.html",[175,1.016,1092,2.966]],["body/injectables/TwoFactorAuthenticationMailService.html",[3,0.108,4,0.098,5,0.088,19,0.334,20,1.093,30,0.011,36,0.637,38,1.064,40,1.222,46,1.269,47,0.778,48,0.593,49,0.989,95,0.265,99,0.618,112,0.108,113,0.124,115,1.635,121,1.008,142,0.006,143,0.006,159,1.368,175,1.283,176,1.497,178,1.825,182,2.26,184,3.161,214,1.765,215,1.83,217,0.751,219,2.26,226,2.593,227,2.26,229,1.318,241,2.593,242,2.806,243,2.416,244,1.186,288,2.824,290,1.83,345,1.975,430,2.491,432,2.642,433,2.642,570,3.386,571,2.362,606,2.362,667,3.053,668,3.701,681,4.709,682,2.362,695,5.7,703,2.491,709,1.975,710,2.642,711,2.642,712,2.642,718,2.491,723,2.824,727,4.002,728,4.002,731,3.745,734,3.051,735,3.356,736,3.051,737,4.002,738,4.324,758,4.648,798,3.044,804,2.824,805,3.051,810,3.051,816,3.051,875,5.029,984,4.756,1092,3.745,1101,6.229,1102,5.464,1577,3.356,1578,3.356,1579,3.356,1580,3.051,1581,3.051,1582,3.356,1608,3.356,1957,6.009,1958,3.356,1959,6.285,1960,6.285,1961,3.818,1962,3.818,1963,5.411,1964,3.818,1965,3.818,1966,3.818,1967,3.818,1968,3.051,1969,5.411,1970,4.324,1971,3.818,1972,3.051,1973,3.818,1974,5.411,1975,3.818,1976,5.411,1977,3.818,1978,3.818,1979,3.818,1980,3.818,1981,3.356,1982,3.818,1983,3.818,1984,3.356,1985,3.818,1986,3.818]],["title/classes/UpdatePlanDto.html",[113,0.139,1254,3.17]],["body/classes/UpdatePlanDto.html",[3,0.125,4,0.113,5,0.102,12,1.94,19,0.386,29,2.091,30,0.01,36,0.847,40,1.226,47,0.839,48,0.789,49,1.385,61,2.368,75,2.659,95,0.148,112,0.125,113,0.194,142,0.007,143,0.007,321,1.331,489,1.417,512,3.993,827,2.58,832,5.321,833,5.811,834,6.741,837,2.725,1152,4.195,1153,4.693,1164,3.374,1207,5.96,1208,5.96,1209,5.96,1210,7.045,1212,5.96,1254,4.42,1987,7.413,1988,3.873,1989,4.406,1990,4.406,1991,4.406,1992,4.406,1993,4.406,1994,4.406,1995,4.406,1996,4.406,1997,4.406,1998,4.406]],["title/classes/UpdateRoleDto.html",[113,0.139,1633,2.966]],["body/classes/UpdateRoleDto.html",[3,0.185,4,0.168,5,0.151,30,0.01,95,0.258,109,2.409,112,0.185,113,0.211,142,0.009,143,0.009,321,1.973,323,4.261,522,2.272,839,4.261,841,5.219,1633,5.306,1640,5.219,1999,5.739,2000,4.83,2001,6.53]],["title/classes/UpdateSiteDto.html",[113,0.139,1828,2.966]],["body/classes/UpdateSiteDto.html",[3,0.185,4,0.168,5,0.151,30,0.01,95,0.258,109,2.409,112,0.185,113,0.211,142,0.009,143,0.009,321,1.973,323,4.261,522,2.272,842,4.261,844,5.219,1828,5.306,1834,5.219,2000,4.83,2002,5.739,2003,6.53]],["title/classes/UpdateUserDto.html",[113,0.139,2004,3.17]],["body/classes/UpdateUserDto.html",[3,0.174,4,0.158,5,0.142,30,0.01,47,0.761,54,3.302,95,0.249,109,2.267,112,0.21,113,0.239,142,0.009,143,0.009,321,1.857,323,4.825,522,2.138,650,4.91,667,3.302,679,3.311,872,3.801,874,4.544,875,4.009,877,5.469,2000,4.544,2004,5.469,2005,4.91,2006,6.499,2007,4.009,2008,5.4,2009,5.4,2010,4.009,2011,5.4]],["title/classes/UpdateUserPasswordDto.html",[113,0.139,2010,2.797]],["body/classes/UpdateUserPasswordDto.html",[3,0.174,4,0.158,5,0.142,30,0.01,47,0.761,54,3.302,95,0.249,109,2.267,112,0.21,113,0.239,142,0.009,143,0.009,321,1.857,323,4.825,522,2.138,650,4.91,667,3.302,679,3.311,872,3.801,874,4.544,875,4.009,877,5.469,2000,4.544,2004,4.544,2005,4.91,2006,6.499,2007,4.009,2008,5.4,2009,5.4,2010,4.825,2011,5.4]],["title/entities/UserAdminEntity.html",[485,1.26,709,2.217]],["body/entities/UserAdminEntity.html",[3,0.126,4,0.114,5,0.103,19,0.388,29,2.093,30,0.011,36,0.848,40,1.227,43,2.055,48,0.789,49,1.236,54,3.037,61,1.813,75,2.667,95,0.149,112,0.126,113,0.144,142,0.007,143,0.007,217,0.871,238,2.875,240,3.28,485,1.764,487,1.913,489,1.423,493,2.894,509,3.144,667,3.037,679,3.665,709,3.103,827,2.59,875,4.438,876,5.978,877,5.03,1127,4.1,1130,2.366,1131,5.391,1170,4.437,1183,4.795,1437,3.067,1440,5.435,2012,3.895,2013,5.978,2014,5.978,2015,4.432,2016,4.432,2017,4.432,2018,4.432,2019,4.432,2020,4.432,2021,4.432,2022,4.432,2023,4.432,2024,4.432,2025,4.432]],["title/controllers/UserProfileController.html",[0,1.101,2026,3.17]],["body/controllers/UserProfileController.html",[0,1.382,2,1.539,3,0.152,4,0.138,5,0.125,9,2.402,19,0.471,20,1.376,28,2.842,29,1.345,30,0.01,36,0.545,38,1.057,40,1.078,43,2.058,46,1.086,47,0.666,48,0.508,49,0.847,71,2.247,90,3.026,95,0.273,96,2.941,98,2.487,99,0.871,102,1.625,103,2.109,104,2.045,105,2.176,108,2.676,109,1.985,112,0.152,113,0.174,114,2.322,115,1.625,121,1.419,142,0.008,143,0.008,297,2.898,339,2.578,340,2.578,341,3.264,342,3.168,458,2.487,578,3.979,1634,5.444,1636,4.299,1641,3.51,2007,3.51,2010,5.553,2026,5.038,2027,4.728,2028,6.811,2029,5.379,2030,4.877,2031,5.379,2032,4.728,2033,5.379,2034,5.379]],["title/injectables/UserProfileService.html",[175,1.016,2030,2.797]],["body/injectables/UserProfileService.html",[3,0.148,4,0.134,5,0.121,19,0.457,20,1.35,30,0.011,36,0.677,38,1.026,43,2.348,46,1.35,47,0.827,48,0.63,49,1.052,61,2.227,95,0.27,99,0.845,112,0.148,113,0.169,121,1.377,142,0.008,143,0.008,159,1.87,175,1.585,176,2.047,178,1.795,182,2.792,184,3.593,214,2.413,215,2.502,217,1.026,219,2.181,227,2.181,229,1.271,243,2.331,244,1.621,635,2.7,682,3.229,709,2.7,718,3.406,719,3.6,1641,3.406,2007,3.406,2010,5.451,2030,4.36,2035,4.588,2036,7.37,2037,4.588,2038,5.22,2039,5.873,2040,5.22,2041,5.22,2042,4.172,2043,5.22,2044,5.22,2045,5.22,2046,5.22,2047,5.22]],["title/entities/UserType.html",[485,1.26,1164,2.132]],["body/entities/UserType.html",[3,0.17,4,0.154,5,0.139,12,2.246,19,0.525,29,1.823,30,0.01,36,0.739,40,1.051,43,2.372,47,0.743,48,0.688,61,2.202,95,0.202,112,0.17,113,0.194,142,0.008,143,0.008,217,1.179,485,2.143,487,2.59,489,1.728,493,2.464,509,3.63,1130,2.087,1164,3.626,1225,5.391,1440,4.795,2048,5.273,2049,5.999,2050,5.999,2051,5.999]],["title/classes/UserTypeDto.html",[113,0.139,2052,3.17]],["body/classes/UserTypeDto.html",[3,0.175,4,0.159,5,0.143,12,2.272,19,0.539,29,1.541,30,0.01,36,0.625,40,1.068,48,0.581,95,0.249,112,0.175,113,0.24,142,0.009,143,0.009,217,1.211,321,1.862,489,1.756,493,2.503,832,4.832,837,3.811,866,5.919,1130,2.143,1225,5.478,2052,5.478,2053,5.415,2054,6.161,2055,6.161]],["title/controllers/UsersController.html",[0,1.101,2056,3.17]],["body/controllers/UsersController.html",[0,1.395,2,1.554,3,0.154,4,0.14,5,0.126,9,2.425,19,0.475,20,1.384,29,1.358,30,0.01,36,0.55,38,1.067,46,1.097,47,0.672,48,0.512,49,0.855,71,2.269,95,0.274,96,2.344,99,0.879,102,1.641,103,2.129,104,2.065,105,2.197,106,3.855,108,2.702,109,2.004,112,0.154,113,0.176,114,2.344,115,1.641,119,3.055,121,1.433,142,0.008,143,0.008,339,2.602,340,2.602,341,3.284,342,3.198,458,2.511,522,2.743,719,3.692,872,4.877,980,4.34,1639,3.543,1644,3.758,1669,2.511,2007,3.543,2032,4.773,2056,5.068,2057,4.773,2058,4.773,2059,6.852,2060,5.43,2061,5.43,2062,6.023,2063,4.898,2064,4.773,2065,5.43,2066,5.43]],["title/modules/UsersModule.html",[42,0.964,380,2.966]],["body/modules/UsersModule.html",[2,1.981,3,0.157,4,0.142,5,0.128,11,1.978,30,0.01,42,1.701,95,0.285,99,0.894,112,0.157,113,0.179,142,0.008,143,0.008,145,2.384,146,2.553,147,2.553,148,2.384,149,3.498,150,2.466,153,3.201,154,2.466,155,2.553,158,2.856,173,2.553,380,5.92,709,2.856,1120,4.853,1851,4.853,2026,5.596,2030,5.439,2042,4.413,2056,5.596,2063,5.439,2064,4.853,2067,4.853,2068,4.853,2069,5.522,2070,5.522,2071,5.522,2072,5.522]],["title/injectables/UsersService.html",[175,1.016,2063,2.797]],["body/injectables/UsersService.html",[3,0.128,4,0.116,5,0.104,19,0.395,20,1.226,30,0.011,36,0.615,38,0.887,46,1.226,47,0.751,48,0.573,49,0.956,95,0.266,99,0.73,112,0.128,113,0.146,115,1.363,121,1.19,142,0.007,143,0.007,159,1.616,175,1.44,176,1.769,178,1.671,182,2.536,184,3.394,215,2.162,217,0.887,219,1.884,227,3.067,229,1.479,243,2.014,244,1.886,290,3.289,292,2.656,438,3.961,477,4.13,479,3.604,522,2.112,568,3.121,570,3.698,571,2.79,667,2.014,679,3.271,682,2.79,709,2.333,718,2.943,730,3.336,779,6.452,780,3.964,782,3.964,785,3.964,848,4.852,872,4.541,1127,2.537,1344,3.604,1345,3.604,1384,3.964,1390,3.964,1409,3.964,1411,5.336,1412,6.032,1528,3.964,1549,3.964,1639,2.943,2007,2.943,2013,3.964,2014,3.964,2037,3.964,2039,5.336,2042,3.604,2058,5.336,2062,5.336,2063,3.961,2073,3.964,2074,4.51,2075,4.51,2076,4.51,2077,3.604,2078,3.604,2079,4.51,2080,6.071,2081,4.51,2082,4.51,2083,4.51,2084,4.51,2085,6.071,2086,4.51,2087,4.51,2088,4.51,2089,4.51,2090,6.862,2091,4.51,2092,4.51,2093,4.51,2094,4.51,2095,4.51]],["title/controllers/UsertypeController.html",[0,1.101,2096,3.17]],["body/controllers/UsertypeController.html",[0,1.408,2,1.568,3,0.155,4,0.141,5,0.127,9,2.448,19,0.48,20,1.392,29,1.724,30,0.01,36,0.699,38,1.355,46,1.107,47,0.679,48,0.517,49,0.863,71,2.29,95,0.266,96,2.367,99,0.888,102,1.657,103,2.15,104,2.085,105,2.218,112,0.155,113,0.178,114,2.367,115,1.657,121,1.819,142,0.008,143,0.008,339,2.627,340,2.627,341,3.304,458,3.486,522,2.398,1164,3.751,1644,3.794,2052,5.852,2096,5.099,2097,4.818,2098,6.954,2099,4.818,2100,5.482,2101,5.482,2102,4.92,2103,4.818,2104,5.482,2105,5.482,2106,5.482,2107,5.482]],["title/modules/UsertypeModule.html",[42,0.964,381,2.966]],["body/modules/UsertypeModule.html",[2,2.043,3,0.164,4,0.149,5,0.134,11,2.078,30,0.01,42,1.739,95,0.279,99,0.94,112,0.164,113,0.188,142,0.008,143,0.008,145,2.505,146,2.682,147,2.682,148,2.505,149,3.576,150,2.591,153,3.301,154,2.591,155,2.682,158,3.001,159,2.078,173,2.682,381,5.84,1164,2.886,2096,5.722,2102,5.506,2103,5.099,2108,5.099,2109,5.099,2110,5.802,2111,5.802,2112,5.099,2113,5.802]],["title/injectables/UsertypeService.html",[175,1.016,2102,2.797]],["body/injectables/UsertypeService.html",[3,0.145,4,0.132,5,0.119,19,0.449,20,1.334,30,0.011,36,0.741,38,1.298,46,1.334,47,0.818,48,0.623,49,1.04,95,0.26,99,0.83,112,0.145,113,0.166,115,1.549,121,1.743,142,0.008,143,0.008,159,1.836,175,1.566,176,2.01,178,1.992,182,2.142,184,3.568,195,2.269,214,2.37,215,2.457,217,1.008,219,2.142,226,3.166,227,2.142,229,1.609,241,3.166,242,2.949,243,2.949,244,2.052,245,3.716,522,2.298,1164,3.84,2098,6.784,2099,5.805,2102,4.31,2112,4.506,2114,4.506,2115,5.126,2116,5.126,2117,6.605,2118,5.126,2119,5.126,2120,5.126,2121,5.126,2122,5.126,2123,5.126]],["title/changelog.html",[2124,3.14,2125,3.14,2126,3.14]],["body/changelog.html",[5,0.145,30,0.009,36,0.637,104,2.388,142,0.009,143,0.009,1331,5.519,2126,6.584,2127,6.279,2128,6.279,2129,6.584,2130,6.279,2131,6.279,2132,6.279,2133,6.279,2134,6.279,2135,6.279,2136,6.279,2137,6.279,2138,7.491,2139,6.279,2140,6.279,2141,8.006,2142,6.279,2143,6.279,2144,6.279,2145,6.279,2146,6.279,2147,6.279,2148,6.279,2149,6.279,2150,6.279,2151,5.519,2152,6.279,2153,6.279,2154,6.279]],["title/coverage.html",[2155,4.687]],["body/coverage.html",[0,2.029,1,1.806,5,0.057,6,2.86,7,2.676,8,2.146,30,0.01,42,1.079,48,0.23,54,1.09,63,2.175,79,1.09,100,1.593,113,0.272,142,0.005,143,0.005,148,1.054,160,1.215,162,1.593,163,2.676,165,1.51,166,1.806,168,1.51,169,1.806,170,1.593,172,1.593,175,1.905,177,2.146,244,1.848,276,7.145,320,1.806,322,3.09,337,1.51,342,1.438,349,1.69,388,1.951,415,1.593,421,1.51,422,2.676,452,2.146,455,1.806,456,2.146,459,1.593,469,2.146,485,2.274,486,1.17,488,2.146,492,1.129,515,1.806,516,2.146,522,1.899,549,1.593,586,2.146,595,1.263,664,1.69,665,1.951,666,3.09,672,1.806,673,2.146,674,2.86,675,2.146,683,1.593,684,1.951,690,3.09,700,1.593,704,1.951,705,1.951,706,3.09,707,1.951,709,1.263,745,1.215,752,1.806,753,2.146,754,2.86,755,2.146,763,1.593,770,2.146,771,2.146,820,1.69,821,2.146,839,1.593,840,2.146,841,3.09,842,1.593,843,2.146,844,3.09,872,1.51,873,2.146,874,3.55,923,2.146,924,2.146,947,1.806,948,2.146,988,1.593,1024,2.146,1091,1.593,1092,1.69,1094,1.806,1097,3.322,1101,4.68,1102,1.951,1125,2.146,1137,3.09,1140,2.146,1147,1.51,1148,2.146,1164,1.215,1204,2.942,1205,1.806,1206,1.951,1232,1.806,1233,2.146,1254,1.806,1257,1.593,1292,1.806,1293,2.146,1317,2.146,1425,2.146,1438,2.146,1451,2.146,1453,1.806,1454,2.146,1479,1.593,1504,2.146,1570,2.146,1571,2.146,1572,2.146,1594,2.146,1604,1.951,1613,2.146,1614,2.146,1623,1.806,1624,2.146,1633,1.69,1637,1.593,1655,2.146,1663,1.951,1664,2.146,1665,3.531,1666,3.904,1677,1.129,1713,1.951,1714,2.146,1718,1.951,1719,2.146,1723,1.951,1724,2.146,1728,1.951,1729,2.146,1731,1.951,1732,2.146,1739,1.951,1740,2.146,1747,1.951,1748,2.146,1749,3.09,1750,3.09,1775,1.951,1776,2.146,1778,1.951,1779,2.146,1780,3.778,1784,1.951,1785,2.146,1788,1.951,1789,2.146,1791,1.951,1792,2.146,1794,2.146,1810,1.806,1811,2.146,1828,1.69,1832,1.593,1855,2.146,1900,3.132,1901,1.951,1920,1.806,1921,2.146,1923,1.593,1939,2.146,1957,2.146,1958,2.146,1968,1.951,1970,3.09,1972,1.951,1984,3.398,1987,2.146,1988,2.146,1999,2.146,2002,2.146,2004,1.806,2005,3.09,2010,1.593,2012,2.146,2026,1.806,2027,2.146,2030,1.593,2035,2.146,2048,2.146,2052,1.806,2053,2.146,2056,1.806,2057,2.146,2063,1.593,2073,2.146,2077,1.951,2078,1.951,2096,1.806,2097,2.146,2102,1.593,2114,2.146,2155,1.951,2156,2.442,2157,2.442,2158,2.442,2159,2.442,2160,6.328,2161,6.875,2162,8.536,2163,3.866,2164,2.442,2165,2.442,2166,2.442,2167,2.146,2168,2.146,2169,6.328,2170,2.146,2171,7.969,2172,2.146,2173,3.866,2174,3.866,2175,2.442,2176,2.442,2177,2.146,2178,2.146,2179,2.146,2180,3.398,2181,2.146,2182,2.146,2183,2.146,2184,3.866,2185,2.442,2186,2.442,2187,4.8,2188,3.866,2189,2.442,2190,2.442,2191,2.442,2192,2.442,2193,2.442,2194,2.442,2195,2.146,2196,2.442]],["title/dependencies.html",[145,2.227,2197,3.14]],["body/dependencies.html",[30,0.011,99,0.816,103,1.975,104,2.755,105,2.642,109,1.858,113,0.211,142,0.008,143,0.008,145,2.174,159,1.804,217,0.99,343,3.286,345,3.378,387,3.725,390,4.426,399,4.426,554,3.725,703,3.286,711,3.485,712,3.485,837,3.115,906,3.485,1022,4.025,1050,4.426,1263,4.426,1918,4.025,2198,5.036,2199,6.53,2200,7.246,2201,5.036,2202,5.036,2203,5.036,2204,5.036,2205,5.036,2206,6.53,2207,5.036,2208,6.53,2209,5.036,2210,5.036,2211,5.036,2212,6.53,2213,5.036,2214,5.036,2215,5.036,2216,5.036,2217,5.036,2218,5.036,2219,5.036,2220,5.036,2221,5.036,2222,5.036,2223,5.036,2224,5.036,2225,5.036,2226,5.036,2227,5.036,2228,5.036,2229,5.036,2230,5.036,2231,8.139,2232,5.036,2233,5.036,2234,5.036,2235,5.036,2236,5.036,2237,5.036,2238,5.036,2239,5.036,2240,5.036,2241,5.036,2242,5.036,2243,5.036,2244,5.036,2245,5.036,2246,5.036,2247,5.036,2248,5.036,2249,5.036]],["title/miscellaneous/enumerations.html",[2250,2.104,2251,4.535]],["body/miscellaneous/enumerations.html",[19,0.548,30,0.01,142,0.009,143,0.009,1071,3.476,1164,4.121,1206,5.004,1223,7.281,1224,6.573,1225,5.532,1226,6.573,1227,6.573,1228,5.977,1229,6.573,2250,3.688,2251,5.504,2252,6.262,2253,6.262,2254,6.262]],["title/miscellaneous/functions.html",[2250,2.104,2255,4.535]],["body/miscellaneous/functions.html",[19,0.568,30,0.01,38,1.276,40,1.102,46,1.311,47,0.804,48,0.613,49,1.022,142,0.009,143,0.009,148,3.505,195,1.909,679,3.498,2077,6.107,2078,5.189,2183,5.707,2195,6.716,2250,3.824,2255,5.707,2256,6.493,2257,6.493,2258,6.493]],["title/index.html",[19,0.313,2124,3.14,2125,3.14]],["body/index.html",[4,0.141,12,1.565,30,0.01,103,2.953,142,0.008,143,0.008,184,2.529,407,4.807,441,4.807,1327,4.371,1581,4.371,2129,4.807,2155,4.371,2259,5.469,2260,5.469,2261,6.883,2262,5.469,2263,5.469,2264,5.469,2265,5.469,2266,5.469,2267,5.469,2268,5.469,2269,5.469,2270,8.442,2271,5.469,2272,5.469,2273,5.469,2274,8.316,2275,5.469,2276,6.883,2277,5.469,2278,5.469,2279,5.469,2280,5.469,2281,6.883,2282,6.883,2283,5.469,2284,5.469,2285,5.469,2286,6.883,2287,6.883,2288,5.469,2289,5.469,2290,5.469,2291,5.469,2292,5.469,2293,5.469,2294,5.469,2295,5.469,2296,5.469,2297,5.469,2298,5.469,2299,5.469,2300,5.469,2301,4.807,2302,5.469,2303,5.469,2304,5.469,2305,5.469,2306,5.469,2307,5.469,2308,4.807]],["title/modules.html",[11,2.101]],["body/modules.html",[11,2.047,30,0.008,142,0.008,143,0.008,144,3.955,366,4.227,370,3.955,371,3.955,372,3.729,373,3.955,374,3.955,375,3.955,376,3.955,377,3.955,378,3.955,379,3.955,380,3.955,381,3.955,420,3.955,1327,7.079,2309,8.857,2310,8.857,2311,8.912,2312,7.074,2313,7.074]],["title/overview.html",[2314,5.155]],["body/overview.html",[2,1.089,11,1.363,30,0.01,42,0.856,100,4.093,142,0.006,143,0.006,144,4.988,145,1.643,146,1.759,147,1.759,148,1.643,149,1.759,150,1.699,151,3.345,152,3.345,153,2.496,154,1.699,155,1.759,176,1.492,321,1.15,337,3.88,366,6.552,367,3.345,368,3.345,369,3.345,370,5.445,371,4.988,372,4.454,373,4.341,374,5.329,375,5.862,376,4.988,377,4.988,378,4.988,379,4.988,380,5.329,381,4.988,415,5.024,420,4.724,459,4.093,463,3.345,464,3.345,465,3.345,487,1.643,549,4.093,580,3.345,581,3.345,683,5.024,763,5.024,988,4.093,1016,3.345,1018,3.345,1088,3.345,1089,3.345,1090,3.345,1091,5.024,1092,5.329,1257,4.093,1287,3.345,1288,3.345,1479,4.093,1498,3.345,1499,3.345,1637,4.093,1651,3.345,1652,3.345,1832,4.093,1848,3.345,1849,3.345,1923,4.093,1933,3.345,1934,3.345,2030,4.093,2063,4.093,2067,3.345,2068,3.345,2102,4.093,2108,3.345,2109,3.345,2314,3.345,2315,3.805,2316,3.805,2317,3.805,2318,3.805,2319,3.805]],["title/properties.html",[489,1.223,2197,3.14]],["body/properties.html",[12,1.94,30,0.01,142,0.009,143,0.009,489,1.608,2151,5.96,2301,5.96,2308,5.96,2320,6.781,2321,6.781]],["title/miscellaneous/typealiases.html",[2250,2.104,2322,5.159]],["body/miscellaneous/typealiases.html",[19,0.562,30,0.009,48,0.763,142,0.009,143,0.009,328,6.675,346,6.177,408,6.066,444,5.643,1900,4.189,1901,5.131,1917,5.643,1919,6.066,2250,3.781,2323,6.42,2324,7.59,2325,7.59,2326,6.42,2327,6.42,2328,7.59]],["title/miscellaneous/variables.html",[385,4.123,2250,2.104]],["body/miscellaneous/variables.html",[19,0.216,30,0.01,40,0.961,47,0.483,48,0.368,96,2.372,116,1.827,142,0.005,143,0.005,238,1.87,244,0.768,276,6.654,290,3.309,292,2.298,318,2.172,384,2.172,385,1.975,388,3.119,438,3.156,471,3.43,475,2.172,477,3.366,478,6.068,479,4.392,482,3.904,483,5.815,484,3.43,487,1.067,570,4.338,571,1.528,667,2.454,704,3.119,705,1.975,706,3.866,707,1.975,714,3.43,724,3.43,729,4.252,730,5.256,734,1.975,736,1.975,737,4.426,786,2.172,798,3.091,799,3.43,804,3.578,805,3.119,808,4.83,810,1.975,811,3.43,812,3.43,813,4.252,814,3.43,816,4.392,875,2.546,914,2.172,917,2.172,1071,2.573,1097,1.71,1101,5.736,1130,2.213,1231,2.172,1580,4.392,1604,3.119,1609,3.43,1689,3.578,1968,3.119,1970,3.119,1972,3.119,1981,3.43,2167,2.172,2168,3.43,2170,3.43,2172,2.172,2177,3.43,2178,2.172,2179,3.43,2180,3.43,2181,3.43,2182,3.43,2250,1.455,2329,2.471,2330,2.471,2331,2.471,2332,2.471,2333,3.903,2334,2.471,2335,2.471,2336,2.471,2337,2.471,2338,3.903,2339,2.471,2340,2.471,2341,7.549,2342,5.495,2343,5.495,2344,5.495,2345,5.495,2346,5.495,2347,5.495,2348,6.904,2349,8.107,2350,5.495,2351,7.918,2352,6.904,2353,5.495,2354,5.495,2355,5.495,2356,5.495,2357,5.495,2358,5.495,2359,6.904,2360,5.495,2361,5.495,2362,5.495,2363,6.904,2364,5.495,2365,5.495,2366,5.495,2367,5.495,2368,5.495,2369,5.495,2370,6.904,2371,5.495,2372,5.495,2373,6.904,2374,5.495,2375,5.495,2376,5.495,2377,5.495,2378,4.837,2379,4.837,2380,4.837,2381,5.495,2382,3.903,2383,2.471,2384,2.471,2385,2.471,2386,5.495,2387,2.471,2388,2.471,2389,2.471,2390,2.471,2391,2.471,2392,2.471,2393,3.903,2394,2.471,2395,3.903,2396,2.471,2397,6.904,2398,4.837,2399,2.471,2400,2.471,2401,2.471,2402,2.471,2403,2.471,2404,2.471,2405,3.903,2406,2.471,2407,2.471,2408,2.471,2409,2.471,2410,2.471,2411,2.471,2412,2.471,2413,2.471,2414,2.471,2415,2.471,2416,2.471,2417,2.471]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":276,"title":{},"body":{"injectables/AccessModulesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":2137,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":2151,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.1",{"_index":2368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":2245,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":2220,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":2249,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2219,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2232,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2162,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2185,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2161,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2160,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2171,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2190,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2187,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2188,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2189,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2184,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":2153,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2139,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":2152,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":611,"title":{},"body":{"injectables/CategoryService.html":{},"entities/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"classes/SetDb1691181176026.html":{},"injectables/SitesService.html":{}}}],["1.0.0",{"_index":2240,"title":{},"body":{"dependencies.html":{}}}],["1.4",{"_index":2347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.0",{"_index":2215,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":2198,"title":{},"body":{"dependencies.html":{}}}],["1.9.2",{"_index":2227,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":271,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/PlansController.html":{}}}],["10.0.0",{"_index":2203,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":2202,"title":{},"body":{"dependencies.html":{}}}],["10.2.6",{"_index":2228,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1451,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["100})@apiproperty({description",{"_index":1442,"title":{},"body":{"entities/Product.html":{}}}],["10px",{"_index":2377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1234",{"_index":890,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["14",{"_index":2317,"title":{},"body":{"overview.html":{}}}],["15",{"_index":2315,"title":{},"body":{"overview.html":{}}}],["16",{"_index":2316,"title":{},"body":{"overview.html":{}}}],["16.3.1",{"_index":2222,"title":{},"body":{"dependencies.html":{}}}],["16px",{"_index":2375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17",{"_index":2140,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":2318,"title":{},"body":{"overview.html":{}}}],["1h",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["2.0.0",{"_index":2235,"title":{},"body":{"dependencies.html":{}}}],["2.1.11",{"_index":2213,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":2201,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":2238,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":896,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["20)@apiproperty({description",{"_index":889,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["200",{"_index":34,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["201",{"_index":1461,"title":{},"body":{"controllers/ProductController.html":{}}}],["2023",{"_index":2138,"title":{},"body":{"changelog.html":{}}}],["204",{"_index":1080,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["20px",{"_index":2359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21.1.2",{"_index":2225,"title":{},"body":{"dependencies.html":{}}}],["24px",{"_index":2371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255",{"_index":1433,"title":{},"body":{"entities/Product.html":{},"entities/Site.html":{}}}],["27",{"_index":2319,"title":{},"body":{"overview.html":{}}}],["2px",{"_index":2366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.0",{"_index":2199,"title":{},"body":{"dependencies.html":{}}}],["333",{"_index":2372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":2236,"title":{},"body":{"dependencies.html":{}}}],["4.6.3",{"_index":2248,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":2224,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":2164,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":2166,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":1084,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["40px",{"_index":2358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["46",{"_index":2158,"title":{},"body":{"coverage.html":{}}}],["5.1.0",{"_index":2217,"title":{},"body":{"dependencies.html":{}}}],["5/10",{"_index":2194,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":2192,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2193,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":2191,"title":{},"body":{"coverage.html":{}}}],["555",{"_index":2376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["587",{"_index":1114,"title":{},"body":{"modules/MailModule.html":{}}}],["6",{"_index":726,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{}}}],["6.3.0",{"_index":2207,"title":{},"body":{"dependencies.html":{}}}],["6.9.3",{"_index":2230,"title":{},"body":{"dependencies.html":{}}}],["6/13",{"_index":2159,"title":{},"body":{"coverage.html":{}}}],["600px",{"_index":2356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["61",{"_index":2175,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":2165,"title":{},"body":{"coverage.html":{}}}],["6px",{"_index":2363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":2246,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":2226,"title":{},"body":{"dependencies.html":{}}}],["7.7.0",{"_index":2210,"title":{},"body":{"dependencies.html":{}}}],["8.11.1",{"_index":2242,"title":{},"body":{"dependencies.html":{}}}],["8/10",{"_index":2186,"title":{},"body":{"coverage.html":{}}}],["8/13",{"_index":2176,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":2174,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2163,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":2173,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":2200,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":2208,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":2204,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":2157,"title":{},"body":{"coverage.html":{}}}],["900000",{"_index":792,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["__dirname",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["_args",{"_index":329,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["a.id",{"_index":258,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["acceptlanguageresolver",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["access",{"_index":10,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"injectables/KeycloakService.html":{}}}],["accessmodule",{"_index":225,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["accessmodules",{"_index":224,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["accessmodulescontroller",{"_index":1,"title":{"controllers/AccessModulesController.html":{}},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"coverage.html":{}}}],["accessmodulesmodule",{"_index":144,"title":{"modules/AccessModulesModule.html":{}},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["accessmodulesservice",{"_index":100,"title":{"injectables/AccessModulesService.html":{}},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"coverage.html":{},"overview.html":{}}}],["accessors",{"_index":324,"title":{},"body":{"classes/ApiException.html":{}}}],["action",{"_index":64,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["actionrelationid",{"_index":85,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["actionrelationidasnumber",{"_index":306,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["actions",{"_index":170,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["actions.entity",{"_index":167,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/PaywallModuleActionRelation.html":{}}}],["actions.entity.ts",{"_index":1137,"title":{},"body":{"entities/PaywallModuleAction.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["actions.entity.ts:11",{"_index":1622,"title":{},"body":{"entities/RolePaywallModuleActionRelation.html":{}}}],["actions.entity.ts:14",{"_index":1620,"title":{},"body":{"entities/RolePaywallModuleActionRelation.html":{}}}],["actions.entity.ts:17",{"_index":1621,"title":{},"body":{"entities/RolePaywallModuleActionRelation.html":{}}}],["actions.entity.ts:6",{"_index":1139,"title":{},"body":{"entities/PaywallModuleAction.html":{}}}],["actions.entity.ts:8",{"_index":1619,"title":{},"body":{"entities/RolePaywallModuleActionRelation.html":{}}}],["actions.entity.ts:9",{"_index":1138,"title":{},"body":{"entities/PaywallModuleAction.html":{}}}],["active",{"_index":82,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["activo",{"_index":854,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["actual",{"_index":2089,"title":{},"body":{"injectables/UsersService.html":{}}}],["actualizado",{"_index":1399,"title":{},"body":{"injectables/PlansService.html":{}}}],["actualizar",{"_index":794,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/PlansService.html":{}}}],["add",{"_index":559,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["added",{"_index":2141,"title":{},"body":{"changelog.html":{}}}],["adds",{"_index":1661,"title":{},"body":{"injectables/RolesService.html":{}}}],["addselect(['product.idproduct",{"_index":624,"title":{},"body":{"injectables/CategoryService.html":{}}}],["adheres",{"_index":2133,"title":{},"body":{"changelog.html":{}}}],["adicional",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["agregar",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{}}}],["ahora",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["al",{"_index":317,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["aliases",{"_index":2323,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":1344,"title":{},"body":{"injectables/PlansService.html":{},"injectables/TemplateManagerService.html":{},"injectables/UsersService.html":{}}}],["alter",{"_index":1737,"title":{},"body":{"classes/SetDb1691515083659.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692822538207.html":{}}}],["amazing",{"_index":2292,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1294,"title":{},"body":{"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{}}}],["andwhere('a.paywallmoduleactionrelationid",{"_index":315,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["andwhere('a.paywallmoduleid",{"_index":314,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["andwhere('paywallmoduleactionrelationid",{"_index":298,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["andwhere('paywallmoduleid",{"_index":282,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["andwhere('product.idproduct",{"_index":1547,"title":{},"body":{"injectables/ProductService.html":{}}}],["andwhere('product.isactive",{"_index":1542,"title":{},"body":{"injectables/ProductService.html":{}}}],["andwhere('product.site.idsite",{"_index":1548,"title":{},"body":{"injectables/ProductService.html":{}}}],["andwhere('site.idsite",{"_index":1541,"title":{},"body":{"injectables/ProductService.html":{}}}],["anonimo",{"_index":1224,"title":{},"body":{"classes/PlanDto.html":{},"miscellaneous/enumerations.html":{}}}],["anónimo",{"_index":1225,"title":{},"body":{"classes/PlanDto.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":552,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiexception",{"_index":320,"title":{"classes/ApiException.html":{}},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"coverage.html":{}}}],["apioperation",{"_index":106,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":553,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiproperty",{"_index":838,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"entities/Product.html":{}}}],["apiquery",{"_index":551,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiresponse",{"_index":107,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/ProductController.html":{}}}],["apitags",{"_index":108,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{}}}],["apitags('access",{"_index":111,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["apitags('auth",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('categories",{"_index":556,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('keycloak",{"_index":991,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["apitags('main",{"_index":348,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["apitags('plans",{"_index":1265,"title":{},"body":{"controllers/PlansController.html":{}}}],["apitags('products",{"_index":1484,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('roles",{"_index":1642,"title":{},"body":{"controllers/RolesController.html":{}}}],["apitags('sites",{"_index":1835,"title":{},"body":{"controllers/SitesController.html":{}}}],["apitags('users",{"_index":2032,"title":{},"body":{"controllers/UserProfileController.html":{},"controllers/UsersController.html":{}}}],["aplicación",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":2272,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":338,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":349,"title":{"controllers/AppController.html":{}},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appdatasource",{"_index":2170,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application/json",{"_index":1068,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["application/x",{"_index":1059,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["applications",{"_index":2267,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":366,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":337,"title":{"injectables/AppService.html":{}},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aqu",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"classes/PlanDto.html":{}}}],["aqui",{"_index":305,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["args",{"_index":326,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["arial",{"_index":2343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":197,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"controllers/ProductController.html":{}}}],["asociadas",{"_index":1396,"title":{},"body":{"injectables/PlansService.html":{}}}],["asociamos",{"_index":1397,"title":{},"body":{"injectables/PlansService.html":{}}}],["associated",{"_index":594,"title":{},"body":{"injectables/CategoryService.html":{}}}],["async",{"_index":178,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["atentamente",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autenticación",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailModule.html":{}}}],["auth.controller",{"_index":467,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/keycloak",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":455,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1044,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["authenticate/two",{"_index":1102,"title":{},"body":{"modules/MailModule.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{}}}],["authentication",{"_index":984,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["authentication.mail.service",{"_index":1103,"title":{},"body":{"modules/MailModule.html":{}}}],["authentication.mail.service.ts",{"_index":1958,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{}}}],["authentication.mail.service.ts:11",{"_index":1962,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["authentication.mail.service.ts:18",{"_index":1967,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["authentication.mail.service.ts:45",{"_index":1965,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["authentication.template",{"_index":1971,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["authentication.template.ts",{"_index":2181,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication/two",{"_index":1970,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"controllers/PlansController.html":{}}}],["authmodule",{"_index":370,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2301,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":964,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["authserverurl",{"_index":932,"title":{},"body":{"injectables/KeycloakConfigService.html":{},"injectables/KeycloakService.html":{}}}],["authservice",{"_index":459,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":2357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":918,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":2313,"title":{},"body":{"modules.html":{}}}],["await",{"_index":229,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["axios",{"_index":2214,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":252,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["b.\"paywallmoduleactionid",{"_index":259,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["b.\"paywallmoduleid",{"_index":262,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["backers",{"_index":2293,"title":{},"body":{"index.html":{}}}],["background",{"_index":2348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":2076,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('username",{"_index":2083,"title":{},"body":{"injectables/UsersService.html":{}}}],["bandeja",{"_index":1978,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["base",{"_index":1411,"title":{},"body":{"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":1331,"title":{},"body":{"injectables/PlansService.html":{},"changelog.html":{}}}],["bcrypt",{"_index":2216,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":2237,"title":{},"body":{"dependencies.html":{}}}],["bienvenido",{"_index":806,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["body",{"_index":96,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{},"miscellaneous/variables.html":{}}}],["body('domine",{"_index":767,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"controllers/ResetPasswordMailController.html":{}}}],["body('email",{"_index":766,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["body('isactive",{"_index":1285,"title":{},"body":{"controllers/PlansController.html":{}}}],["boolean",{"_index":827,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/RolePaywallModule.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"entities/Site.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{}}}],["bootstrap",{"_index":148,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["border",{"_index":2361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottom",{"_index":2373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["box",{"_index":2364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":2311,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2309,"title":{},"body":{"modules.html":{}}}],["building",{"_index":2262,"title":{},"body":{"index.html":{}}}],["buscar",{"_index":1539,"title":{},"body":{"injectables/ProductService.html":{}}}],["búsqueda",{"_index":1554,"title":{},"body":{"injectables/ProductService.html":{}}}],["c",{"_index":251,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["c.id",{"_index":261,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["cambiar",{"_index":714,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"miscellaneous/variables.html":{}}}],["cambio",{"_index":729,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"miscellaneous/variables.html":{}}}],["cambios",{"_index":1391,"title":{},"body":{"injectables/PlansService.html":{}}}],["campo",{"_index":846,"title":{},"body":{"classes/CreateSiteDto.html":{},"injectables/PlansService.html":{}}}],["campos",{"_index":1383,"title":{},"body":{"injectables/PlansService.html":{}}}],["catch",{"_index":241,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UsertypeService.html":{}}}],["categories",{"_index":512,"title":{},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{},"classes/UpdatePlanDto.html":{}}}],["categories.entity",{"_index":747,"title":{},"body":{"modules/CommonModule.html":{},"entities/Plan.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"entities/Site.html":{}}}],["categories.entity.ts",{"_index":1293,"title":{},"body":{"entities/PlansProductCategory.html":{},"coverage.html":{}}}],["categories.entity.ts:10",{"_index":1303,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:14",{"_index":1308,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:18",{"_index":1306,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:21",{"_index":1304,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:24",{"_index":1302,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:27",{"_index":1299,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:30",{"_index":1310,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:33",{"_index":1301,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:36",{"_index":1309,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.entity.ts:39",{"_index":1300,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["categories.map((category",{"_index":640,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorieswithproduct",{"_index":607,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":486,"title":{"entities/Category.html":{}},"body":{"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Site.html":{},"coverage.html":{}}}],["category.controller",{"_index":583,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.description",{"_index":622,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.idcategory",{"_index":620,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.name",{"_index":621,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.product",{"_index":641,"title":{},"body":{"injectables/CategoryService.html":{},"entities/Product.html":{}}}],["category.product)@joincolumn({name",{"_index":1426,"title":{},"body":{"entities/Product.html":{}}}],["category.product.idproduct",{"_index":642,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.rules",{"_index":623,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.service",{"_index":550,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["category.site",{"_index":643,"title":{},"body":{"injectables/CategoryService.html":{},"entities/Site.html":{}}}],["category.site.idsite",{"_index":644,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.site.name",{"_index":646,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category/category.module",{"_index":409,"title":{},"body":{"modules/AppModule.html":{}}}],["category/entity/category.entity",{"_index":1450,"title":{},"body":{"entities/Product.html":{},"entities/Site.html":{}}}],["categorycontroller",{"_index":515,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryid",{"_index":546,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categorymodule",{"_index":371,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryrepository",{"_index":590,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["categoryservice",{"_index":549,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["categorytoupdate",{"_index":647,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorytoupdate.description",{"_index":655,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorytoupdate.name",{"_index":653,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorytoupdate.product",{"_index":659,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorytoupdate.rules",{"_index":657,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoría",{"_index":1398,"title":{},"body":{"injectables/PlansService.html":{}}}],["categorías",{"_index":1395,"title":{},"body":{"injectables/PlansService.html":{}}}],["change",{"_index":706,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["changed",{"_index":2150,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":2126,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changepasswordentity",{"_index":664,"title":{"entities/ChangePasswordEntity.html":{}},"body":{"entities/ChangePasswordEntity.html":{},"injectables/ChangePasswordMailService.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["changepasswordhtml",{"_index":704,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["changepasswordhtml(code",{"_index":732,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["changepasswordmailcontroller",{"_index":672,"title":{"controllers/ChangePasswordMailController.html":{}},"body":{"controllers/ChangePasswordMailController.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["changepasswordmailservice",{"_index":683,"title":{"injectables/ChangePasswordMailService.html":{}},"body":{"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/MailModule.html":{},"coverage.html":{},"overview.html":{}}}],["changepasswordrepository",{"_index":697,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["changes",{"_index":2128,"title":{},"body":{"changelog.html":{}}}],["character",{"_index":1680,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{}}}],["chemma/template.schema",{"_index":1937,"title":{},"body":{"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{}}}],["class",{"_index":113,"title":{"classes/ApiException.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"classes/PlanDto.html":{},"classes/Role.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"classes/Template.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UserTypeDto.html":{}},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":321,"title":{},"body":{"classes/ApiException.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"classes/PlanDto.html":{},"classes/Role.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"classes/Template.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UserTypeDto.html":{},"overview.html":{}}}],["clic",{"_index":812,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["cliente",{"_index":740,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["clientid",{"_index":936,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["clientidnumber",{"_index":1025,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["cluster_accessmodulesmodule",{"_index":151,"title":{},"body":{"modules/AccessModulesModule.html":{},"overview.html":{}}}],["cluster_accessmodulesmodule_providers",{"_index":152,"title":{},"body":{"modules/AccessModulesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":368,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":580,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":581,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_keycloakmodule",{"_index":1016,"title":{},"body":{"modules/KeycloakModule.html":{},"overview.html":{}}}],["cluster_keycloakmodule_imports",{"_index":1017,"title":{},"body":{"modules/KeycloakModule.html":{}}}],["cluster_keycloakmodule_providers",{"_index":1018,"title":{},"body":{"modules/KeycloakModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1088,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1090,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1089,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_plansmodule",{"_index":1287,"title":{},"body":{"modules/PlansModule.html":{},"overview.html":{}}}],["cluster_plansmodule_providers",{"_index":1288,"title":{},"body":{"modules/PlansModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":1498,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_providers",{"_index":1499,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":1651,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":1652,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_sitesmodule",{"_index":1848,"title":{},"body":{"modules/SitesModule.html":{},"overview.html":{}}}],["cluster_sitesmodule_providers",{"_index":1849,"title":{},"body":{"modules/SitesModule.html":{},"overview.html":{}}}],["cluster_templatemanagermodule",{"_index":1933,"title":{},"body":{"modules/TemplateManagerModule.html":{},"overview.html":{}}}],["cluster_templatemanagermodule_providers",{"_index":1934,"title":{},"body":{"modules/TemplateManagerModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2067,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":2068,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usertypemodule",{"_index":2108,"title":{},"body":{"modules/UsertypeModule.html":{},"overview.html":{}}}],["cluster_usertypemodule_providers",{"_index":2109,"title":{},"body":{"modules/UsertypeModule.html":{},"overview.html":{}}}],["code",{"_index":724,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"miscellaneous/variables.html":{}}}],["coinciden",{"_index":1552,"title":{},"body":{"injectables/ProductService.html":{}}}],["colombiano",{"_index":2396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color",{"_index":2349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":493,"title":{},"body":{"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{}}}],["column({default",{"_index":1440,"title":{},"body":{"entities/Product.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{}}}],["column({length",{"_index":1432,"title":{},"body":{"entities/Product.html":{}}}],["column({name",{"_index":1169,"title":{},"body":{"entities/Plan.html":{},"entities/PlansProductCategory.html":{}}}],["column({nullable",{"_index":1183,"title":{},"body":{"entities/Plan.html":{},"entities/RolePaywallModule.html":{},"entities/UserAdminEntity.html":{}}}],["column({type",{"_index":1428,"title":{},"body":{"entities/Product.html":{},"entities/Site.html":{}}}],["column({unique",{"_index":2016,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["common/common.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["common/entity/plans",{"_index":1200,"title":{},"body":{"entities/Plan.html":{},"entities/Site.html":{}}}],["commonmodule",{"_index":372,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules/KeycloakModule.html":{},"modules.html":{},"overview.html":{}}}],["completar",{"_index":2382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":1980,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["con",{"_index":292,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/AuthService.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["condiciones",{"_index":1553,"title":{},"body":{"injectables/ProductService.html":{}}}],["condición",{"_index":1530,"title":{},"body":{"injectables/ProductService.html":{}}}],["config",{"_index":383,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["config.key",{"_index":909,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.service",{"_index":417,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config.service.ts",{"_index":924,"title":{},"body":{"injectables/KeycloakConfigService.html":{},"coverage.html":{}}}],["config.service.ts:7",{"_index":926,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["configmodule",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":904,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/KeycloakService.html":{}}}],["configservice.mongo",{"_index":920,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.postgres",{"_index":913,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configtype",{"_index":898,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["confirmación",{"_index":799,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["confirmada",{"_index":2398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirmado",{"_index":784,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["confirmar",{"_index":815,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["confirmationurl",{"_index":801,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["confirmcreateusercontroller",{"_index":752,"title":{"controllers/ConfirmCreateUserController.html":{}},"body":{"controllers/ConfirmCreateUserController.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["confirmcreateusermail",{"_index":756,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["confirmcreateusermail(email",{"_index":757,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["confirmcreateuserservice",{"_index":763,"title":{"injectables/ConfirmCreateUserService.html":{}},"body":{"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/MailModule.html":{},"coverage.html":{},"overview.html":{}}}],["confirmed.template",{"_index":1973,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["confirmed.template.ts",{"_index":2182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["connect",{"_index":105,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{},"dependencies.html":{}}}],["connect/token",{"_index":1066,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["console.error(error",{"_index":738,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["console.log",{"_index":299,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["console.log('category",{"_index":602,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["console.log('createproductdto",{"_index":1485,"title":{},"body":{"controllers/ProductController.html":{}}}],["console.log('createsitedto",{"_index":1876,"title":{},"body":{"injectables/SitesService.html":{}}}],["console.log('credentials",{"_index":995,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["console.log('data",{"_index":768,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["console.log('email",{"_index":688,"title":{},"body":{"controllers/ChangePasswordMailController.html":{}}}],["console.log('error",{"_index":819,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/PlansService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/SitesService.html":{}}}],["console.log('id",{"_index":1888,"title":{},"body":{"injectables/SitesService.html":{}}}],["console.log('idproduct",{"_index":1544,"title":{},"body":{"injectables/ProductService.html":{}}}],["console.log('ingres",{"_index":316,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["console.log('item",{"_index":1366,"title":{},"body":{"injectables/PlansService.html":{}}}],["console.log('limit",{"_index":1278,"title":{},"body":{"controllers/PlansController.html":{}}}],["console.log('mailmodule",{"_index":1122,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log('newitems",{"_index":1377,"title":{},"body":{"injectables/PlansService.html":{}}}],["console.log('newplan",{"_index":1363,"title":{},"body":{"injectables/PlansService.html":{}}}],["console.log('no",{"_index":287,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["console.log('page",{"_index":1277,"title":{},"body":{"controllers/PlansController.html":{}}}],["console.log('plandto",{"_index":1267,"title":{},"body":{"controllers/PlansController.html":{}}}],["console.log('plans",{"_index":1420,"title":{},"body":{"injectables/PlansService.html":{}}}],["console.log('planwithdefaultversion",{"_index":1269,"title":{},"body":{"controllers/PlansController.html":{}}}],["console.log('products",{"_index":1555,"title":{},"body":{"injectables/ProductService.html":{}}}],["console.log('query",{"_index":609,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/ProductService.html":{},"controllers/SitesController.html":{}}}],["console.log('querybuilder",{"_index":627,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/SitesService.html":{}}}],["console.log('sites",{"_index":1892,"title":{},"body":{"injectables/SitesService.html":{}}}],["console.log('token",{"_index":1002,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["console.log(process.env",{"_index":1124,"title":{},"body":{"modules/MailModule.html":{}}}],["console.log(usertype",{"_index":2121,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["const",{"_index":227,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["constraint",{"_index":1683,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["constructor",{"_index":182,"title":{},"body":{"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["constructor(@injectmodel(template.name",{"_index":1942,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["constructor(@injectrepository(usertype",{"_index":2120,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["constructor(categoryrepository",{"_index":588,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(changepasswordrepository",{"_index":693,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["constructor(httpservice",{"_index":1029,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["constructor(key",{"_index":327,"title":{},"body":{"classes/ApiException.html":{}}}],["constructor(paywallmodulerpo",{"_index":183,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["constructor(planrepository",{"_index":1320,"title":{},"body":{"injectables/PlansService.html":{}}}],["constructor(private",{"_index":114,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["constructor(productrepository",{"_index":1506,"title":{},"body":{"injectables/ProductService.html":{}}}],["constructor(resetpasswordrepository",{"_index":1597,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["constructor(siterepo",{"_index":1857,"title":{},"body":{"injectables/SitesService.html":{}}}],["constructor(userentity",{"_index":1961,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["constructor(userrepo",{"_index":2037,"title":{},"body":{"injectables/UserProfileService.html":{},"injectables/UsersService.html":{}}}],["constructor(userrepository",{"_index":773,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["constructor(usertyperepository",{"_index":2115,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["construir",{"_index":797,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["container",{"_index":2353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":1831,"title":{},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["content",{"_index":1058,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["contentquantity",{"_index":1207,"title":{},"body":{"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["continuar",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contraseña",{"_index":730,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccessModulesController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{},"coverage.html":{}}}],["controller('access",{"_index":110,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["controller('auth",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":555,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('email",{"_index":686,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/ResetPasswordMailController.html":{}}}],["controller('keycloak",{"_index":990,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["controller('plans",{"_index":1264,"title":{},"body":{"controllers/PlansController.html":{}}}],["controller('product",{"_index":1483,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('profile",{"_index":2033,"title":{},"body":{"controllers/UserProfileController.html":{}}}],["controller('roles",{"_index":1643,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('sites",{"_index":1836,"title":{},"body":{"controllers/SitesController.html":{}}}],["controller('template",{"_index":1925,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["controller('users",{"_index":2065,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('usertype",{"_index":2105,"title":{},"body":{"controllers/UsertypeController.html":{}}}],["controller/change",{"_index":1109,"title":{},"body":{"modules/MailModule.html":{}}}],["controller/confirm",{"_index":1105,"title":{},"body":{"modules/MailModule.html":{}}}],["controller/reset",{"_index":1096,"title":{},"body":{"modules/MailModule.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["convertir",{"_index":567,"title":{},"body":{"controllers/CategoryController.html":{}}}],["cookiekey",{"_index":939,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["correctamente",{"_index":2400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["correo",{"_index":737,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":2155,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crear",{"_index":1528,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UsersService.html":{}}}],["create",{"_index":522,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"coverage.html":{}}}],["create(@body",{"_index":1644,"title":{},"body":{"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["create(createroledto",{"_index":1626,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["create(createsitedto",{"_index":1814,"title":{},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["create(createuserdto",{"_index":2058,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(plan",{"_index":1324,"title":{},"body":{"injectables/PlansService.html":{}}}],["create(template",{"_index":1944,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["create(usertype",{"_index":2099,"title":{},"body":{"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{}}}],["createat",{"_index":1126,"title":{},"body":{"entities/PaywallModule.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"entities/Site.html":{}}}],["createcategory",{"_index":517,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["createcategory(@body",{"_index":560,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcategory(body",{"_index":520,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcategory(category",{"_index":591,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createchangepassword",{"_index":691,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["createchangepassword(resetpasswordentity",{"_index":698,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["created",{"_index":524,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["created_at",{"_index":1166,"title":{},"body":{"entities/Plan.html":{},"classes/SetDb1691181176026.html":{}}}],["createdat",{"_index":1149,"title":{},"body":{"entities/Plan.html":{},"entities/Product.html":{},"classes/SetDb1691181176026.html":{},"injectables/SitesService.html":{}}}],["createdatecolumn",{"_index":1136,"title":{},"body":{"entities/PaywallModule.html":{},"entities/Plan.html":{},"entities/Site.html":{}}}],["createdatecolumn({name",{"_index":1165,"title":{},"body":{"entities/Plan.html":{}}}],["createdatecolumn({type",{"_index":1128,"title":{},"body":{"entities/PaywallModule.html":{},"entities/Site.html":{}}}],["createdtemplate",{"_index":1950,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["createdtemplate.save",{"_index":1953,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["createkeycloakconnectoptions",{"_index":925,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["createpaywallmodule",{"_index":949,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["createpaywallmodule(@body",{"_index":1008,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["createpaywallmodule(paywallmodule",{"_index":957,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["createplan",{"_index":1234,"title":{},"body":{"controllers/PlansController.html":{}}}],["createplan(@body",{"_index":1266,"title":{},"body":{"controllers/PlansController.html":{}}}],["createplan(plandto",{"_index":1238,"title":{},"body":{"controllers/PlansController.html":{}}}],["createproduct",{"_index":1455,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["createproduct(createproductdto",{"_index":1459,"title":{},"body":{"controllers/ProductController.html":{}}}],["createproduct(product",{"_index":1509,"title":{},"body":{"injectables/ProductService.html":{}}}],["createproductdto",{"_index":820,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":249,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["createquerybuilder('category",{"_index":613,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createquerybuilder('plan",{"_index":1424,"title":{},"body":{"injectables/PlansService.html":{}}}],["createquerybuilder('product",{"_index":1519,"title":{},"body":{"injectables/ProductService.html":{}}}],["createquerybuilder('site",{"_index":1890,"title":{},"body":{"injectables/SitesService.html":{}}}],["createroledto",{"_index":839,"title":{"classes/CreateRoleDto.html":{}},"body":{"classes/CreateRoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["creates",{"_index":1862,"title":{},"body":{"injectables/SitesService.html":{}}}],["createsitedto",{"_index":842,"title":{"classes/CreateSiteDto.html":{}},"body":{"classes/CreateSiteDto.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/UpdateSiteDto.html":{},"coverage.html":{}}}],["createuser",{"_index":950,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["createuser(user",{"_index":960,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["createuseradmindto",{"_index":872,"title":{"classes/CreateUserAdminDto.html":{}},"body":{"classes/CreateUserAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":2062,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto.email",{"_index":2082,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusertoken",{"_index":1595,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["createusertoken(resetpasswordentity",{"_index":1600,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["creating",{"_index":1817,"title":{},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["creation",{"_index":1430,"title":{},"body":{"entities/Product.html":{}}}],["creationdate",{"_index":2013,"title":{},"body":{"entities/UserAdminEntity.html":{},"injectables/UsersService.html":{}}}],["credentials",{"_index":986,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["criteria",{"_index":1248,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["css",{"_index":1902,"title":{},"body":{"classes/Template.html":{}}}],["cualquier",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["cuenta",{"_index":816,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":1131,"title":{},"body":{"entities/PaywallModule.html":{},"entities/Product.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{}}}],["current_timestamp'})@apiproperty({description",{"_index":1447,"title":{},"body":{"entities/Product.html":{}}}],["current_timestamp})@apiproperty({description",{"_index":1429,"title":{},"body":{"entities/Product.html":{}}}],["currentdate",{"_index":2090,"title":{},"body":{"injectables/UsersService.html":{}}}],["custom",{"_index":1069,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["código",{"_index":786,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["d",{"_index":266,"title":{},"body":{"injectables/AccessModulesService.html":{},"classes/CreateUserAdminDto.html":{}}}],["d.\"paywallmoduleactionrelationid",{"_index":254,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["d.\"paywallmoduleid",{"_index":255,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["d.\"role",{"_index":253,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["data",{"_index":80,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["database",{"_index":916,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":396,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":373,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":2334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":1127,"title":{},"body":{"entities/PaywallModule.html":{},"entities/Plan.html":{},"entities/Product.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"entities/Site.html":{},"classes/Template.html":{},"entities/UserAdminEntity.html":{},"injectables/UsersService.html":{}}}],["datos",{"_index":1412,"title":{},"body":{"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["db",{"_index":1749,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"coverage.html":{}}}],["db.ts",{"_index":1666,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"coverage.html":{}}}],["db.ts:10",{"_index":1741,"title":{},"body":{"classes/SetDb1691708514379.html":{}}}],["db.ts:11",{"_index":1730,"title":{},"body":{"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{}}}],["db.ts:12",{"_index":1715,"title":{},"body":{"classes/SetDb1691184456498.html":{}}}],["db.ts:15",{"_index":1720,"title":{},"body":{"classes/SetDb1691184574917.html":{}}}],["db.ts:17",{"_index":1725,"title":{},"body":{"classes/SetDb1691186525496.html":{}}}],["db.ts:19",{"_index":1673,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["db.ts:4",{"_index":1670,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{}}}],["db.ts:6",{"_index":1675,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{}}}],["dbname",{"_index":911,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["ddpeream@unal.edu.co",{"_index":1116,"title":{},"body":{"modules/MailModule.html":{}}}],["ddpream@unal.edu.co",{"_index":879,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["de",{"_index":570,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":147,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["decoration",{"_index":2379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/AppController.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"controllers/KeycloakController.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"classes/Template.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["default",{"_index":1130,"title":{},"body":{"entities/PaywallModule.html":{},"entities/Plan.html":{},"controllers/PlansController.html":{},"entities/Product.html":{},"entities/RolePaywallModule.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"changelog.html":{}}}],["definition",{"_index":564,"title":{},"body":{"controllers/CategoryController.html":{}}}],["deimar",{"_index":882,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["del",{"_index":848,"title":{},"body":{"classes/CreateSiteDto.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":297,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/RolesController.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{}}}],["delete(':id",{"_index":1631,"title":{},"body":{"controllers/RolesController.html":{}}}],["delete('remove/:id",{"_index":1844,"title":{},"body":{"controllers/SitesController.html":{}}}],["delete('remove/:id')@apioperation({summary",{"_index":1824,"title":{},"body":{"controllers/SitesController.html":{}}}],["dependencies",{"_index":145,"title":{"dependencies.html":{}},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"dependencies.html":{},"overview.html":{}}}],["descripción",{"_index":847,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["description",{"_index":12,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"classes/UpdatePlanDto.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"index.html":{},"properties.html":{}}}],["desde",{"_index":2401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev",{"_index":2388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["developers",{"_index":2147,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":2273,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1578,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["disfrutar",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/.../i18n.generated.ts",{"_index":2324,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dist/i18n/generated/i18n.generated.ts",{"_index":2327,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["doble",{"_index":2397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":342,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["documented",{"_index":2130,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":776,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["domain}/${token",{"_index":802,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["domine",{"_index":758,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["domine}/${token",{"_index":1608,"title":{},"body":{"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["dominio",{"_index":800,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["dotenv",{"_index":2221,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":1668,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["down(queryrunner",{"_index":1671,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["drop",{"_index":1711,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["dto",{"_index":1816,"title":{},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["dto/create",{"_index":1639,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create/plan.dto",{"_index":1259,"title":{},"body":{"controllers/PlansController.html":{}}}],["dto/product.dto",{"_index":1482,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["dto/update",{"_index":1641,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{}}}],["dto/update/plan",{"_index":1260,"title":{},"body":{"controllers/PlansController.html":{}}}],["dto/usertype.dto",{"_index":2104,"title":{},"body":{"controllers/UsertypeController.html":{}}}],["duration",{"_index":1150,"title":{},"body":{"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["duration.tolowercase",{"_index":1418,"title":{},"body":{"injectables/PlansService.html":{}}}],["durationtype",{"_index":1208,"title":{},"body":{"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["dígitos",{"_index":788,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["e2e",{"_index":2283,"title":{},"body":{"index.html":{}}}],["eager",{"_index":1142,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{}}}],["edit",{"_index":967,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/ProductController.html":{}}}],["edited",{"_index":1081,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["editproduct",{"_index":1456,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["editproduct(@body",{"_index":1492,"title":{},"body":{"controllers/ProductController.html":{}}}],["editproduct(product",{"_index":1463,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["edituser",{"_index":951,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["edituser(tokenaccess",{"_index":1035,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["edituser(user",{"_index":965,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["efficient",{"_index":2263,"title":{},"body":{"index.html":{}}}],["el",{"_index":290,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateSiteDto.html":{},"modules/DatabaseModule.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["electrónico",{"_index":805,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":667,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateUserAdminDto.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":1983,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["en",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/PlansService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["encontr",{"_index":289,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["encontrado",{"_index":722,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["encontraron",{"_index":1523,"title":{},"body":{"injectables/ProductService.html":{}}}],["end_date",{"_index":1172,"title":{},"body":{"entities/Plan.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["enddate",{"_index":1151,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{}}}],["enlace",{"_index":814,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["enteros",{"_index":573,"title":{},"body":{"controllers/CategoryController.html":{}}}],["entities",{"_index":487,"title":{},"body":{"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/site.entity",{"_index":1853,"title":{},"body":{"modules/SitesModule.html":{},"injectables/SitesService.html":{}}}],["entities/user.entity",{"_index":2042,"title":{},"body":{"injectables/UserProfileService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":485,"title":{"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{}},"body":{"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{},"coverage.html":{}}}],["entity/category.entity",{"_index":584,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["entity/paywal",{"_index":750,"title":{},"body":{"modules/CommonModule.html":{}}}],["entity/paywall",{"_index":749,"title":{},"body":{"modules/CommonModule.html":{}}}],["entity/paywallmodule.entity",{"_index":748,"title":{},"body":{"modules/CommonModule.html":{}}}],["entity/plan.entity",{"_index":1291,"title":{},"body":{"modules/PlansModule.html":{},"injectables/PlansService.html":{}}}],["entity/plans",{"_index":746,"title":{},"body":{"modules/CommonModule.html":{}}}],["entity/product.entity",{"_index":1481,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["entity/role",{"_index":751,"title":{},"body":{"modules/CommonModule.html":{}}}],["entity/usertype.entity",{"_index":2112,"title":{},"body":{"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{}}}],["entitymanager",{"_index":186,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["entityrepository",{"_index":216,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["entitys/change",{"_index":1108,"title":{},"body":{"modules/MailModule.html":{}}}],["entitys/reset",{"_index":1099,"title":{},"body":{"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{}}}],["entrada",{"_index":1979,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["entre",{"_index":1422,"title":{},"body":{"injectables/PlansService.html":{}}}],["enum",{"_index":1222,"title":{},"body":{"classes/PlanDto.html":{}}}],["enumerations",{"_index":2251,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["enviado",{"_index":735,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["enviar",{"_index":803,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["enviroments",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["enviroments[process.env.node_env",{"_index":426,"title":{},"body":{"modules/AppModule.html":{}}}],["envío",{"_index":1590,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["error",{"_index":242,"title":{},"body":{"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UsertypeService.html":{}}}],["error('unknown",{"_index":1086,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["es",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateSiteDto.html":{}}}],["eslint",{"_index":1577,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["eslint/no",{"_index":1582,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["est",{"_index":783,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["esta",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["estado",{"_index":853,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["este",{"_index":2386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["estás",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":353,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/SitesService.html":{}}}],["exceptions",{"_index":358,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["exist",{"_index":1949,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["existe",{"_index":780,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/UsersService.html":{}}}],["existinguser",{"_index":2080,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1345,"title":{},"body":{"injectables/PlansService.html":{},"classes/SetDb1691515083659.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["export",{"_index":112,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{}}}],["exports",{"_index":150,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DatabaseModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["exports:[keycloakconfigservice",{"_index":468,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":2206,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":323,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["f4f4f4",{"_index":2350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebook",{"_index":2212,"title":{},"body":{"dependencies.html":{}}}],["factor",{"_index":1101,"title":{},"body":{"modules/MailModule.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1591,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["fallbacklanguage",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":238,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"modules/DatabaseModule.html":{},"modules/MailModule.html":{},"entities/Plan.html":{},"entities/Product.html":{},"entities/RolePaywallModule.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"entities/UserAdminEntity.html":{},"miscellaneous/variables.html":{}}}],["false})@apiquery({name",{"_index":534,"title":{},"body":{"controllers/CategoryController.html":{}}}],["family",{"_index":2342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favor",{"_index":810,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["fecha",{"_index":2087,"title":{},"body":{"injectables/UsersService.html":{}}}],["fff",{"_index":2360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":650,"title":{},"body":{"injectables/CategoryService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["fields.ts",{"_index":1780,"title":{},"body":{"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"coverage.html":{}}}],["fields.ts:11",{"_index":1793,"title":{},"body":{"classes/SetNewPlansFields1692824385127.html":{}}}],["fields.ts:14",{"_index":1790,"title":{},"body":{"classes/SetNewPlansFields1692822538207.html":{}}}],["fields.ts:17",{"_index":1786,"title":{},"body":{"classes/SetNewPlansFields1692815139944.html":{}}}],["fields.ts:20",{"_index":1782,"title":{},"body":{"classes/SetNewPlansFields1692380743605.html":{}}}],["fields.ts:4",{"_index":1781,"title":{},"body":{"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["fields.ts:6",{"_index":1783,"title":{},"body":{"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":2142,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":1472,"title":{},"body":{"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["filtered",{"_index":540,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["filtering",{"_index":537,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["filtering'})@apiquery({name",{"_index":531,"title":{},"body":{"controllers/CategoryController.html":{}}}],["filtersites",{"_index":1812,"title":{},"body":{"controllers/SitesController.html":{}}}],["filtersites(@query",{"_index":1839,"title":{},"body":{"controllers/SitesController.html":{}}}],["filtersites(query",{"_index":1818,"title":{},"body":{"controllers/SitesController.html":{}}}],["find",{"_index":525,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/SitesService.html":{}}}],["findall",{"_index":21,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"injectables/TemplateManagerService.html":{}}}],["findall(page",{"_index":1240,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["findallfilter",{"_index":1457,"title":{},"body":{"controllers/ProductController.html":{}}}],["findallfilter(@query",{"_index":1489,"title":{},"body":{"controllers/ProductController.html":{}}}],["findallfilter(query",{"_index":1470,"title":{},"body":{"controllers/ProductController.html":{}}}],["findallpagination",{"_index":518,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["findallpagination(@query",{"_index":1272,"title":{},"body":{"controllers/PlansController.html":{}}}],["findallpagination(query",{"_index":527,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["findallplans",{"_index":1235,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["findallwithpaginationandfilter",{"_index":587,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["findallwithpaginationandfilter(query",{"_index":596,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["findbyfilter",{"_index":1236,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["findbyfilter(@query(new",{"_index":1280,"title":{},"body":{"controllers/PlansController.html":{}}}],["findbyfilter(query",{"_index":1246,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["findbyfilterandpagination",{"_index":1318,"title":{},"body":{"injectables/PlansService.html":{}}}],["findbyfilterandpagination(query",{"_index":1332,"title":{},"body":{"injectables/PlansService.html":{}}}],["findone",{"_index":22,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["findone(@param('id",{"_index":137,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/PlansController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{}}}],["findone(id",{"_index":39,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{}}}],["finds",{"_index":1869,"title":{},"body":{"injectables/SitesService.html":{}}}],["finduser",{"_index":1026,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["finduser(tokenaccess",{"_index":1037,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["findusertype",{"_index":2098,"title":{},"body":{"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{}}}],["firstname",{"_index":875,"title":{},"body":{"classes/CreateUserAdminDto.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"miscellaneous/variables.html":{}}}],["firstvaluefrom",{"_index":1049,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["fixed",{"_index":2148,"title":{},"body":{"changelog.html":{}}}],["fk_1cfbe8c6655a8d0d92649a42022",{"_index":1705,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["fk_1e2ff990d66e32b17ef77805843",{"_index":1767,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["fk_2c2b0e50a64530b0efebb9815f0",{"_index":1726,"title":{},"body":{"classes/SetDb1691186525496.html":{}}}],["fk_35c00517e74eb50de31c6c1b343",{"_index":1707,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{}}}],["fk_3b16c8cc0f96ff966afd61660c3",{"_index":1717,"title":{},"body":{"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{}}}],["fk_4072d596466fdb1f515f53ddace",{"_index":1774,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["fk_4f88577c3ca6126a27e06e96414",{"_index":1721,"title":{},"body":{"classes/SetDb1691184574917.html":{}}}],["fk_51ff8387e9f4fc36e68306c96a2",{"_index":1769,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["fk_594f85fa3a0b1028cdd8a3a81b5",{"_index":1771,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["fk_b32e1b18700e9dc6e120160f086",{"_index":1722,"title":{},"body":{"classes/SetDb1691184574917.html":{}}}],["fk_b3351b0fd1acbaa06953535b8c4",{"_index":1709,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{}}}],["fk_b50a7fb7ec0fb1cf1a7bee1468e",{"_index":1727,"title":{},"body":{"classes/SetDb1691186525496.html":{}}}],["fk_cfe9c416caaabe7aa810b1eaa2a",{"_index":1701,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184574917.html":{}}}],["fk_d1f695b7b6024f9de5be0ddb8eb",{"_index":1708,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{}}}],["fk_f9d191fcac07207aba34d2ab7c0",{"_index":1772,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["flattened",{"_index":637,"title":{},"body":{"injectables/CategoryService.html":{}}}],["font",{"_index":2341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreign",{"_index":1702,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["form",{"_index":1061,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["format",{"_index":2131,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":635,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/UserProfileService.html":{}}}],["framework",{"_index":2261,"title":{},"body":{"index.html":{}}}],["franck",{"_index":1378,"title":{},"body":{"injectables/PlansService.html":{}}}],["frequency",{"_index":1295,"title":{},"body":{"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{}}}],["frequencytype",{"_index":1209,"title":{},"body":{"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["from(paywallmoduleaction",{"_index":256,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["from(rolepaywallmodule",{"_index":312,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["from(rolepaywallmoduleactionrelation",{"_index":265,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["function",{"_index":1984,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{}}}],["functions",{"_index":2255,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generar",{"_index":785,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/UsersService.html":{}}}],["get(':id",{"_index":136,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/PlansController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{}}}],["get(':id')@apioperation({summary",{"_index":41,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/PlansController.html":{},"controllers/SitesController.html":{}}}],["get('filter",{"_index":528,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["get('filter')@apioperation({summary",{"_index":1247,"title":{},"body":{"controllers/PlansController.html":{}}}],["get('findall",{"_index":1927,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["get('findone",{"_index":1929,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["get('list",{"_index":133,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["get('list')@apioperation({summary",{"_index":69,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["get('moduleaction/:moduleid/:role",{"_index":123,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["get('pagination",{"_index":1274,"title":{},"body":{"controllers/PlansController.html":{}}}],["get('pagination')@apioperation({summary",{"_index":1241,"title":{},"body":{"controllers/PlansController.html":{}}}],["get('paywallmodule",{"_index":1010,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["get('roles/:id",{"_index":118,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["get('roles/list",{"_index":1004,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["get('select/:id",{"_index":1495,"title":{},"body":{"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["get('select/:id')@apioperation({summary",{"_index":1476,"title":{},"body":{"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["get('send",{"_index":761,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["get('users/:id",{"_index":1014,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["get('users/list",{"_index":1000,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["get()@apioperation({summary",{"_index":31,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/AppController.html":{}}}],["getargs",{"_index":335,"title":{},"body":{"classes/ApiException.html":{}}}],["gethello",{"_index":351,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmoduleactionswithrelations",{"_index":179,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getmoduleactionswithrelations(moduleid",{"_index":191,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getmodulesstatusbyrole",{"_index":23,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["getmodulesstatusbyrole(@param('id",{"_index":120,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["getmodulesstatusbyrole(id",{"_index":51,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["getmodulesstatusbyrole(roleid",{"_index":198,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getpaywallmoduleaction",{"_index":24,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["getpaywallmoduleaction(moduleid",{"_index":60,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["getqueryrolmodule",{"_index":180,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getqueryrolmodule(moduleid",{"_index":202,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getqueryrolmoduleaction",{"_index":181,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getqueryrolmoduleaction(moduleid",{"_index":204,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getrolepaywallmodulle",{"_index":25,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["getrolepaywallmodulle(roleid",{"_index":207,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getting",{"_index":2124,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gettranslation",{"_index":333,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["gettranslation(@i18n",{"_index":356,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["gettranslation(i18n",{"_index":363,"title":{},"body":{"controllers/AppController.html":{}}}],["getupdatepaywallmoduleaction",{"_index":26,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["getupdatepaywallmoduleaction(moduleid",{"_index":209,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["getupdatepaywallmoduleaction(product",{"_index":74,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["given",{"_index":1882,"title":{},"body":{"injectables/SitesService.html":{}}}],["global",{"_index":899,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["google",{"_index":2233,"title":{},"body":{"dependencies.html":{}}}],["gracias",{"_index":808,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":2312,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":2289,"title":{},"body":{"index.html":{}}}],["guardar",{"_index":1390,"title":{},"body":{"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["h1",{"_index":2369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ha",{"_index":734,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["handlebars",{"_index":2223,"title":{},"body":{"dependencies.html":{}}}],["hash",{"_index":2084,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":2085,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword",{"_index":2077,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hashpassword(createuserdto.password",{"_index":2086,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":2258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["haz",{"_index":811,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["header",{"_index":1070,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["headerresolver",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["headerresolver(['x",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["headers",{"_index":987,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["headers('authorization",{"_index":998,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["headersrequest",{"_index":1057,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["height",{"_index":2346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":355,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["here",{"_index":2298,"title":{},"body":{"index.html":{}}}],["hola",{"_index":2381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hora",{"_index":2088,"title":{},"body":{"injectables/UsersService.html":{}}}],["host",{"_index":910,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MailModule.html":{}}}],["html",{"_index":731,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Template.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["httpexception",{"_index":1575,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["httpexception('user",{"_index":1588,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["httpmodule",{"_index":1021,"title":{},"body":{"modules/KeycloakModule.html":{}}}],["https://nestjs.com",{"_index":2305,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":1030,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["httpstatus",{"_index":1576,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["httpstatus.internal_server_error",{"_index":1593,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["httpstatus.not_found",{"_index":1589,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["hydrateddocument",{"_index":1917,"title":{},"body":{"classes/Template.html":{},"miscellaneous/typealiases.html":{}}}],["i18n",{"_index":343,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/CreateSiteDto.html":{},"injectables/SitesService.html":{},"dependencies.html":{}}}],["i18n.t('test.hello",{"_index":357,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["i18n/generated/i18n.generated",{"_index":347,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["i18ncontext",{"_index":344,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/SitesService.html":{}}}],["i18ncontext.current().lang",{"_index":1880,"title":{},"body":{"injectables/SitesService.html":{}}}],["i18nmodule",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["i18npath",{"_index":328,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"miscellaneous/typealiases.html":{}}}],["i18nservice",{"_index":1858,"title":{},"body":{"injectables/SitesService.html":{}}}],["i18ntranslations",{"_index":346,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"classes/CreateSiteDto.html":{},"miscellaneous/typealiases.html":{}}}],["i18nvalidationmessage",{"_index":867,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["i18nvalidationmessage('validation.is_string",{"_index":869,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["i18nvalidationmessage('validation.not_empty",{"_index":870,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["id",{"_index":43,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"classes/CreateProductDto.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{}}}],["id'})@apiparam({name",{"_index":544,"title":{},"body":{"controllers/CategoryController.html":{}}}],["id'})@apiresponse",{"_index":1477,"title":{},"body":{"controllers/ProductController.html":{}}}],["id'})@apiresponse({status",{"_index":968,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["id.'})@apiresponse({status",{"_index":44,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["id.id",{"_index":1494,"title":{},"body":{"controllers/ProductController.html":{}}}],["idcategory",{"_index":490,"title":{},"body":{"entities/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691512677390.html":{}}}],["identifier",{"_index":1438,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["idmysite",{"_index":1743,"title":{},"body":{"classes/SetDb1691708514379.html":{}}}],["idplan",{"_index":1152,"title":{},"body":{"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/UpdatePlanDto.html":{}}}],["idplansproductcategory",{"_index":1296,"title":{},"body":{"entities/PlansProductCategory.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691515083659.html":{}}}],["idproduct",{"_index":500,"title":{},"body":{"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{}}}],["idrole",{"_index":236,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["idsite",{"_index":504,"title":{},"body":{"entities/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["idversionplan",{"_index":1153,"title":{},"body":{"entities/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/UpdatePlanDto.html":{}}}],["if(product.hasownproperty('isactive",{"_index":1564,"title":{},"body":{"injectables/ProductService.html":{}}}],["ignora",{"_index":2385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignorar",{"_index":2395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image",{"_index":876,"title":{},"body":{"classes/CreateUserAdminDto.html":{},"entities/UserAdminEntity.html":{}}}],["img",{"_index":1903,"title":{},"body":{"classes/Template.html":{}}}],["implements",{"_index":931,"title":{},"body":{"injectables/KeycloakConfigService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["import",{"_index":95,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{}}}],["imports",{"_index":173,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{}}}],["inactivo",{"_index":856,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["include",{"_index":2009,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":81,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{}}}],["information",{"_index":17,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["inicial",{"_index":1531,"title":{},"body":{"injectables/ProductService.html":{}}}],["iniciaste",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":908,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":175,"title":{"injectables/AccessModulesService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakConfigService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/RolesService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}},"body":{"injectables/AccessModulesService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakConfigService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/RolesService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{},"coverage.html":{}}}],["injectables",{"_index":176,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakConfigService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/RolesService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{},"overview.html":{}}}],["injectmodel",{"_index":1940,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["injectrepository",{"_index":215,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["injectrepository(category",{"_index":601,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["injectrepository(changepasswordentity",{"_index":717,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["injectrepository(paywallmodule",{"_index":218,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/KeycloakService.html":{}}}],["injectrepository(paywallmoduleaction",{"_index":221,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["injectrepository(paywallmoduleactionrelation",{"_index":222,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["injectrepository(plan",{"_index":1339,"title":{},"body":{"injectables/PlansService.html":{}}}],["injectrepository(plansproductcategory",{"_index":1340,"title":{},"body":{"injectables/PlansService.html":{}}}],["injectrepository(product",{"_index":1517,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectrepository(resetpasswordentity",{"_index":1607,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["injectrepository(rolepaywallmodule",{"_index":220,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["injectrepository(rolepaywallmoduleactionrelation",{"_index":223,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["injectrepository(site",{"_index":1875,"title":{},"body":{"injectables/SitesService.html":{}}}],["injectrepository(useradminentity",{"_index":718,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{}}}],["innerjoin",{"_index":257,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["innerjoin('category.product",{"_index":1546,"title":{},"body":{"injectables/ProductService.html":{}}}],["innerjoin('product.site",{"_index":1540,"title":{},"body":{"injectables/ProductService.html":{}}}],["innerjoin(paywallmodule",{"_index":260,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["instalar",{"_index":900,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["installation",{"_index":2269,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2271,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1587,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["instancia",{"_index":2092,"title":{},"body":{"injectables/UsersService.html":{}}}],["integer",{"_index":1679,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["integration",{"_index":2154,"title":{},"body":{"changelog.html":{}}}],["isactive",{"_index":75,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/RolePaywallModule.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"entities/Site.html":{},"injectables/SitesService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{}}}],["isactivep",{"_index":210,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["isboolean",{"_index":836,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/PlanDto.html":{}}}],["isboolean()@isnotempty()@apiproperty({description",{"_index":852,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["isboolean()@isoptional()@apiproperty({description",{"_index":828,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isdecimal",{"_index":835,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isemail",{"_index":894,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["isemail()@isnotempty()@apiproperty({description",{"_index":878,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["isenum",{"_index":1221,"title":{},"body":{"classes/PlanDto.html":{}}}],["isenum(usertype",{"_index":1219,"title":{},"body":{"classes/PlanDto.html":{}}}],["isglobal",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":866,"title":{},"body":{"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"classes/UserTypeDto.html":{}}}],["isnotempty()@isstring()@column({default",{"_index":2054,"title":{},"body":{"classes/UserTypeDto.html":{}}}],["isnumber",{"_index":833,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["isnumber()@isoptional()@apiproperty({description",{"_index":824,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":834,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["isoptional()@isnumber",{"_index":1212,"title":{},"body":{"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["isoptional()@isstring",{"_index":1210,"title":{},"body":{"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["isspecialrateactive",{"_index":1154,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{}}}],["isstring",{"_index":832,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserTypeDto.html":{}}}],["isstring()@apiproperty({description",{"_index":830,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":881,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["isstring()@isnotempty()@length(8",{"_index":888,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["isstring()@isnotempty({message",{"_index":845,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["isstring()@isoptional()@apiproperty({description",{"_index":822,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring({message",{"_index":858,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["isurl",{"_index":865,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["isurl()@isnotempty({message",{"_index":863,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["item",{"_index":1365,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.amount",{"_index":1376,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.duration",{"_index":1372,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.frequency",{"_index":1374,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.idcategory",{"_index":1371,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.idproduct",{"_index":1370,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.sites",{"_index":1369,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.typeduration",{"_index":1373,"title":{},"body":{"injectables/PlansService.html":{}}}],["item.unlimited",{"_index":1375,"title":{},"body":{"injectables/PlansService.html":{}}}],["items",{"_index":1328,"title":{},"body":{"injectables/PlansService.html":{}}}],["join",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":511,"title":{},"body":{"entities/Category.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{}}}],["js",{"_index":1904,"title":{},"body":{"classes/Template.html":{}}}],["jsonwebtoken",{"_index":712,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"dependencies.html":{}}}],["jwt",{"_index":711,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"dependencies.html":{}}}],["jwt.sign",{"_index":723,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["jwtmodule",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["kamil",{"_index":2302,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2132,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":331,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["keycloak",{"_index":104,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{},"changelog.html":{},"dependencies.html":{}}}],["keycloak.controller",{"_index":1020,"title":{},"body":{"modules/KeycloakModule.html":{}}}],["keycloak.service",{"_index":989,"title":{},"body":{"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{}}}],["keycloak/keycloak.module",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["keycloak_jwt",{"_index":940,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["keycloakconfigservice",{"_index":415,"title":{"injectables/KeycloakConfigService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/KeycloakConfigService.html":{},"coverage.html":{},"overview.html":{}}}],["keycloakconnectmodule",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["keycloakconnectmodule.registerasync",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["keycloakconnectoptions",{"_index":927,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["keycloakconnectoptionsfactory",{"_index":928,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["keycloakcontroller",{"_index":947,"title":{"controllers/KeycloakController.html":{}},"body":{"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"coverage.html":{}}}],["keycloakmodule",{"_index":374,"title":{"modules/KeycloakModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeycloakModule.html":{},"modules.html":{},"overview.html":{}}}],["keycloakservice",{"_index":988,"title":{"injectables/KeycloakService.html":{}},"body":{"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"coverage.html":{},"overview.html":{}}}],["la",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateSiteDto.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["lang",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"injectables/SitesService.html":{}}}],["las",{"_index":1394,"title":{},"body":{"injectables/PlansService.html":{},"injectables/ProductService.html":{}}}],["last",{"_index":1448,"title":{},"body":{"entities/Product.html":{}}}],["lastlogin",{"_index":2014,"title":{},"body":{"entities/UserAdminEntity.html":{},"injectables/UsersService.html":{}}}],["lastname",{"_index":877,"title":{},"body":{"classes/CreateUserAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{}}}],["leftjoin('category.product",{"_index":1536,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoin('category.site",{"_index":1535,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect",{"_index":263,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["leftjoinandselect('category.product",{"_index":614,"title":{},"body":{"injectables/CategoryService.html":{}}}],["leftjoinandselect('category.site",{"_index":615,"title":{},"body":{"injectables/CategoryService.html":{}}}],["legend",{"_index":146,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["length",{"_index":893,"title":{},"body":{"classes/CreateUserAdminDto.html":{},"entities/Product.html":{},"entities/Site.html":{}}}],["length(8",{"_index":895,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["license",{"_index":2308,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2287,"title":{},"body":{"index.html":{}}}],["limit",{"_index":535,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["line",{"_index":1580,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":70,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{}}}],["listpaywallmodule",{"_index":952,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["listpaywallmodules",{"_index":1027,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["listroles",{"_index":953,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["listroles(@headers('authorization",{"_index":1005,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["listroles(tokenaccess",{"_index":972,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["listuser",{"_index":954,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["listuser(tokenaccess",{"_index":975,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["listusers",{"_index":955,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["listusers(@headers('authorization",{"_index":1001,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["listusers(tokenaccess",{"_index":978,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["literal",{"_index":2328,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["loaded",{"_index":1123,"title":{},"body":{"modules/MailModule.html":{}}}],["loaderoptions",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":2239,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":2143,"title":{},"body":{"changelog.html":{}}}],["logging",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":956,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["login(@body",{"_index":994,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["login(credentials",{"_index":982,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["logintoken",{"_index":1028,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["logintoken(credentials",{"_index":1042,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["loglevels",{"_index":941,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["los",{"_index":568,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/UsersService.html":{}}}],["loyaltywall",{"_index":2387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lógica",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["mail",{"_index":681,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["mail/mail.module",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":1095,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forroot",{"_index":1111,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":695,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["mailmodule",{"_index":375,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["main",{"_index":350,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["manager",{"_index":1922,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["manager.controller",{"_index":1936,"title":{},"body":{"modules/TemplateManagerModule.html":{}}}],["manager.controller.ts",{"_index":1921,"title":{},"body":{"controllers/TemplateManagerController.html":{},"coverage.html":{}}}],["manager.module",{"_index":423,"title":{},"body":{"modules/AppModule.html":{}}}],["manager.module.ts",{"_index":1935,"title":{},"body":{"modules/TemplateManagerModule.html":{}}}],["manager.service",{"_index":1924,"title":{},"body":{"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{}}}],["manager.service.ts",{"_index":1939,"title":{},"body":{"injectables/TemplateManagerService.html":{},"coverage.html":{}}}],["manager/chemma/template.schema.ts",{"_index":1901,"title":{},"body":{"classes/Template.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/chemma/template.schema.ts:11",{"_index":1913,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:14",{"_index":1909,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:17",{"_index":1910,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:20",{"_index":1907,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:23",{"_index":1912,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:26",{"_index":1911,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:29",{"_index":1914,"title":{},"body":{"classes/Template.html":{}}}],["manager/chemma/template.schema.ts:32",{"_index":1908,"title":{},"body":{"classes/Template.html":{}}}],["manager/template",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"coverage.html":{}}}],["managing",{"_index":13,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["manytomany",{"_index":1313,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["manytoone",{"_index":510,"title":{},"body":{"entities/Category.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{}}}],["manytoone(undefined",{"_index":498,"title":{},"body":{"entities/Category.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{}}}],["map",{"_index":636,"title":{},"body":{"injectables/CategoryService.html":{}}}],["margin",{"_index":2351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":143,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalcategory",{"_index":632,"title":{},"body":{"injectables/CategoryService.html":{}}}],["math.ceil(totalplans",{"_index":1406,"title":{},"body":{"injectables/PlansService.html":{}}}],["math.ceil(totalproducts",{"_index":1522,"title":{},"body":{"injectables/ProductService.html":{}}}],["math.ceil(totalsites",{"_index":1899,"title":{},"body":{"injectables/SitesService.html":{}}}],["math.floor(100000",{"_index":790,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["math.random",{"_index":791,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["max",{"_index":2354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":606,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"classes/CreateSiteDto.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["messageconfirmcreateuser",{"_index":817,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["metadata",{"_index":2244,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":20,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{}}}],["metodo",{"_index":741,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["migrationinterface",{"_index":1667,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["migrations",{"_index":2338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":2340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":2250,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2286,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2276,"title":{},"body":{"index.html":{}}}],["model",{"_index":1941,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["modificado",{"_index":1230,"title":{},"body":{"classes/PlanDto.html":{}}}],["modifiedcategories",{"_index":639,"title":{},"body":{"injectables/CategoryService.html":{}}}],["module",{"_index":42,"title":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{}},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"coverage.html":{},"overview.html":{}}}],["module's",{"_index":68,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["module.'})@apiresponse({status",{"_index":65,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["module.entity",{"_index":164,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{}}}],["module.entity.ts",{"_index":1614,"title":{},"body":{"entities/RolePaywallModule.html":{},"coverage.html":{}}}],["module.entity.ts:10",{"_index":1618,"title":{},"body":{"entities/RolePaywallModule.html":{}}}],["module.entity.ts:13",{"_index":1617,"title":{},"body":{"entities/RolePaywallModule.html":{}}}],["module.entity.ts:16",{"_index":1616,"title":{},"body":{"entities/RolePaywallModule.html":{}}}],["module.entity.ts:7",{"_index":1615,"title":{},"body":{"entities/RolePaywallModule.html":{}}}],["module.id",{"_index":235,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["moduleid",{"_index":67,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["moduleidasnumber",{"_index":269,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules",{"_index":11,"title":{"modules.html":{}},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"modules.html":{},"overview.html":{}}}],["modules.'})@apiresponse({status",{"_index":33,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller",{"_index":157,"title":{},"body":{"modules/AccessModulesModule.html":{}}}],["modules.controller.ts",{"_index":8,"title":{},"body":{"controllers/AccessModulesController.html":{},"coverage.html":{}}}],["modules.controller.ts:118",{"_index":73,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:132",{"_index":37,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:147",{"_index":45,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:163",{"_index":93,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:27",{"_index":57,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:45",{"_index":66,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:68",{"_index":78,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.controller.ts:96",{"_index":88,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["modules.module",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["modules.module.ts",{"_index":156,"title":{},"body":{"modules/AccessModulesModule.html":{}}}],["modules.service",{"_index":101,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{}}}],["modules.service.ts",{"_index":177,"title":{},"body":{"injectables/AccessModulesService.html":{},"coverage.html":{}}}],["modules.service.ts:11",{"_index":187,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:128",{"_index":211,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:188",{"_index":212,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:274",{"_index":203,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:29",{"_index":189,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:291",{"_index":205,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:313",{"_index":208,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:33",{"_index":190,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:37",{"_index":213,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:41",{"_index":199,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:69",{"_index":201,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules.service.ts:83",{"_index":192,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["modules/access",{"_index":7,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["modules/mailer",{"_index":703,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"dependencies.html":{}}}],["mongodb",{"_index":901,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongodb://${user}:${password}@${host}:${port}/${dbname",{"_index":922,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongoose",{"_index":1918,"title":{},"body":{"classes/Template.html":{},"injectables/TemplateManagerService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":905,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/TemplateManagerModule.html":{}}}],["mongoosemodule.forfeature",{"_index":1938,"title":{},"body":{"modules/TemplateManagerModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":919,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":2297,"title":{},"body":{"index.html":{}}}],["moreno",{"_index":886,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["my_site",{"_index":1742,"title":{},"body":{"classes/SetDb1691708514379.html":{}}}],["myśliwiec",{"_index":2303,"title":{},"body":{"index.html":{}}}],["módulo",{"_index":291,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["name",{"_index":47,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.tolowercase",{"_index":617,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["necesario",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["nest",{"_index":103,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{},"dependencies.html":{},"index.html":{}}}],["nestframework",{"_index":2307,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":345,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateSiteDto.html":{},"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":1022,"title":{},"body":{"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":99,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":399,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":906,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/Template.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1263,"title":{},"body":{"controllers/PlansController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2205,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":109,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":159,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist",{"_index":1851,"title":{},"body":{"modules/SitesModule.html":{},"modules/UsersModule.html":{}}}],["nestjs/typeorm/dist/common",{"_index":1874,"title":{},"body":{"injectables/SitesService.html":{}}}],["new",{"_index":244,"title":{},"body":{"injectables/AccessModulesService.html":{},"modules/AppModule.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/RolesService.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcategory",{"_index":603,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PlansService.html":{}}}],["newitems",{"_index":1367,"title":{},"body":{"injectables/PlansService.html":{}}}],["newplan",{"_index":1361,"title":{},"body":{"injectables/PlansService.html":{}}}],["newplan.idplan",{"_index":1368,"title":{},"body":{"injectables/PlansService.html":{}}}],["newproduct",{"_index":1525,"title":{},"body":{"injectables/ProductService.html":{}}}],["newsite",{"_index":1864,"title":{},"body":{"injectables/SitesService.html":{}}}],["newuser",{"_index":2093,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1579,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["nextval('\"plansproductcategory_idplansproductcategory_seq",{"_index":1738,"title":{},"body":{"classes/SetDb1691515083659.html":{}}}],["ninguna",{"_index":1529,"title":{},"body":{"injectables/ProductService.html":{}}}],["node.js",{"_index":2260,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":2229,"title":{},"body":{"dependencies.html":{}}}],["nombre",{"_index":861,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["notable",{"_index":2127,"title":{},"body":{"changelog.html":{}}}],["notfoundexception",{"_index":214,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsertypeService.html":{}}}],["notfoundexception('category",{"_index":649,"title":{},"body":{"injectables/CategoryService.html":{}}}],["notfoundexception('el",{"_index":778,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["notfoundexception('failed",{"_index":1082,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["notfoundexception('no",{"_index":633,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["notfoundexception('number",{"_index":1407,"title":{},"body":{"injectables/PlansService.html":{},"injectables/SitesService.html":{}}}],["notfoundexception('product",{"_index":1559,"title":{},"body":{"injectables/ProductService.html":{}}}],["notfoundexception('template",{"_index":1948,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["notfoundexception('user",{"_index":1085,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["notfoundexception('usuario",{"_index":721,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["notfoundexception(`plan",{"_index":1382,"title":{},"body":{"injectables/PlansService.html":{}}}],["notfoundexception(`site",{"_index":1884,"title":{},"body":{"injectables/SitesService.html":{}}}],["notfoundexception(`user",{"_index":2044,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["notfoundexception(error",{"_index":1986,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["notfoundexception(error.message",{"_index":245,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/UsertypeService.html":{}}}],["now",{"_index":1682,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["npm",{"_index":2270,"title":{},"body":{"index.html":{}}}],["nuestro",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nuevo",{"_index":1409,"title":{},"body":{"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":237,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{}}}],["nullable",{"_index":1170,"title":{},"body":{"entities/Plan.html":{},"entities/Product.html":{},"entities/RolePaywallModule.html":{},"entities/UserAdminEntity.html":{}}}],["number",{"_index":61,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"classes/CreateProductDto.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"injectables/RolesService.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{}}}],["números",{"_index":572,"title":{},"body":{"controllers/CategoryController.html":{}}}],["o",{"_index":855,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["oauth20",{"_index":2234,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":116,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"miscellaneous/variables.html":{}}}],["obligatorio",{"_index":871,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["obligatorio'})@apiproperty({description",{"_index":850,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["obtain",{"_index":1045,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["obtained",{"_index":1046,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["obtener",{"_index":1549,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UsersService.html":{}}}],["omittype",{"_index":2006,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["omittype(createuseradmindto",{"_index":2011,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["onetomany",{"_index":1203,"title":{},"body":{"entities/Plan.html":{},"entities/Product.html":{},"entities/Site.html":{}}}],["onetomany(undefined",{"_index":1180,"title":{},"body":{"entities/Plan.html":{},"entities/Product.html":{},"entities/Site.html":{}}}],["onupdate",{"_index":1446,"title":{},"body":{"entities/Product.html":{}}}],["open",{"_index":2288,"title":{},"body":{"index.html":{}}}],["optional",{"_index":49,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserAdminDto.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":155,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["overview",{"_index":2314,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":1735,"title":{},"body":{"classes/SetDb1691515083659.html":{}}}],["p",{"_index":2374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":2197,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":2352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":610,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["paginated",{"_index":539,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["pagination",{"_index":530,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["pagination')@apioperation({summary",{"_index":529,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["pago",{"_index":1229,"title":{},"body":{"classes/PlanDto.html":{},"miscellaneous/enumerations.html":{}}}],["para",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/PlanDto.html":{},"injectables/ProductService.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":98,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{}}}],["param('actionrelationid",{"_index":131,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["param('id",{"_index":578,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/UserProfileController.html":{}}}],["param('isactive",{"_index":128,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["param('moduleid",{"_index":124,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["param('role",{"_index":125,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["parameter",{"_index":563,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parameters",{"_index":46,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":277,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["paramsinsert",{"_index":294,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["parseint(actionrelationid",{"_index":307,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["parseint(moduleid",{"_index":270,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["parseint(query.limit",{"_index":575,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parseint(query.skip",{"_index":574,"title":{},"body":{"controllers/CategoryController.html":{}}}],["parseintpipe",{"_index":547,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{}}}],["partialtype",{"_index":2000,"title":{},"body":{"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["partialtype(createroledto",{"_index":2001,"title":{},"body":{"classes/UpdateRoleDto.html":{}}}],["partialtype(createsitedto",{"_index":2003,"title":{},"body":{"classes/UpdateSiteDto.html":{}}}],["partialtype(createuseradmindto",{"_index":2008,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["paso",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":1117,"title":{},"body":{"modules/MailModule.html":{}}}],["passport",{"_index":2231,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":679,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"controllers/ResetPasswordMailController.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["password..template",{"_index":708,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["password..template.ts",{"_index":2177,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.controller",{"_index":1110,"title":{},"body":{"modules/MailModule.html":{}}}],["password.controller.ts",{"_index":675,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"coverage.html":{}}}],["password.controller.ts:11",{"_index":680,"title":{},"body":{"controllers/ChangePasswordMailController.html":{}}}],["password.entity",{"_index":713,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{}}}],["password.entity.ts",{"_index":666,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"entities/ResetPasswordEntity.html":{},"coverage.html":{}}}],["password.entity.ts:12",{"_index":671,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"entities/ResetPasswordEntity.html":{}}}],["password.entity.ts:6",{"_index":670,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"entities/ResetPasswordEntity.html":{}}}],["password.entity.ts:9",{"_index":669,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"entities/ResetPasswordEntity.html":{}}}],["password.mail.controller",{"_index":1098,"title":{},"body":{"modules/MailModule.html":{}}}],["password.mail.controller.ts",{"_index":1572,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"coverage.html":{}}}],["password.mail.controller.ts:20",{"_index":1574,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["password.mail.service",{"_index":685,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"modules/MailModule.html":{},"controllers/ResetPasswordMailController.html":{}}}],["password.mail.service.ts",{"_index":690,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{},"coverage.html":{}}}],["password.mail.service.ts:11",{"_index":1598,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["password.mail.service.ts:12",{"_index":696,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["password.mail.service.ts:20",{"_index":1603,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["password.mail.service.ts:21",{"_index":702,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["password.mail.service.ts:51",{"_index":1601,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["password.mail.service.ts:57",{"_index":699,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["password.template",{"_index":1606,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["password.template.ts",{"_index":2179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.ts",{"_index":2195,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["password/change",{"_index":674,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["password/confirm",{"_index":707,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password/reset",{"_index":1097,"title":{},"body":{"modules/MailModule.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":716,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["patch",{"_index":1636,"title":{},"body":{"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{}}}],["patch(':id",{"_index":1634,"title":{},"body":{"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":1829,"title":{},"body":{"controllers/SitesController.html":{}}}],["path",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"controllers/CategoryController.html":{},"miscellaneous/typealiases.html":{}}}],["paywal",{"_index":1146,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{}}}],["paywall",{"_index":63,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["paywall_module",{"_index":1754,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["paywall_module\"(\"id",{"_index":1768,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["paywall_module_action",{"_index":1756,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywall_module_action\"(\"id",{"_index":1770,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywall_module_action_relation",{"_index":1758,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywall_module_action_relation\"(\"id",{"_index":1773,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywall_module_id",{"_index":1787,"title":{},"body":{"classes/SetNewPlansFields1692815139944.html":{}}}],["paywallmodule",{"_index":160,"title":{"entities/PaywallModule.html":{}},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["paywallmodule.entity",{"_index":1145,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{}}}],["paywallmoduleaction",{"_index":165,"title":{"entities/PaywallModuleAction.html":{}},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"coverage.html":{}}}],["paywallmoduleactionid",{"_index":1760,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywallmoduleactionrelation",{"_index":168,"title":{"entities/PaywallModuleActionRelation.html":{}},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["paywallmoduleactionrelationid",{"_index":1763,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywallmoduleid",{"_index":1759,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["paywallmodulerepository",{"_index":1031,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["paywallmodulerpo",{"_index":188,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["paywallmodules",{"_index":228,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["paywallmodules.map(async",{"_index":233,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["paywallmoduleswithstatus",{"_index":231,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["paywalmodule.ts",{"_index":1750,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"coverage.html":{}}}],["paywalmodule.ts:19",{"_index":1752,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["paywalmodule.ts:20",{"_index":1777,"title":{},"body":{"classes/SetDbPaywalmodule1692380137673.html":{}}}],["paywalmodule.ts:4",{"_index":1751,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{}}}],["paywalmodule.ts:6",{"_index":1753,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{}}}],["per",{"_index":1243,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["perea",{"_index":885,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["pg",{"_index":2241,"title":{},"body":{"dependencies.html":{}}}],["pink",{"_index":2378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pk_1334fb798cf8c960af1d9b7fd40",{"_index":1757,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["pk_22c67c00ba975fbe51384cc64e7",{"_index":1746,"title":{},"body":{"classes/SetDb1691708514379.html":{}}}],["pk_318999ba9feeaa49ff117c91f64",{"_index":1697,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["pk_5733d365f4c4c98065f277ab9ed",{"_index":1694,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["pk_59cca1a07374ab8239145ebccc2",{"_index":1755,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["pk_5cf910d5478ec6a35693632fd29",{"_index":1766,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["pk_a30433595707fb3f8c6f01bce52",{"_index":1687,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["pk_af3c256f4edc5a9a4d49c3b42f1",{"_index":1684,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["pk_aff1975ddbbca8a721af0ef170f",{"_index":1699,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["pk_d50fdeadd31196d572847694f8d",{"_index":1764,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["pk_da43db32f82b42b69b1a78ec17d",{"_index":1761,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{}}}],["plan",{"_index":1147,"title":{"entities/Plan.html":{}},"body":{"entities/Plan.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["plan.categories.map(async",{"_index":1364,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.description",{"_index":1348,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.duration",{"_index":1353,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.enddate",{"_index":1360,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.idversionplan",{"_index":1350,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.isactive",{"_index":1349,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.isspecialrateactive",{"_index":1356,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.name",{"_index":1343,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.plansproductscategory",{"_index":1316,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["plan.plansproductscategory)@joincolumn({name",{"_index":1305,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["plan.rate",{"_index":1354,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.renewalrate",{"_index":1355,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.renewalspecialrate",{"_index":1358,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.specialrate",{"_index":1357,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.startdate",{"_index":1359,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.time",{"_index":1351,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.typeduration",{"_index":1352,"title":{},"body":{"injectables/PlansService.html":{}}}],["plan.usertype",{"_index":1347,"title":{},"body":{"injectables/PlansService.html":{}}}],["plancreated",{"_index":1341,"title":{},"body":{"injectables/PlansService.html":{}}}],["plandto",{"_index":1205,"title":{"classes/PlanDto.html":{}},"body":{"classes/PlanDto.html":{},"controllers/PlansController.html":{},"coverage.html":{}}}],["planedited",{"_index":1346,"title":{},"body":{"injectables/PlansService.html":{}}}],["planrepository",{"_index":1323,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans",{"_index":1204,"title":{},"body":{"entities/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"coverage.html":{}}}],["plans\"(\"idplan",{"_index":1706,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["plans.controller",{"_index":1290,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.service",{"_index":1258,"title":{},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{}}}],["plans/entity/plan.entity",{"_index":1314,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["plans/plans.module",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["planscontroller",{"_index":1232,"title":{"controllers/PlansController.html":{}},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["plansmodule",{"_index":376,"title":{"modules/PlansModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["plansproductcategory",{"_index":745,"title":{"entities/PlansProductCategory.html":{}},"body":{"modules/CommonModule.html":{},"entities/Plan.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"entities/Site.html":{},"coverage.html":{}}}],["plansproductcategory\".\"idplansproductcategory",{"_index":1736,"title":{},"body":{"classes/SetDb1691515083659.html":{}}}],["plansproductcategory.sites",{"_index":1803,"title":{},"body":{"entities/Site.html":{}}}],["plansproductcategory_idplansproductcategory_seq",{"_index":1734,"title":{},"body":{"classes/SetDb1691515083659.html":{}}}],["plansproductcategoryrepository",{"_index":1321,"title":{},"body":{"injectables/PlansService.html":{}}}],["plansproducts",{"_index":1199,"title":{},"body":{"entities/Plan.html":{}}}],["plansproductscategory",{"_index":1155,"title":{},"body":{"entities/Plan.html":{}}}],["plansproductscategory.plan",{"_index":1181,"title":{},"body":{"entities/Plan.html":{}}}],["plansservice",{"_index":1257,"title":{"injectables/PlansService.html":{}},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{},"overview.html":{}}}],["plantoupdate",{"_index":1381,"title":{},"body":{"injectables/PlansService.html":{}}}],["plantoupdate.description",{"_index":1387,"title":{},"body":{"injectables/PlansService.html":{}}}],["plantoupdate.idversionplan",{"_index":1389,"title":{},"body":{"injectables/PlansService.html":{}}}],["plantoupdate.isactive",{"_index":1388,"title":{},"body":{"injectables/PlansService.html":{}}}],["plantoupdate.name",{"_index":1385,"title":{},"body":{"injectables/PlansService.html":{}}}],["plantoupdate.usertype",{"_index":1386,"title":{},"body":{"injectables/PlansService.html":{}}}],["planwithdefaultversion",{"_index":1268,"title":{},"body":{"controllers/PlansController.html":{}}}],["please",{"_index":2295,"title":{},"body":{"index.html":{}}}],["podrás",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["policyenforcement",{"_index":944,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["policyenforcementmode",{"_index":929,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["policyenforcementmode.permissive",{"_index":945,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["por",{"_index":804,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/ProductService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":912,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MailModule.html":{}}}],["post",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["post('change",{"_index":678,"title":{},"body":{"controllers/ChangePasswordMailController.html":{}}}],["post('confirm",{"_index":759,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["post('create",{"_index":558,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{}}}],["post('create')@apioperation({summary",{"_index":521,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["post('paywallmodule",{"_index":1007,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["post('reset",{"_index":1573,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["post('sig",{"_index":2059,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('token",{"_index":993,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["post('users/create",{"_index":997,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["postgres",{"_index":914,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":9,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["primary",{"_index":1685,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{}}}],["primarycolumn",{"_index":1312,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["primarygeneratedcolumn",{"_index":509,"title":{},"body":{"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{}}}],["primarygeneratedcolumn()@apiproperty({description",{"_index":1436,"title":{},"body":{"entities/Product.html":{}}}],["primarygeneratedcolumn({name",{"_index":495,"title":{},"body":{"entities/Category.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{}}}],["private",{"_index":219,"title":{},"body":{"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["proceso",{"_index":1981,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_url",{"_index":2335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.keycloak_auth_server_url",{"_index":933,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["process.env.keycloak_client_id",{"_index":937,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["process.env.keycloak_realm",{"_index":935,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["process.env.keycloak_secret",{"_index":938,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["prod",{"_index":2391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prod.env",{"_index":2392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":79,"title":{"entities/Product.html":{}},"body":{"controllers/AccessModulesController.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"entities/Plan.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"entities/Site.html":{},"coverage.html":{}}}],["product\"(\"idproduct",{"_index":1710,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{}}}],["product')@apioperation({summary",{"_index":1471,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@apiresponse",{"_index":1465,"title":{},"body":{"controllers/ProductController.html":{}}}],["product'})@apiresponse({status",{"_index":1460,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.category",{"_index":514,"title":{},"body":{"entities/Category.html":{}}}],["product.category)@joincolumn({name",{"_index":499,"title":{},"body":{"entities/Category.html":{}}}],["product.controller",{"_index":1501,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.description",{"_index":1563,"title":{},"body":{"injectables/ProductService.html":{}}}],["product.entity",{"_index":1201,"title":{},"body":{"entities/Plan.html":{}}}],["product.isactive",{"_index":1566,"title":{},"body":{"injectables/ProductService.html":{}}}],["product.name",{"_index":1561,"title":{},"body":{"injectables/ProductService.html":{}}}],["product.service",{"_index":1480,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product.site",{"_index":1805,"title":{},"body":{"entities/Site.html":{}}}],["product/entity/product.entity",{"_index":507,"title":{},"body":{"entities/Category.html":{},"entities/Plan.html":{},"entities/Site.html":{}}}],["product/product.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["productcontroller",{"_index":1453,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productidproduct",{"_index":1698,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691186525496.html":{}}}],["production",{"_index":2278,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":377,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productos",{"_index":1550,"title":{},"body":{"injectables/ProductService.html":{}}}],["productrepository",{"_index":1508,"title":{},"body":{"injectables/ProductService.html":{}}}],["products",{"_index":595,"title":{},"body":{"injectables/CategoryService.html":{},"modules/CommonModule.html":{},"entities/Plan.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"coverage.html":{}}}],["products'})@apiresponse({status",{"_index":1467,"title":{},"body":{"controllers/ProductController.html":{}}}],["productservice",{"_index":1479,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["producttoupdated",{"_index":1557,"title":{},"body":{"injectables/ProductService.html":{}}}],["producttoupdated.description",{"_index":1562,"title":{},"body":{"injectables/ProductService.html":{}}}],["producttoupdated.isactive",{"_index":1565,"title":{},"body":{"injectables/ProductService.html":{}}}],["producttoupdated.name",{"_index":1560,"title":{},"body":{"injectables/ProductService.html":{}}}],["profile",{"_index":2028,"title":{},"body":{"controllers/UserProfileController.html":{}}}],["profile/users.controller.profile",{"_index":2071,"title":{},"body":{"modules/UsersModule.html":{}}}],["profile/users.service.profile",{"_index":2072,"title":{},"body":{"modules/UsersModule.html":{}}}],["progressive",{"_index":2259,"title":{},"body":{"index.html":{}}}],["project",{"_index":2129,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["promise",{"_index":195,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/UsertypeService.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":232,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["prop",{"_index":1906,"title":{},"body":{"classes/Template.html":{}}}],["propaga",{"_index":739,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["properties",{"_index":489,"title":{"properties.html":{}},"body":{"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"classes/Template.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"properties.html":{}}}],["proporcionada",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["proporcionado",{"_index":293,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["proporcionados",{"_index":1384,"title":{},"body":{"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["provide",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":651,"title":{},"body":{"injectables/CategoryService.html":{}}}],["providers",{"_index":149,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["provides",{"_index":14,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["public",{"_index":102,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["public(false",{"_index":117,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["public(true",{"_index":992,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@get('moduleaction/:moduleid/:role')@apioperation({summary",{"_index":62,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["public(undefined)@get('paywallmodule')@apioperation({summary",{"_index":970,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@get('roles/:id')@apioperation({summary",{"_index":52,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["public(undefined)@get('roles/list')@apioperation({summary",{"_index":973,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@get('users/:id')@apioperation({summary",{"_index":976,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@get('users/list')@apioperation({summary",{"_index":979,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@post('paywallmodule')@apioperation({summary",{"_index":958,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@post('token')@apioperation({summary",{"_index":983,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@post('users/create')@apioperation({summary",{"_index":962,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["public(undefined)@put('moduleaction/:moduleid/:role/:isactive')@apioperation({summary",{"_index":76,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["public(undefined)@put('rolemoduleaction/:moduleid/:actionrelationid/:role')@apioperation({summary",{"_index":86,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["public(undefined)@put('users/edit/:id')@apioperation({summary",{"_index":966,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["puedes",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":97,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/TemplateManagerController.html":{}}}],["put(':id",{"_index":139,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/PlansController.html":{}}}],["put(':id')@apioperation({summary",{"_index":92,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/PlansController.html":{}}}],["put(':id/update",{"_index":1283,"title":{},"body":{"controllers/PlansController.html":{}}}],["put(':id/update')@apioperation({summary",{"_index":1255,"title":{},"body":{"controllers/PlansController.html":{}}}],["put('edit/:id",{"_index":1491,"title":{},"body":{"controllers/ProductController.html":{}}}],["put('edit/:id')@apioperation({summary",{"_index":1464,"title":{},"body":{"controllers/ProductController.html":{}}}],["put('moduleaction/:moduleid/:role/:isactive",{"_index":127,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["put('rolemoduleaction/:moduleid/:actionrelationid/:role",{"_index":130,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["put('update",{"_index":1931,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["put('update/:id",{"_index":577,"title":{},"body":{"controllers/CategoryController.html":{}}}],["put('update/:id')@apioperation({summary",{"_index":543,"title":{},"body":{"controllers/CategoryController.html":{}}}],["put('users/edit/:id",{"_index":1012,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["que",{"_index":1551,"title":{},"body":{"injectables/ProductService.html":{}}}],["query",{"_index":538,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["query('limit",{"_index":1276,"title":{},"body":{"controllers/PlansController.html":{}}}],["query('page",{"_index":1275,"title":{},"body":{"controllers/PlansController.html":{}}}],["query(new",{"_index":565,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["querybuilder",{"_index":247,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["querybuilder.andwhere('lower(site.name",{"_index":1894,"title":{},"body":{"injectables/SitesService.html":{}}}],["querybuilder.andwhere('product.idproduct",{"_index":1543,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.andwhere('site.isactive",{"_index":1895,"title":{},"body":{"injectables/SitesService.html":{}}}],["querybuilder.getmany",{"_index":1419,"title":{},"body":{"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["querybuilder.getmanyandcount",{"_index":630,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["querybuilder.getquery",{"_index":1897,"title":{},"body":{"injectables/SitesService.html":{}}}],["querybuilder.getrawmany",{"_index":268,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["querybuilder.getsql",{"_index":628,"title":{},"body":{"injectables/CategoryService.html":{}}}],["querybuilder.skip(skip).take(limit",{"_index":1896,"title":{},"body":{"injectables/SitesService.html":{}}}],["querybuilder.where('lower(plan.duration",{"_index":1417,"title":{},"body":{"injectables/PlansService.html":{}}}],["querybuilder.where('lower(plan.name",{"_index":1414,"title":{},"body":{"injectables/PlansService.html":{}}}],["querybuilder.where('lower(plan.rate",{"_index":1415,"title":{},"body":{"injectables/PlansService.html":{}}}],["querybuilder2",{"_index":1533,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder2.andwhere('product.idproduct",{"_index":1545,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder2.getmany",{"_index":1556,"title":{},"body":{"injectables/ProductService.html":{}}}],["queryresolver",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["queryrunner",{"_index":1672,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["queryrunner.query(`alter",{"_index":1700,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["queryrunner.query(`create",{"_index":1676,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{}}}],["queryrunner.query(`drop",{"_index":1712,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{}}}],["radius",{"_index":2362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rate",{"_index":1156,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["rate.tolowercase",{"_index":1416,"title":{},"body":{"injectables/PlansService.html":{}}}],["raw",{"_index":310,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["read",{"_index":2296,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":115,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{}}}],["realizaste",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["realm",{"_index":934,"title":{},"body":{"injectables/KeycloakConfigService.html":{},"injectables/KeycloakService.html":{}}}],["recomendamos",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["records",{"_index":634,"title":{},"body":{"injectables/CategoryService.html":{}}}],["references",{"_index":1703,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["reflect",{"_index":2243,"title":{},"body":{"dependencies.html":{}}}],["registrado",{"_index":1227,"title":{},"body":{"classes/PlanDto.html":{},"miscellaneous/enumerations.html":{}}}],["registradosinpago",{"_index":1226,"title":{},"body":{"classes/PlanDto.html":{},"miscellaneous/enumerations.html":{}}}],["registrando",{"_index":304,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["registrarte",{"_index":809,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["registration",{"_index":2144,"title":{},"body":{"changelog.html":{}}}],["registro",{"_index":1982,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["registros",{"_index":1524,"title":{},"body":{"injectables/ProductService.html":{}}}],["relacionada",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["relación",{"_index":1537,"title":{},"body":{"injectables/ProductService.html":{}}}],["related",{"_index":59,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["relation",{"_index":89,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["relation's",{"_index":206,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["relation.'})@apiresponse({status",{"_index":87,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["relations",{"_index":194,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{}}}],["relations.entity",{"_index":171,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/RolePaywallModuleActionRelation.html":{}}}],["relations.entity.ts",{"_index":1140,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{},"coverage.html":{}}}],["relations.entity.ts:11",{"_index":1143,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{}}}],["relations.entity.ts:14",{"_index":1144,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{}}}],["relations.entity.ts:8",{"_index":1141,"title":{},"body":{"entities/PaywallModuleActionRelation.html":{}}}],["relationship",{"_index":661,"title":{},"body":{"injectables/CategoryService.html":{}}}],["remove",{"_index":1625,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["remove(@param('id",{"_index":1649,"title":{},"body":{"controllers/RolesController.html":{},"controllers/SitesController.html":{}}}],["remove(id",{"_index":1630,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["removed",{"_index":2149,"title":{},"body":{"changelog.html":{}}}],["removes",{"_index":1662,"title":{},"body":{"injectables/RolesService.html":{},"injectables/SitesService.html":{}}}],["rename",{"_index":1716,"title":{},"body":{"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{}}}],["renewal_rate",{"_index":1185,"title":{},"body":{"entities/Plan.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["renewal_special_rate",{"_index":1187,"title":{},"body":{"entities/Plan.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["renewalrate",{"_index":1157,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{}}}],["renewalspecialrate",{"_index":1158,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{}}}],["repository",{"_index":184,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{},"index.html":{}}}],["repositoy",{"_index":742,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["required",{"_index":533,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["reset",{"_index":154,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"injectables/ChangePasswordMailService.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":715,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["resetpasswordentity",{"_index":700,"title":{"entities/ResetPasswordEntity.html":{}},"body":{"injectables/ChangePasswordMailService.html":{},"modules/MailModule.html":{},"entities/ResetPasswordEntity.html":{},"injectables/ResetPasswordMailService.html":{},"coverage.html":{}}}],["resetpasswordhtml",{"_index":1604,"title":{},"body":{"injectables/ResetPasswordMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordhtml(url",{"_index":1610,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["resetpasswordmailcontroller",{"_index":1094,"title":{"controllers/ResetPasswordMailController.html":{}},"body":{"modules/MailModule.html":{},"controllers/ResetPasswordMailController.html":{},"coverage.html":{}}}],["resetpasswordmailservice",{"_index":1091,"title":{"injectables/ResetPasswordMailService.html":{}},"body":{"modules/MailModule.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"coverage.html":{},"overview.html":{}}}],["resetpasswordrepository",{"_index":1599,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["resolvers",{"_index":445,"title":{},"body":{"modules/AppModule.html":{}}}],["resolves",{"_index":196,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["resource",{"_index":339,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["resourceguard",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":1063,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["response.data",{"_index":1067,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["response.status",{"_index":1079,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["restablecer",{"_index":2393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restablecimiento",{"_index":1609,"title":{},"body":{"injectables/ResetPasswordMailService.html":{},"miscellaneous/variables.html":{}}}],["result",{"_index":83,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["resultmodule",{"_index":273,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["resultmodule).length",{"_index":275,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["results",{"_index":142,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":193,"title":{},"body":{"injectables/AccessModulesService.html":{},"controllers/KeycloakController.html":{},"controllers/SitesController.html":{}}}],["retrieves",{"_index":32,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/SitesService.html":{}}}],["retrieving",{"_index":16,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["return",{"_index":121,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/TemplateManagerController.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"miscellaneous/functions.html":{}}}],["revisar",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rgba(0",{"_index":2367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role",{"_index":54,"title":{"classes/Role.html":{}},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/CreateUserAdminDto.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"injectables/RolesService.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"coverage.html":{}}}],["role's",{"_index":58,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["role.'})@apiresponse({status",{"_index":56,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["role.dto",{"_index":1640,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{}}}],["role.dto.ts",{"_index":841,"title":{},"body":{"classes/CreateRoleDto.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["role_paywall_module",{"_index":1765,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["role_paywall_module_action_relation",{"_index":1762,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{}}}],["roleguard",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["roleid",{"_index":200,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["rolepaywallmodule",{"_index":162,"title":{"entities/RolePaywallModule.html":{}},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/RolePaywallModule.html":{},"coverage.html":{}}}],["rolepaywallmodule.isactive",{"_index":239,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["rolepaywallmoduleactionrelation",{"_index":172,"title":{"entities/RolePaywallModuleActionRelation.html":{}},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/CommonModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["rolepaywallmodulerpo",{"_index":185,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["roles",{"_index":71,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["roles.'})@apiresponse({status",{"_index":72,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["roles.controller",{"_index":1654,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.service",{"_index":1638,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/roles.module",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["rolescontroller",{"_index":1623,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":378,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesservice",{"_index":1637,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["routes",{"_index":15,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["rules",{"_index":491,"title":{},"body":{"entities/Category.html":{},"injectables/CategoryService.html":{},"classes/SetDb1691181176026.html":{}}}],["run",{"_index":2274,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1050,"title":{},"body":{"injectables/KeycloakService.html":{},"dependencies.html":{}}}],["sans",{"_index":2344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedcategory",{"_index":662,"title":{},"body":{"injectables/CategoryService.html":{}}}],["scalable",{"_index":2264,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1915,"title":{},"body":{"classes/Template.html":{},"modules/TemplateManagerModule.html":{}}}],["schemafactory",{"_index":1916,"title":{},"body":{"classes/Template.html":{}}}],["scopes",{"_index":340,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["script",{"_index":2146,"title":{},"body":{"changelog.html":{}}}],["se",{"_index":288,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ProductService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["searching",{"_index":1087,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["secret",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakConfigService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["secure",{"_index":1115,"title":{},"body":{"modules/MailModule.html":{}}}],["seguridad",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selecproduct",{"_index":1505,"title":{},"body":{"injectables/ProductService.html":{}}}],["selecproduct(id",{"_index":1515,"title":{},"body":{"injectables/ProductService.html":{}}}],["select",{"_index":250,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{}}}],["select(['a",{"_index":311,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["selected",{"_index":1569,"title":{},"body":{"injectables/ProductService.html":{}}}],["selectproduct",{"_index":1458,"title":{},"body":{"controllers/ProductController.html":{}}}],["selectproduct(@param('id",{"_index":1496,"title":{},"body":{"controllers/ProductController.html":{}}}],["selectproduct(id",{"_index":1475,"title":{},"body":{"controllers/ProductController.html":{}}}],["selectsite",{"_index":1813,"title":{},"body":{"controllers/SitesController.html":{}}}],["selectsite(@param('id",{"_index":1846,"title":{},"body":{"controllers/SitesController.html":{}}}],["selectsite(id",{"_index":1826,"title":{},"body":{"controllers/SitesController.html":{}}}],["selectsites",{"_index":1856,"title":{},"body":{"injectables/SitesService.html":{}}}],["selectsites(id",{"_index":1871,"title":{},"body":{"injectables/SitesService.html":{}}}],["semantic",{"_index":2134,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":1592,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["sendconfirmationtwofactorauthenticationmail",{"_index":1959,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["sendconfirmationtwofactorauthenticationmail(firstname",{"_index":1964,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["sendconfirmcreateuser",{"_index":772,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["sendconfirmcreateuser(email",{"_index":775,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["sendgrid/mail",{"_index":2209,"title":{},"body":{"dependencies.html":{}}}],["sendmail",{"_index":676,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/ResetPasswordMailController.html":{}}}],["sendmail(@body('mail",{"_index":687,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"controllers/ResetPasswordMailController.html":{}}}],["sendmail(mail",{"_index":677,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"controllers/ResetPasswordMailController.html":{}}}],["sendpasswordchange",{"_index":692,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["sendpasswordchange(mail",{"_index":701,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["sendpasswordreset",{"_index":1596,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["sendpasswordreset(mail",{"_index":1602,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["sendtwofactorauthenticationmail",{"_index":1960,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["sendtwofactorauthenticationmail(mail",{"_index":1966,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["sent",{"_index":1586,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["sequence",{"_index":1733,"title":{},"body":{"classes/SetDb1691515083659.html":{}}}],["serial",{"_index":1678,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{}}}],["serif",{"_index":2345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":2265,"title":{},"body":{"index.html":{}}}],["service/change",{"_index":1107,"title":{},"body":{"modules/MailModule.html":{}}}],["service/confirm",{"_index":764,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"modules/MailModule.html":{}}}],["service/reset",{"_index":1104,"title":{},"body":{"modules/MailModule.html":{},"controllers/ResetPasswordMailController.html":{}}}],["service/two",{"_index":1100,"title":{},"body":{"modules/MailModule.html":{}}}],["servicio",{"_index":318,"title":{},"body":{"injectables/AccessModulesService.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":1665,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"coverage.html":{}}}],["set(params",{"_index":280,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["setdb1691181176026",{"_index":1663,"title":{"classes/SetDb1691181176026.html":{}},"body":{"classes/SetDb1691181176026.html":{},"coverage.html":{}}}],["setdb1691184456498",{"_index":1713,"title":{"classes/SetDb1691184456498.html":{}},"body":{"classes/SetDb1691184456498.html":{},"coverage.html":{}}}],["setdb1691184574917",{"_index":1718,"title":{"classes/SetDb1691184574917.html":{}},"body":{"classes/SetDb1691184574917.html":{},"coverage.html":{}}}],["setdb1691186525496",{"_index":1723,"title":{"classes/SetDb1691186525496.html":{}},"body":{"classes/SetDb1691186525496.html":{},"coverage.html":{}}}],["setdb1691512677390",{"_index":1728,"title":{"classes/SetDb1691512677390.html":{}},"body":{"classes/SetDb1691512677390.html":{},"coverage.html":{}}}],["setdb1691515083659",{"_index":1731,"title":{"classes/SetDb1691515083659.html":{}},"body":{"classes/SetDb1691515083659.html":{},"coverage.html":{}}}],["setdb1691708514379",{"_index":1739,"title":{"classes/SetDb1691708514379.html":{}},"body":{"classes/SetDb1691708514379.html":{},"coverage.html":{}}}],["setdbpaywalmodule1692297610787",{"_index":1747,"title":{"classes/SetDbPaywalmodule1692297610787.html":{}},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"coverage.html":{}}}],["setdbpaywalmodule1692380137673",{"_index":1775,"title":{"classes/SetDbPaywalmodule1692380137673.html":{}},"body":{"classes/SetDbPaywalmodule1692380137673.html":{},"coverage.html":{}}}],["setnewplansfields1692380743605",{"_index":1778,"title":{"classes/SetNewPlansFields1692380743605.html":{}},"body":{"classes/SetNewPlansFields1692380743605.html":{},"coverage.html":{}}}],["setnewplansfields1692815139944",{"_index":1784,"title":{"classes/SetNewPlansFields1692815139944.html":{}},"body":{"classes/SetNewPlansFields1692815139944.html":{},"coverage.html":{}}}],["setnewplansfields1692822538207",{"_index":1788,"title":{"classes/SetNewPlansFields1692822538207.html":{}},"body":{"classes/SetNewPlansFields1692822538207.html":{},"coverage.html":{}}}],["setnewplansfields1692824385127",{"_index":1791,"title":{"classes/SetNewPlansFields1692824385127.html":{}},"body":{"classes/SetNewPlansFields1692824385127.html":{},"coverage.html":{}}}],["setupdaterolmoduleaction",{"_index":27,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["setupdaterolmoduleaction(moduleid",{"_index":84,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["shadow",{"_index":2365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["si",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":2266,"title":{},"body":{"index.html":{}}}],["sido",{"_index":2399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["siguiente",{"_index":813,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["sin",{"_index":1228,"title":{},"body":{"classes/PlanDto.html":{},"injectables/ProductService.html":{},"miscellaneous/enumerations.html":{}}}],["site",{"_index":492,"title":{"entities/Site.html":{}},"body":{"entities/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/SetDb1691181176026.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"coverage.html":{}}}],["site\"(\"idsite",{"_index":1704,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{}}}],["site')@apioperation({summary",{"_index":1819,"title":{},"body":{"controllers/SitesController.html":{}}}],["site.category",{"_index":513,"title":{},"body":{"entities/Category.html":{}}}],["site.category)@joincolumn({name",{"_index":503,"title":{},"body":{"entities/Category.html":{}}}],["site.dto",{"_index":1834,"title":{},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/UpdateSiteDto.html":{}}}],["site.dto.ts",{"_index":844,"title":{},"body":{"classes/CreateSiteDto.html":{},"classes/UpdateSiteDto.html":{},"coverage.html":{}}}],["site.dto.ts:14",{"_index":862,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["site.dto.ts:19",{"_index":851,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["site.dto.ts:24",{"_index":864,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["site.dto.ts:29",{"_index":857,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["site.idsite",{"_index":625,"title":{},"body":{"injectables/CategoryService.html":{}}}],["site.name",{"_index":626,"title":{},"body":{"injectables/CategoryService.html":{}}}],["site.plansproductcategory",{"_index":1315,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["site.plansproductcategory)@joincolumn({name",{"_index":1307,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["site.products",{"_index":1452,"title":{},"body":{"entities/Product.html":{}}}],["site.products)@joincolumn({name",{"_index":1444,"title":{},"body":{"entities/Product.html":{}}}],["siteidsite",{"_index":1696,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691186525496.html":{}}}],["sitename",{"_index":645,"title":{},"body":{"injectables/CategoryService.html":{}}}],["siterepo",{"_index":1860,"title":{},"body":{"injectables/SitesService.html":{}}}],["sites",{"_index":1297,"title":{},"body":{"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["sites.controller",{"_index":1852,"title":{},"body":{"modules/SitesModule.html":{}}}],["sites.service",{"_index":1833,"title":{},"body":{"controllers/SitesController.html":{},"modules/SitesModule.html":{}}}],["sites/entities/site.entity",{"_index":508,"title":{},"body":{"entities/Category.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{}}}],["sites/sites.module",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["sitescontroller",{"_index":1810,"title":{"controllers/SitesController.html":{}},"body":{"controllers/SitesController.html":{},"modules/SitesModule.html":{},"coverage.html":{}}}],["sitesidsite",{"_index":1686,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184574917.html":{}}}],["sitesmodule",{"_index":379,"title":{"modules/SitesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SitesModule.html":{},"modules.html":{},"overview.html":{}}}],["sitesservice",{"_index":1832,"title":{"injectables/SitesService.html":{}},"body":{"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"coverage.html":{},"overview.html":{}}}],["sitio",{"_index":849,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["size",{"_index":2370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":532,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["skip(skip",{"_index":618,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{}}}],["smtp.gmail.com",{"_index":1113,"title":{},"body":{"modules/MailModule.html":{}}}],["solicitado",{"_index":2384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solicitaste",{"_index":2394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"modules/CommonModule.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateRoleDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"controllers/KeycloakController.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"classes/Role.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"classes/UpdateRoleDto.html":{},"classes/UpdateSiteDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"index.html":{}}}],["source.ts",{"_index":2168,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["special_rate",{"_index":1189,"title":{},"body":{"entities/Plan.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["special_rate_enabled",{"_index":1177,"title":{},"body":{"entities/Plan.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["specialrate",{"_index":1159,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{}}}],["specific",{"_index":55,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["specified",{"_index":50,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["sponsors",{"_index":2291,"title":{},"body":{"index.html":{}}}],["src/**/*.entity.ts",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../confirm",{"_index":2330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":2329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enviroments.ts",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash",{"_index":2257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../i18n.generated.ts",{"_index":2325,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":2256,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.dto.ts",{"_index":2252,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../reset",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../template.schema.ts",{"_index":2326,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../two",{"_index":2333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../usertype.dto.ts",{"_index":2253,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/access",{"_index":6,"title":{},"body":{"controllers/AccessModulesController.html":{},"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":322,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:21",{"_index":362,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:27",{"_index":364,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:34",{"_index":334,"title":{},"body":{"classes/ApiException.html":{}}}],["src/app.controller.ts:38",{"_index":336,"title":{},"body":{"classes/ApiException.html":{}}}],["src/app.controller.ts:40",{"_index":330,"title":{},"body":{"classes/ApiException.html":{}}}],["src/app.module.ts",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":452,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":453,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/keycloak",{"_index":923,"title":{},"body":{"injectables/KeycloakConfigService.html":{},"coverage.html":{}}}],["src/category/category.controller.ts",{"_index":516,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:43",{"_index":523,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:54",{"_index":526,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:70",{"_index":536,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:94",{"_index":545,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.module.ts",{"_index":582,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":586,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:119",{"_index":600,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:19",{"_index":592,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:38",{"_index":593,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:59",{"_index":597,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:7",{"_index":589,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/entity/category.entity",{"_index":1502,"title":{},"body":{"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["src/category/entity/category.entity.ts",{"_index":488,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/category/entity/category.entity.ts:16",{"_index":496,"title":{},"body":{"entities/Category.html":{}}}],["src/category/entity/category.entity.ts:20",{"_index":505,"title":{},"body":{"entities/Category.html":{}}}],["src/category/entity/category.entity.ts:24",{"_index":501,"title":{},"body":{"entities/Category.html":{}}}],["src/category/entity/category.entity.ts:27",{"_index":497,"title":{},"body":{"entities/Category.html":{}}}],["src/category/entity/category.entity.ts:30",{"_index":494,"title":{},"body":{"entities/Category.html":{}}}],["src/category/entity/category.entity.ts:33",{"_index":502,"title":{},"body":{"entities/Category.html":{}}}],["src/common/common.module",{"_index":1023,"title":{},"body":{"modules/KeycloakModule.html":{}}}],["src/common/common.module.ts",{"_index":744,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/entity/paywal",{"_index":166,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"entities/PaywallModuleAction.html":{},"coverage.html":{}}}],["src/common/entity/paywall",{"_index":169,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"entities/PaywallModuleActionRelation.html":{},"coverage.html":{}}}],["src/common/entity/paywallmodule.entity",{"_index":161,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"modules/KeycloakModule.html":{},"injectables/KeycloakService.html":{}}}],["src/common/entity/paywallmodule.entity.ts",{"_index":1125,"title":{},"body":{"entities/PaywallModule.html":{},"coverage.html":{}}}],["src/common/entity/paywallmodule.entity.ts:12",{"_index":1133,"title":{},"body":{"entities/PaywallModule.html":{}}}],["src/common/entity/paywallmodule.entity.ts:15",{"_index":1132,"title":{},"body":{"entities/PaywallModule.html":{}}}],["src/common/entity/paywallmodule.entity.ts:6",{"_index":1134,"title":{},"body":{"entities/PaywallModule.html":{}}}],["src/common/entity/paywallmodule.entity.ts:9",{"_index":1135,"title":{},"body":{"entities/PaywallModule.html":{}}}],["src/common/entity/plans",{"_index":1292,"title":{},"body":{"modules/PlansModule.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["src/common/entity/role",{"_index":163,"title":{},"body":{"modules/AccessModulesModule.html":{},"injectables/AccessModulesService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"coverage.html":{}}}],["src/database/data",{"_index":2167,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":897,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migrations/*.ts",{"_index":2339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/database/migrations/1691181176026",{"_index":1664,"title":{},"body":{"classes/SetDb1691181176026.html":{},"coverage.html":{}}}],["src/database/migrations/1691184456498",{"_index":1714,"title":{},"body":{"classes/SetDb1691184456498.html":{},"coverage.html":{}}}],["src/database/migrations/1691184574917",{"_index":1719,"title":{},"body":{"classes/SetDb1691184574917.html":{},"coverage.html":{}}}],["src/database/migrations/1691186525496",{"_index":1724,"title":{},"body":{"classes/SetDb1691186525496.html":{},"coverage.html":{}}}],["src/database/migrations/1691512677390",{"_index":1729,"title":{},"body":{"classes/SetDb1691512677390.html":{},"coverage.html":{}}}],["src/database/migrations/1691515083659",{"_index":1732,"title":{},"body":{"classes/SetDb1691515083659.html":{},"coverage.html":{}}}],["src/database/migrations/1691708514379",{"_index":1740,"title":{},"body":{"classes/SetDb1691708514379.html":{},"coverage.html":{}}}],["src/database/migrations/1692297610787",{"_index":1748,"title":{},"body":{"classes/SetDbPaywalmodule1692297610787.html":{},"coverage.html":{}}}],["src/database/migrations/1692380137673",{"_index":1776,"title":{},"body":{"classes/SetDbPaywalmodule1692380137673.html":{},"coverage.html":{}}}],["src/database/migrations/1692380743605",{"_index":1779,"title":{},"body":{"classes/SetNewPlansFields1692380743605.html":{},"coverage.html":{}}}],["src/database/migrations/1692815139944",{"_index":1785,"title":{},"body":{"classes/SetNewPlansFields1692815139944.html":{},"coverage.html":{}}}],["src/database/migrations/1692822538207",{"_index":1789,"title":{},"body":{"classes/SetNewPlansFields1692822538207.html":{},"coverage.html":{}}}],["src/database/migrations/1692824385127",{"_index":1792,"title":{},"body":{"classes/SetNewPlansFields1692824385127.html":{},"coverage.html":{}}}],["src/entities/category.entity.ts",{"_index":506,"title":{},"body":{"entities/Category.html":{}}}],["src/entities/plans_products_categories.entity.ts",{"_index":1311,"title":{},"body":{"entities/PlansProductCategory.html":{}}}],["src/enviroments.ts",{"_index":2172,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/i18n/generated/i18n.generated",{"_index":868,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["src/i18n/generated/i18n.generated.ts",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/typealiases.html":{}}}],["src/keycloak/keycloak.controller.ts",{"_index":948,"title":{},"body":{"controllers/KeycloakController.html":{},"coverage.html":{}}}],["src/keycloak/keycloak.controller.ts:108",{"_index":969,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:125",{"_index":977,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:27",{"_index":985,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:41",{"_index":963,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:56",{"_index":981,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:69",{"_index":974,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:82",{"_index":959,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.controller.ts:93",{"_index":971,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["src/keycloak/keycloak.module.ts",{"_index":1019,"title":{},"body":{"modules/KeycloakModule.html":{}}}],["src/keycloak/keycloak.service.ts",{"_index":1024,"title":{},"body":{"injectables/KeycloakService.html":{},"coverage.html":{}}}],["src/keycloak/keycloak.service.ts:108",{"_index":1040,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:11",{"_index":1047,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:12",{"_index":1048,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:13",{"_index":1032,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:133",{"_index":1033,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:146",{"_index":1039,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:162",{"_index":1036,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:196",{"_index":1038,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:31",{"_index":1043,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:57",{"_index":1034,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/keycloak/keycloak.service.ts:83",{"_index":1041,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["src/mail/controller/change",{"_index":673,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"coverage.html":{}}}],["src/mail/controller/confirm",{"_index":753,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"coverage.html":{}}}],["src/mail/controller/reset",{"_index":1571,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"coverage.html":{}}}],["src/mail/entitys/change",{"_index":665,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"injectables/ChangePasswordMailService.html":{},"coverage.html":{}}}],["src/mail/entitys/reset",{"_index":1570,"title":{},"body":{"entities/ResetPasswordEntity.html":{},"coverage.html":{}}}],["src/mail/mail.module.ts",{"_index":1093,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/service/change",{"_index":684,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"coverage.html":{}}}],["src/mail/service/confirm",{"_index":770,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"coverage.html":{}}}],["src/mail/service/reset",{"_index":1594,"title":{},"body":{"injectables/ResetPasswordMailService.html":{},"coverage.html":{}}}],["src/mail/service/two",{"_index":1957,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{}}}],["src/mail/template/confirm",{"_index":705,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mail/template/reset",{"_index":2178,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mail/template/two",{"_index":2180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2183,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/plans/dto/create/plan.dto.ts",{"_index":1206,"title":{},"body":{"classes/PlanDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/plans/dto/create/plan.dto.ts:11",{"_index":1214,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:14",{"_index":1218,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:17",{"_index":1220,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:20",{"_index":1217,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:24",{"_index":1211,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:28",{"_index":1213,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:32",{"_index":1216,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/plan.dto.ts:36",{"_index":1215,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/plans/dto/create/usertype.dto.ts",{"_index":2254,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/plans/dto/update/plan",{"_index":1987,"title":{},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/plans/entity/plan.entity.ts",{"_index":1148,"title":{},"body":{"entities/Plan.html":{},"coverage.html":{}}}],["src/plans/entity/plan.entity.ts:16",{"_index":1174,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:19",{"_index":1175,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:22",{"_index":1168,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:25",{"_index":1179,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:28",{"_index":1198,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:31",{"_index":1176,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:34",{"_index":1193,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:37",{"_index":1194,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:40",{"_index":1171,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:43",{"_index":1184,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:46",{"_index":1186,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:49",{"_index":1178,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:52",{"_index":1190,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:55",{"_index":1188,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:58",{"_index":1192,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:61",{"_index":1173,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:64",{"_index":1167,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:67",{"_index":1197,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/entity/plan.entity.ts:70",{"_index":1182,"title":{},"body":{"entities/Plan.html":{}}}],["src/plans/plans.controller.ts",{"_index":1233,"title":{},"body":{"controllers/PlansController.html":{},"coverage.html":{}}}],["src/plans/plans.controller.ts:104",{"_index":1250,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:116",{"_index":1256,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:131",{"_index":1251,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:40",{"_index":1239,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:53",{"_index":1245,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:64",{"_index":1244,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:76",{"_index":1242,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.controller.ts:92",{"_index":1249,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/plans/plans.module.ts",{"_index":1289,"title":{},"body":{"modules/PlansModule.html":{}}}],["src/plans/plans.service.ts",{"_index":1317,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{}}}],["src/plans/plans.service.ts:155",{"_index":1329,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:172",{"_index":1326,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:199",{"_index":1334,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:20",{"_index":1325,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:217",{"_index":1336,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:247",{"_index":1330,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:286",{"_index":1333,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:8",{"_index":1322,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/plans/plans.service.ts:85",{"_index":1338,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/product/dto/product.dto.ts",{"_index":821,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/product/dto/product.dto.ts:14",{"_index":831,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/product/dto/product.dto.ts:19",{"_index":823,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/product/dto/product.dto.ts:24",{"_index":829,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/product/dto/product.dto.ts:29",{"_index":826,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/product/dto/product.dto.ts:34",{"_index":825,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/product/entity/product.entity.ts",{"_index":1425,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/product/entity/product.entity.ts:13",{"_index":1443,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:20",{"_index":1435,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:24",{"_index":1441,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:28",{"_index":1431,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:36",{"_index":1449,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:40",{"_index":1445,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:44",{"_index":1427,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entity/product.entity.ts:9",{"_index":1439,"title":{},"body":{"entities/Product.html":{}}}],["src/product/product.controller.ts",{"_index":1454,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:36",{"_index":1462,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:50",{"_index":1469,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:56",{"_index":1474,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:66",{"_index":1473,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:73",{"_index":1466,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:80",{"_index":1478,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":1500,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service.ts",{"_index":1504,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:115",{"_index":1511,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:142",{"_index":1516,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:16",{"_index":1513,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:42",{"_index":1510,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:55",{"_index":1512,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:63",{"_index":1514,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:9",{"_index":1507,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/roles/dto/create",{"_index":840,"title":{},"body":{"classes/CreateRoleDto.html":{},"coverage.html":{}}}],["src/roles/dto/update",{"_index":1999,"title":{},"body":{"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":1613,"title":{},"body":{"classes/Role.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts",{"_index":1624,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:25",{"_index":1627,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:30",{"_index":1628,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:35",{"_index":1629,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:40",{"_index":1635,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:45",{"_index":1632,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":1653,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":1655,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:11",{"_index":1657,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:15",{"_index":1658,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:19",{"_index":1660,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:23",{"_index":1659,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:7",{"_index":1656,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/sites/dto/create",{"_index":843,"title":{},"body":{"classes/CreateSiteDto.html":{},"coverage.html":{}}}],["src/sites/dto/update",{"_index":2002,"title":{},"body":{"classes/UpdateSiteDto.html":{},"coverage.html":{}}}],["src/sites/entities/site.entity.ts",{"_index":1794,"title":{},"body":{"entities/Site.html":{},"coverage.html":{}}}],["src/sites/entities/site.entity.ts:16",{"_index":1799,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:19",{"_index":1802,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:22",{"_index":1798,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:25",{"_index":1809,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:28",{"_index":1800,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:31",{"_index":1797,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:34",{"_index":1808,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:37",{"_index":1795,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:40",{"_index":1804,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/entities/site.entity.ts:43",{"_index":1806,"title":{},"body":{"entities/Site.html":{}}}],["src/sites/sites.controller.ts",{"_index":1811,"title":{},"body":{"controllers/SitesController.html":{},"coverage.html":{}}}],["src/sites/sites.controller.ts:102",{"_index":1825,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:108",{"_index":1827,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:39",{"_index":1815,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:50",{"_index":1821,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:56",{"_index":1820,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:62",{"_index":1822,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:77",{"_index":1823,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.controller.ts:90",{"_index":1830,"title":{},"body":{"controllers/SitesController.html":{}}}],["src/sites/sites.module.ts",{"_index":1850,"title":{},"body":{"modules/SitesModule.html":{}}}],["src/sites/sites.service.ts",{"_index":1855,"title":{},"body":{"injectables/SitesService.html":{},"coverage.html":{}}}],["src/sites/sites.service.ts:103",{"_index":1867,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:12",{"_index":1859,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:121",{"_index":1866,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:27",{"_index":1861,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:38",{"_index":1865,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:52",{"_index":1868,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:68",{"_index":1873,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:83",{"_index":1870,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/sites/sites.service.ts:87",{"_index":1872,"title":{},"body":{"injectables/SitesService.html":{}}}],["src/template",{"_index":1900,"title":{},"body":{"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/dto/create",{"_index":873,"title":{},"body":{"classes/CreateUserAdminDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2005,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":710,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2012,"title":{},"body":{"entities/UserAdminEntity.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:12",{"_index":2023,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:15",{"_index":2020,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:18",{"_index":2025,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":2024,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":2017,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":2021,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":2022,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:33",{"_index":2015,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:6",{"_index":2019,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/entities/user.entity.ts:9",{"_index":2018,"title":{},"body":{"entities/UserAdminEntity.html":{}}}],["src/users/profile/users.controller.profile.ts",{"_index":2027,"title":{},"body":{"controllers/UserProfileController.html":{},"coverage.html":{}}}],["src/users/profile/users.controller.profile.ts:24",{"_index":2029,"title":{},"body":{"controllers/UserProfileController.html":{}}}],["src/users/profile/users.service.profile.ts",{"_index":2035,"title":{},"body":{"injectables/UserProfileService.html":{},"coverage.html":{}}}],["src/users/profile/users.service.profile.ts:15",{"_index":2041,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["src/users/profile/users.service.profile.ts:9",{"_index":2038,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["src/users/users.controller.ts",{"_index":2057,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:16",{"_index":2061,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2069,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":2073,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":2075,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":2074,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/usertype/dto/usertype.dto.ts",{"_index":2053,"title":{},"body":{"classes/UserTypeDto.html":{},"coverage.html":{}}}],["src/usertype/dto/usertype.dto.ts:8",{"_index":2055,"title":{},"body":{"classes/UserTypeDto.html":{}}}],["src/usertype/entity/usertype.entity.ts",{"_index":2048,"title":{},"body":{"entities/UserType.html":{},"coverage.html":{}}}],["src/usertype/entity/usertype.entity.ts:6",{"_index":2050,"title":{},"body":{"entities/UserType.html":{}}}],["src/usertype/entity/usertype.entity.ts:9",{"_index":2049,"title":{},"body":{"entities/UserType.html":{}}}],["src/usertype/usertype.controller.ts",{"_index":2097,"title":{},"body":{"controllers/UsertypeController.html":{},"coverage.html":{}}}],["src/usertype/usertype.controller.ts:11",{"_index":2100,"title":{},"body":{"controllers/UsertypeController.html":{}}}],["src/usertype/usertype.controller.ts:16",{"_index":2101,"title":{},"body":{"controllers/UsertypeController.html":{}}}],["src/usertype/usertype.module.ts",{"_index":2110,"title":{},"body":{"modules/UsertypeModule.html":{}}}],["src/usertype/usertype.service.ts",{"_index":2114,"title":{},"body":{"injectables/UsertypeService.html":{},"coverage.html":{}}}],["src/usertype/usertype.service.ts:11",{"_index":2118,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["src/usertype/usertype.service.ts:20",{"_index":2119,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["src/usertype/usertype.service.ts:7",{"_index":2116,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["src/utils/hash",{"_index":2078,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stag",{"_index":2389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stag.env",{"_index":2390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":2275,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2277,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2279,"title":{},"body":{"index.html":{}}}],["start_date",{"_index":1191,"title":{},"body":{"entities/Plan.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["startdate",{"_index":1160,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{}}}],["started",{"_index":2125,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starter",{"_index":2268,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2156,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":53,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/ProductController.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692815139944.html":{}}}],["statuscode",{"_index":605,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/ProductService.html":{}}}],["stay",{"_index":2299,"title":{},"body":{"index.html":{}}}],["string",{"_index":40,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/Category.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"entities/PlansProductCategory.html":{},"entities/Product.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":638,"title":{},"body":{"injectables/CategoryService.html":{}}}],["su",{"_index":1976,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["subject",{"_index":728,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["subquery",{"_index":264,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["success",{"_index":35,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/KeycloakController.html":{}}}],["successfully",{"_index":1380,"title":{},"body":{"injectables/PlansService.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{}}}],["summary",{"_index":119,"title":{},"body":{"controllers/AccessModulesController.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{},"controllers/UsersController.html":{}}}],["super(key",{"_index":361,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["support",{"_index":1327,"title":{},"body":{"injectables/PlansService.html":{},"index.html":{},"modules.html":{}}}],["suscrito",{"_index":1223,"title":{},"body":{"classes/PlanDto.html":{},"miscellaneous/enumerations.html":{}}}],["svg",{"_index":2310,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":554,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{},"dependencies.html":{}}}],["synchronize",{"_index":917,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["tabla",{"_index":1538,"title":{},"body":{"injectables/ProductService.html":{}}}],["table",{"_index":1677,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2196,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":557,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/KeycloakController.html":{},"controllers/PlansController.html":{}}}],["tags",{"_index":1905,"title":{},"body":{"classes/Template.html":{}}}],["take",{"_index":1405,"title":{},"body":{"injectables/PlansService.html":{}}}],["take(limit",{"_index":619,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{}}}],["te",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["template",{"_index":421,"title":{"classes/Template.html":{}},"body":{"modules/AppModule.html":{},"classes/Template.html":{},"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"coverage.html":{}}}],["template.name",{"_index":1947,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["template/reset",{"_index":1605,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["template/two",{"_index":1969,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["templatedocument",{"_index":1919,"title":{},"body":{"classes/Template.html":{},"injectables/TemplateManagerService.html":{},"miscellaneous/typealiases.html":{}}}],["templateexist",{"_index":1945,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["templatemanagercontroller",{"_index":1920,"title":{"controllers/TemplateManagerController.html":{}},"body":{"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"coverage.html":{}}}],["templatemanagermodule",{"_index":420,"title":{"modules/TemplateManagerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TemplateManagerModule.html":{},"modules.html":{},"overview.html":{}}}],["templatemanagerservice",{"_index":1923,"title":{"injectables/TemplateManagerService.html":{}},"body":{"controllers/TemplateManagerController.html":{},"modules/TemplateManagerModule.html":{},"injectables/TemplateManagerService.html":{},"coverage.html":{},"overview.html":{}}}],["templatemodel",{"_index":1943,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["templates",{"_index":1954,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["templatesaved",{"_index":1952,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["test",{"_index":2282,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2285,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2284,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2281,"title":{},"body":{"index.html":{}}}],["text",{"_index":1689,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"entities/Site.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":2290,"title":{},"body":{"index.html":{}}}],["this._args",{"_index":360,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["this.accessmodulesservice.findall",{"_index":135,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.findone(+id",{"_index":138,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.getmodulesstatusbyrole(id",{"_index":122,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.getpaywallmoduleaction(moduleid",{"_index":126,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.getrolepaywallmodulle(2",{"_index":134,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.getupdatepaywallmoduleaction",{"_index":129,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.setupdaterolmoduleaction",{"_index":132,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.accessmodulesservice.update(+id",{"_index":141,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["this.appservice.gethello",{"_index":352,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["this.authserverurl",{"_index":1051,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.authserverurl}/admin/realms/${this.realm}/clients/${this.clientidnumber}/roles",{"_index":1074,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.authserverurl}/admin/realms/${this.realm}/users",{"_index":1072,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.authserverurl}/admin/realms/${this.realm}/users/${id",{"_index":1077,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.authserverurl}/realms/${this.realm}/protocol/openid",{"_index":1065,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.categoryrepository",{"_index":612,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.createquerybuilder('category",{"_index":1534,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.categoryrepository.find",{"_index":608,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":648,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save",{"_index":663,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save(category",{"_index":604,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.createcategory(body",{"_index":561,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":562,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findallwithpaginationandfilter",{"_index":576,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.updatecategory(categoryid",{"_index":579,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.changepasswordmailservice.sendpasswordchange(mail",{"_index":689,"title":{},"body":{"controllers/ChangePasswordMailController.html":{}}}],["this.changepasswordrepository.save(resetpasswordentity",{"_index":743,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["this.clientidnumber",{"_index":1055,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.configservice.get('keycloak_auth_server_url",{"_index":1052,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.configservice.get('keycloak_client_id_number",{"_index":1056,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.configservice.get('keycloak_realm",{"_index":1054,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.confirmcreateuserservice.sendconfirmcreateuser",{"_index":769,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["this.createchangepassword(changepasswordentity",{"_index":733,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["this.createusertoken(resetpasswordentity",{"_index":1611,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["this.entitymanager",{"_index":248,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.getmoduleactionswithrelations(moduleid",{"_index":246,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.getqueryrolmodule(moduleid",{"_index":274,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.getqueryrolmoduleaction",{"_index":296,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.getqueryrolmoduleaction(moduleid",{"_index":303,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.httpservice.get",{"_index":1073,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.httpservice.get(url",{"_index":1083,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.httpservice.post",{"_index":1064,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.httpservice.put(url",{"_index":1078,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.i18n.t('validation.is_string",{"_index":1879,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.keycloakservice.createpaywallmodule(paywallmodule",{"_index":1009,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.createuser(user",{"_index":999,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.edituser(tokenaccess",{"_index":1013,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.finduser(tokenaccess",{"_index":1015,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.listpaywallmodules",{"_index":1011,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.listroles(tokenaccess",{"_index":1006,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.listusers(tokenaccess",{"_index":1003,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.keycloakservice.logintoken(credentials",{"_index":996,"title":{},"body":{"controllers/KeycloakController.html":{}}}],["this.mailerservice.sendmail",{"_index":727,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["this.message",{"_index":359,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["this.paywallmoduleactionrelation.findone",{"_index":308,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.paywallmodulerepository.find",{"_index":1076,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.paywallmodulerepository.save(paywallmodule",{"_index":1075,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.paywallmodulerpo.find",{"_index":230,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.paywallmodulerpo.findone",{"_index":286,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.planrepository",{"_index":1423,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.count",{"_index":1403,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.createquerybuilder('plan",{"_index":1413,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.find",{"_index":1401,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.findandcount",{"_index":1404,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.findone",{"_index":1342,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.save(planedited",{"_index":1362,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.planrepository.save(plantoupdate",{"_index":1393,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.plansproductcategoryrepository.save(newcategory",{"_index":1400,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.plansproductcategoryrepository.save(newitems",{"_index":1379,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.plansservice.create(planwithdefaultversion",{"_index":1270,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.findall(page",{"_index":1279,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.findallplans",{"_index":1271,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.findbyfilter(query",{"_index":1281,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.findbyfilterandpagination(query",{"_index":1273,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.findone(id",{"_index":1282,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.updateisactive(id",{"_index":1286,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.plansservice.updateplan(id",{"_index":1284,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.productrepository",{"_index":1518,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.createquerybuilder('product",{"_index":1532,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.find",{"_index":1527,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.findone",{"_index":1558,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.save(product",{"_index":1526,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.save(producttoupdated",{"_index":1568,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productservice.createproduct(createproductdto",{"_index":1486,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.editproduct(product",{"_index":1493,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findall",{"_index":1487,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findallwithpaginationandfilter(query",{"_index":1488,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.findbyfilter(query",{"_index":1490,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.selecproduct(id",{"_index":1497,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.realm",{"_index":1053,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["this.resetpasswordmailservice.sendpasswordreset(mail",{"_index":1585,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["this.resetpasswordrepository.save(resetpasswordentity",{"_index":1612,"title":{},"body":{"injectables/ResetPasswordMailService.html":{}}}],["this.rolepaywallmoduleactionrelation.insert(paramsinsert",{"_index":309,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.rolepaywallmodulerpo.find",{"_index":319,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.rolepaywallmodulerpo.findone",{"_index":234,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.rolepaywallmodulerpo.insert(paramsinsert)).raw",{"_index":295,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["this.rolesservice.create(createroledto",{"_index":1645,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findall",{"_index":1646,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":1647,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.remove(+id",{"_index":1650,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.update(+id",{"_index":1648,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.siterepo",{"_index":1889,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.createquerybuilder('site",{"_index":1893,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.delete(id",{"_index":1887,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.find",{"_index":1878,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.findone",{"_index":1883,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.merge(site",{"_index":1885,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.save(createsitedto",{"_index":1877,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.siterepo.save(site",{"_index":1886,"title":{},"body":{"injectables/SitesService.html":{}}}],["this.sitesservice.create(createsitedto",{"_index":1837,"title":{},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["this.sitesservice.findall",{"_index":1838,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.sitesservice.findallwithpaginationandfilter(query",{"_index":1841,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.sitesservice.findbyfilter(query",{"_index":1840,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.sitesservice.findone(+id",{"_index":1842,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.sitesservice.remove(id",{"_index":1845,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.sitesservice.selectsites(id",{"_index":1847,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.sitesservice.update(+id",{"_index":1843,"title":{},"body":{"controllers/SitesController.html":{}}}],["this.templatemanagerservice.create(body",{"_index":1926,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["this.templatemanagerservice.findall",{"_index":1928,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["this.templatemanagerservice.findone(id",{"_index":1930,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["this.templatemanagerservice.update(id",{"_index":1932,"title":{},"body":{"controllers/TemplateManagerController.html":{}}}],["this.templatemodel(template",{"_index":1951,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["this.templatemodel.find",{"_index":1955,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["this.templatemodel.findbyid(id",{"_index":1956,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["this.templatemodel.findone",{"_index":1946,"title":{},"body":{"injectables/TemplateManagerService.html":{}}}],["this.userprofileservice.updatepassword(+id",{"_index":2034,"title":{},"body":{"controllers/UserProfileController.html":{}}}],["this.userrepo.create",{"_index":2094,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.findone",{"_index":2081,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.findoneby",{"_index":2043,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["this.userrepo.save(newuser",{"_index":2095,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.save(user",{"_index":2047,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["this.userrepository.findone",{"_index":720,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["this.userrepository.save(user",{"_index":796,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":2066,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usertyperepository.find",{"_index":2123,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["this.usertyperepository.save(usertype",{"_index":2122,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["this.usertypeservice.create(usertype",{"_index":2106,"title":{},"body":{"controllers/UsertypeController.html":{}}}],["this.usertypeservice.findusertype",{"_index":2107,"title":{},"body":{"controllers/UsertypeController.html":{}}}],["throw",{"_index":243,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{}}}],["throws",{"_index":1881,"title":{},"body":{"injectables/SitesService.html":{}}}],["time",{"_index":1161,"title":{},"body":{"entities/Plan.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["timestamp",{"_index":1129,"title":{},"body":{"entities/PaywallModule.html":{},"entities/Plan.html":{},"entities/Product.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{}}}],["timestamps",{"_index":1863,"title":{},"body":{"injectables/SitesService.html":{}}}],["timestamptz",{"_index":1796,"title":{},"body":{"entities/Site.html":{}}}],["token",{"_index":668,"title":{},"body":{"entities/ChangePasswordEntity.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/ResetPasswordEntity.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{}}}],["token.slice",{"_index":725,"title":{},"body":{"injectables/ChangePasswordMailService.html":{}}}],["tokenaccess",{"_index":961,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{}}}],["tokenvalidation",{"_index":930,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["tokenvalidation.offline",{"_index":946,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["totalcategory",{"_index":629,"title":{},"body":{"injectables/CategoryService.html":{}}}],["totalpages",{"_index":631,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/SitesService.html":{}}}],["totalplans",{"_index":1402,"title":{},"body":{"injectables/PlansService.html":{}}}],["totalproducts",{"_index":1521,"title":{},"body":{"injectables/ProductService.html":{}}}],["totalsites",{"_index":1898,"title":{},"body":{"injectables/SitesService.html":{}}}],["touch",{"_index":2300,"title":{},"body":{"index.html":{}}}],["transform",{"_index":566,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["transformer",{"_index":2218,"title":{},"body":{"dependencies.html":{}}}],["translate",{"_index":354,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["translation",{"_index":325,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{}}}],["transport",{"_index":1112,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":240,"title":{},"body":{"injectables/AccessModulesService.html":{},"modules/AppModule.html":{},"controllers/CategoryController.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakConfigService.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"controllers/PlansController.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"classes/SetDb1691181176026.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"entities/UserAdminEntity.html":{}}}],["true})@apiproperty({description",{"_index":1434,"title":{},"body":{"entities/Product.html":{}}}],["try",{"_index":226,"title":{},"body":{"injectables/AccessModulesService.html":{},"injectables/CategoryService.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/KeycloakService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UsertypeService.html":{}}}],["tu",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfirmCreateUserService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":2306,"title":{},"body":{"index.html":{}}}],["two",{"_index":1974,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["twofactorauthconfirmedhtml",{"_index":1972,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["twofactorauthconfirmedhtml(email",{"_index":1985,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["twofactorauthenticationmailservice",{"_index":1092,"title":{"injectables/TwoFactorAuthenticationMailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{},"overview.html":{}}}],["twofactorauthhtml",{"_index":1968,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["twofactorauthhtml(mail",{"_index":1975,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["type",{"_index":48,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"classes/ApiException.html":{},"controllers/AppController.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"modules/DatabaseModule.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/ResetPasswordMailService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/Template.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"classes/UpdatePlanDto.html":{},"entities/UserAdminEntity.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/UsertypeController.html":{},"injectables/UsertypeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2322,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeduration",{"_index":1162,"title":{},"body":{"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{}}}],["typeorm",{"_index":217,"title":{},"body":{"injectables/AccessModulesService.html":{},"entities/Category.html":{},"injectables/CategoryService.html":{},"entities/ChangePasswordEntity.html":{},"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"injectables/KeycloakService.html":{},"entities/PaywallModule.html":{},"entities/PaywallModuleAction.html":{},"entities/PaywallModuleActionRelation.html":{},"entities/Plan.html":{},"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/ResetPasswordEntity.html":{},"injectables/ResetPasswordMailService.html":{},"entities/RolePaywallModule.html":{},"entities/RolePaywallModuleActionRelation.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"entities/Site.html":{},"modules/SitesModule.html":{},"injectables/SitesService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"entities/UserAdminEntity.html":{},"injectables/UserProfileService.html":{},"entities/UserType.html":{},"classes/UserTypeDto.html":{},"injectables/UsersService.html":{},"injectables/UsertypeService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":158,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/CategoryModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/SitesModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{}}}],["typeormmodule.forfeature",{"_index":585,"title":{},"body":{"modules/CategoryModule.html":{},"modules/CommonModule.html":{},"modules/KeycloakModule.html":{},"modules/PlansModule.html":{}}}],["typeormmodule.forfeature([changepasswordentity",{"_index":1121,"title":{},"body":{"modules/MailModule.html":{}}}],["typeormmodule.forfeature([paywallmodule",{"_index":174,"title":{},"body":{"modules/AccessModulesModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1503,"title":{},"body":{"modules/ProductModule.html":{}}}],["typeormmodule.forfeature([resetpasswordentity",{"_index":1119,"title":{},"body":{"modules/MailModule.html":{}}}],["typeormmodule.forfeature([site",{"_index":1854,"title":{},"body":{"modules/SitesModule.html":{}}}],["typeormmodule.forfeature([useradminentity",{"_index":1120,"title":{},"body":{"modules/MailModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([usertype",{"_index":2113,"title":{},"body":{"modules/UsertypeModule.html":{}}}],["typeormmodule.forrootasync",{"_index":907,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/passport",{"_index":2211,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1581,"title":{},"body":{"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"index.html":{}}}],["typesoutputpath",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":2247,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":736,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["una",{"_index":2091,"title":{},"body":{"injectables/UsersService.html":{}}}],["undefined",{"_index":1468,"title":{},"body":{"controllers/ProductController.html":{}}}],["undefined})@apiproperty({description",{"_index":860,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["undefined})@isnotempty({message",{"_index":859,"title":{},"body":{"classes/CreateSiteDto.html":{}}}],["underline",{"_index":2380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":1437,"title":{},"body":{"entities/Product.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"entities/Site.html":{},"entities/UserAdminEntity.html":{}}}],["unit",{"_index":2280,"title":{},"body":{"index.html":{}}}],["unión",{"_index":1421,"title":{},"body":{"injectables/PlansService.html":{}}}],["unknown",{"_index":682,"title":{},"body":{"controllers/ChangePasswordMailController.html":{},"injectables/ChangePasswordMailService.html":{},"controllers/PlansController.html":{},"controllers/ResetPasswordMailController.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UserProfileService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":2321,"title":{},"body":{"properties.html":{}}}],["unlimited",{"_index":1298,"title":{},"body":{"entities/PlansProductCategory.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{}}}],["unprotected",{"_index":341,"title":{},"body":{"classes/ApiException.html":{},"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/ChangePasswordMailController.html":{},"controllers/ConfirmCreateUserController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/ResetPasswordMailController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/UserProfileController.html":{},"controllers/UsersController.html":{},"controllers/UsertypeController.html":{}}}],["unreleased",{"_index":2136,"title":{},"body":{"changelog.html":{}}}],["unused",{"_index":1583,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["up",{"_index":1669,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/UsersController.html":{}}}],["up')@apioperation({summary",{"_index":2060,"title":{},"body":{"controllers/UsersController.html":{}}}],["up(queryrunner",{"_index":1674,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{}}}],["update",{"_index":28,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"entities/Product.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetNewPlansFields1692824385127.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"controllers/UserProfileController.html":{}}}],["update(@param('id",{"_index":140,"title":{},"body":{"controllers/AccessModulesController.html":{},"controllers/RolesController.html":{},"controllers/SitesController.html":{},"controllers/TemplateManagerController.html":{}}}],["update(id",{"_index":90,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/PlansController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{},"injectables/TemplateManagerService.html":{},"controllers/UserProfileController.html":{}}}],["update(rolepaywallmodule",{"_index":279,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["update.dto",{"_index":1261,"title":{},"body":{"controllers/PlansController.html":{}}}],["update.dto.ts",{"_index":1988,"title":{},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["update.dto.ts:10",{"_index":1994,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:14",{"_index":1995,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:18",{"_index":1998,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:22",{"_index":1991,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:26",{"_index":1997,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:30",{"_index":1989,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:34",{"_index":1990,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:38",{"_index":1993,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:42",{"_index":1992,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["update.dto.ts:46",{"_index":1996,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["updateaccessmodule",{"_index":91,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{}}}],["updateat",{"_index":1691,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"entities/Site.html":{}}}],["updatecategory",{"_index":519,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["updatecategory(categoryid",{"_index":541,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatecategory(idcategory",{"_index":598,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updated",{"_index":94,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"controllers/SitesController.html":{},"injectables/SitesService.html":{}}}],["updated_at",{"_index":1196,"title":{},"body":{"entities/Plan.html":{},"classes/SetDb1691181176026.html":{}}}],["updatedat",{"_index":1163,"title":{},"body":{"entities/Plan.html":{},"entities/Product.html":{},"classes/SetDb1691181176026.html":{},"injectables/SitesService.html":{}}}],["updatedata",{"_index":542,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatedatecolumn",{"_index":1202,"title":{},"body":{"entities/Plan.html":{},"entities/Site.html":{}}}],["updatedatecolumn({name",{"_index":1195,"title":{},"body":{"entities/Plan.html":{}}}],["updatedatecolumn({type",{"_index":1807,"title":{},"body":{"entities/Site.html":{}}}],["updatedcategory",{"_index":599,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedcategory.description",{"_index":656,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedcategory.name",{"_index":654,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedcategory.product",{"_index":660,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedcategory.rules",{"_index":658,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updatedplan",{"_index":1337,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatedplandto",{"_index":1253,"title":{},"body":{"controllers/PlansController.html":{}}}],["updatedplanresult",{"_index":1392,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatedproduct",{"_index":1567,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateisactive",{"_index":1319,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateisactive(id",{"_index":1335,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatemodule",{"_index":278,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updatemodule.execute",{"_index":284,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updatemodule.getparameters",{"_index":302,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updatemodule.getquery",{"_index":300,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updatemodule.getsql",{"_index":301,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updatepassword",{"_index":2036,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["updatepassword(id",{"_index":2040,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["updateplan",{"_index":1237,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["updateplan(id",{"_index":1252,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["updateplandto",{"_index":1254,"title":{"classes/UpdatePlanDto.html":{}},"body":{"controllers/PlansController.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["updateresult",{"_index":283,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updateresult.affected",{"_index":285,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["updateroledto",{"_index":1633,"title":{"classes/UpdateRoleDto.html":{}},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateRoleDto.html":{},"coverage.html":{}}}],["updates",{"_index":77,"title":{},"body":{"controllers/AccessModulesController.html":{},"injectables/AccessModulesService.html":{},"injectables/RolesService.html":{},"injectables/SitesService.html":{}}}],["updatesitedto",{"_index":1828,"title":{"classes/UpdateSiteDto.html":{}},"body":{"controllers/SitesController.html":{},"injectables/SitesService.html":{},"classes/UpdateSiteDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":2004,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["updateuserpassworddto",{"_index":2010,"title":{"classes/UpdateUserPasswordDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"coverage.html":{}}}],["updateuserpassworddto.password",{"_index":2046,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["updating",{"_index":18,"title":{},"body":{"controllers/AccessModulesController.html":{}}}],["uq_6794ad6a0a39b194360d209e819",{"_index":1744,"title":{},"body":{"classes/SetDb1691708514379.html":{}}}],["uq_9669a09fcc0eb6d2794a658f647",{"_index":1692,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["uq_cae803417d3133fcd01ba998f85",{"_index":1745,"title":{},"body":{"classes/SetDb1691708514379.html":{}}}],["uq_cfeaa7e14361e11b3fdfd9fc69f",{"_index":1693,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["uri",{"_index":921,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["url",{"_index":798,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"classes/CreateSiteDto.html":{},"injectables/KeycloakService.html":{},"injectables/ResetPasswordMailService.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{},"entities/Site.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":1062,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["usando",{"_index":903,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["use",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["useclass",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["useexisting",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":902,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":1262,"title":{},"body":{"controllers/PlansController.html":{}}}],["usenestlogger",{"_index":943,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["user",{"_index":719,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/DatabaseModule.html":{},"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{}}}],["user.controller",{"_index":1106,"title":{},"body":{"modules/MailModule.html":{}}}],["user.controller.ts",{"_index":755,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"coverage.html":{}}}],["user.controller.ts:13",{"_index":762,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["user.controller.ts:18",{"_index":760,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{}}}],["user.dto",{"_index":2007,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":874,"title":{},"body":{"classes/CreateUserAdminDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":887,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["user.dto.ts:18",{"_index":884,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["user.dto.ts:23",{"_index":892,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["user.dto.ts:29",{"_index":891,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["user.dto.ts:34",{"_index":880,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["user.dto.ts:8",{"_index":883,"title":{},"body":{"classes/CreateUserAdminDto.html":{}}}],["user.email",{"_index":793,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["user.firstname",{"_index":807,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["user.isverified",{"_index":781,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["user.password",{"_index":2045,"title":{},"body":{"injectables/UserProfileService.html":{}}}],["user.service",{"_index":765,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"modules/MailModule.html":{}}}],["user.service.ts",{"_index":771,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"coverage.html":{}}}],["user.service.ts:16",{"_index":777,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["user.service.ts:9",{"_index":774,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["user.verificationcode",{"_index":795,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["user/confirm",{"_index":754,"title":{},"body":{"controllers/ConfirmCreateUserController.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["user_types",{"_index":2051,"title":{},"body":{"entities/UserType.html":{}}}],["useradminentity",{"_index":709,"title":{"entities/UserAdminEntity.html":{}},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"modules/MailModule.html":{},"injectables/ResetPasswordMailService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"entities/UserAdminEntity.html":{},"injectables/UserProfileService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":1963,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["username",{"_index":915,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["userprofilecontroller",{"_index":2026,"title":{"controllers/UserProfileController.html":{}},"body":{"controllers/UserProfileController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userprofileservice",{"_index":2030,"title":{"injectables/UserProfileService.html":{}},"body":{"controllers/UserProfileController.html":{},"injectables/UserProfileService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userrepo",{"_index":2039,"title":{},"body":{"injectables/UserProfileService.html":{},"injectables/UsersService.html":{}}}],["userrepository",{"_index":694,"title":{},"body":{"injectables/ChangePasswordMailService.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/ResetPasswordMailService.html":{}}}],["users",{"_index":980,"title":{},"body":{"controllers/KeycloakController.html":{},"injectables/KeycloakService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":2070,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2064,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.service.profile",{"_index":2031,"title":{},"body":{"controllers/UserProfileController.html":{}}}],["users/users.module",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":2056,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":380,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":2063,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":1164,"title":{"entities/UserType.html":{}},"body":{"entities/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/SetDb1691181176026.html":{},"classes/UpdatePlanDto.html":{},"entities/UserType.html":{},"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["usertype.controller",{"_index":2111,"title":{},"body":{"modules/UsertypeModule.html":{}}}],["usertype.service",{"_index":2103,"title":{},"body":{"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{}}}],["usertype/usertype.module",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["usertypecontroller",{"_index":2096,"title":{"controllers/UsertypeController.html":{}},"body":{"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"coverage.html":{}}}],["usertypedto",{"_index":2052,"title":{"classes/UserTypeDto.html":{}},"body":{"classes/UserTypeDto.html":{},"controllers/UsertypeController.html":{},"coverage.html":{}}}],["usertypemodule",{"_index":381,"title":{"modules/UsertypeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsertypeModule.html":{},"modules.html":{},"overview.html":{}}}],["usertyperepository",{"_index":2117,"title":{},"body":{"injectables/UsertypeService.html":{}}}],["usertypeservice",{"_index":2102,"title":{"injectables/UsertypeService.html":{}},"body":{"controllers/UsertypeController.html":{},"modules/UsertypeModule.html":{},"injectables/UsertypeService.html":{},"coverage.html":{},"overview.html":{}}}],["usuario",{"_index":779,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/UsersService.html":{}}}],["utility",{"_index":2145,"title":{},"body":{"changelog.html":{}}}],["utiliza",{"_index":2383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilizar",{"_index":1231,"title":{},"body":{"classes/PlanDto.html":{},"miscellaneous/variables.html":{}}}],["valid",{"_index":1408,"title":{},"body":{"injectables/PlansService.html":{},"injectables/SitesService.html":{}}}],["validationpipe",{"_index":548,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/PlansController.html":{},"controllers/ProductController.html":{},"controllers/SitesController.html":{}}}],["validator",{"_index":837,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateSiteDto.html":{},"classes/CreateUserAdminDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserTypeDto.html":{},"dependencies.html":{}}}],["valor",{"_index":1410,"title":{},"body":{"injectables/PlansService.html":{}}}],["valores",{"_index":569,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/PlansService.html":{}}}],["value",{"_index":1071,"title":{},"body":{"injectables/KeycloakService.html":{},"entities/Plan.html":{},"controllers/PlansController.html":{},"classes/SetDb1691181176026.html":{},"classes/SetDb1691184456498.html":{},"classes/SetDb1691184574917.html":{},"classes/SetDb1691186525496.html":{},"classes/SetDb1691512677390.html":{},"classes/SetDb1691515083659.html":{},"classes/SetDb1691708514379.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{},"classes/SetNewPlansFields1692824385127.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":652,"title":{},"body":{"injectables/CategoryService.html":{}}}],["var",{"_index":272,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["varchar",{"_index":1801,"title":{},"body":{"entities/Site.html":{}}}],["variable",{"_index":2169,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":385,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1584,"title":{},"body":{"controllers/ResetPasswordMailController.html":{}}}],["varying",{"_index":1681,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDbPaywalmodule1692297610787.html":{},"classes/SetDbPaywalmodule1692380137673.html":{},"classes/SetNewPlansFields1692380743605.html":{},"classes/SetNewPlansFields1692815139944.html":{},"classes/SetNewPlansFields1692822538207.html":{}}}],["varying(100",{"_index":1695,"title":{},"body":{"classes/SetDb1691181176026.html":{}}}],["varying(255",{"_index":1688,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{}}}],["verbose",{"_index":942,"title":{},"body":{"injectables/KeycloakConfigService.html":{}}}],["verifica",{"_index":818,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["verificación",{"_index":787,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["verificar",{"_index":2079,"title":{},"body":{"injectables/UsersService.html":{}}}],["verificationcode",{"_index":789,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{}}}],["verifique",{"_index":1977,"title":{},"body":{"injectables/TwoFactorAuthenticationMailService.html":{}}}],["version",{"_index":2320,"title":{},"body":{"properties.html":{}}}],["versioning",{"_index":2135,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["watch",{"_index":441,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["website",{"_index":2304,"title":{},"body":{"index.html":{}}}],["where('a.role",{"_index":313,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["where('c.id",{"_index":267,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["where('lower(category.name",{"_index":616,"title":{},"body":{"injectables/CategoryService.html":{}}}],["where('lower(product.name",{"_index":1520,"title":{},"body":{"injectables/ProductService.html":{}}}],["where('lower(site.name",{"_index":1891,"title":{},"body":{"injectables/SitesService.html":{}}}],["where('role",{"_index":281,"title":{},"body":{"injectables/AccessModulesService.html":{}}}],["width",{"_index":2355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":454,"title":{},"body":{"injectables/AppService.html":{}}}],["www",{"_index":1060,"title":{},"body":{"injectables/KeycloakService.html":{}}}],["y",{"_index":571,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/ConfirmCreateUserService.html":{},"injectables/PlansService.html":{},"injectables/ProductService.html":{},"injectables/TwoFactorAuthenticationMailService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["ya",{"_index":782,"title":{},"body":{"injectables/ConfirmCreateUserService.html":{},"injectables/UsersService.html":{}}}],["yes",{"_index":332,"title":{},"body":{"classes/ApiException.html":{}}}],["you'd",{"_index":2294,"title":{},"body":{"index.html":{}}}],["zabtethusrgxdsuq",{"_index":1118,"title":{},"body":{"modules/MailModule.html":{}}}],["zone",{"_index":1690,"title":{},"body":{"classes/SetDb1691181176026.html":{},"classes/SetDb1691708514379.html":{}}}],["zoom",{"_index":153,"title":{},"body":{"modules/AccessModulesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/KeycloakModule.html":{},"modules/MailModule.html":{},"modules/PlansModule.html":{},"modules/ProductModule.html":{},"modules/RolesModule.html":{},"modules/SitesModule.html":{},"modules/TemplateManagerModule.html":{},"modules/UsersModule.html":{},"modules/UsertypeModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccessModulesController.html":{"url":"controllers/AccessModulesController.html","title":"controller - AccessModulesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccessModulesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/access-modules/access-modules.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                access-modules\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing access modules.\nThis controller provides routes for retrieving information and updating access modules.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getModulesStatusByRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getPaywallModuleAction\n                            \n                            \n                                    \n                                    \n                                    \n                                getRolePaywallModulle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getUpdatePaywallModuleAction\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                setUpdateRolModuleAction\n                            \n                            \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all access modules', description: 'Retrieves all access modules.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:132\n                \n            \n\n\n            \n                \n                    Get all access modules.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        All access modules.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get an access module by ID', description: 'Retrieves an access module by its ID.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:147\n                \n            \n\n\n            \n                \n                    Get an access module by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the access module.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The access module with the specified ID.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        getModulesStatusByRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getModulesStatusByRole(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Get('roles/:id')@ApiOperation({summary: 'Get module status by role', description: 'Retrieves the status of modules for a specific role.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:27\n                \n            \n\n\n            \n                \n                    Get the status of modules for a specific role.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role's ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Modules related to the role.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        getPaywallModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaywallModuleAction(moduleId: number, role: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Get('moduleaction/:moduleId/:role')@ApiOperation({summary: 'Get paywall module action', description: 'Retrieves the action of a paywall module for a specific role and module.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:45\n                \n            \n\n\n            \n                \n                    Get paywall module action for a specific role and module.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Paywall module action.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        getRolePaywallModulle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRolePaywallModulle()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')@ApiOperation({summary: 'Get the list of paywall roles', description: 'Retrieves the list of paywall roles.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:118\n                \n            \n\n\n            \n                \n                    Get the list of paywall roles.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The list of paywall roles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        getUpdatePaywallModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUpdatePaywallModuleAction(product: any, moduleId: string, role: string, isActive: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Put('moduleaction/:moduleId/:role/:isActive')@ApiOperation({summary: 'Update paywall module action', description: 'Updates the action of a paywall module for a specific role and module.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:68\n                \n            \n\n\n            \n                \n                    Update paywall module action for a specific role and module.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe product data.\n\n\n                                    \n                                \n                                \n                                    moduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                                \n                                    isActive\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nIndicates if the action is active.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The result of the update.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        setUpdateRolModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUpdateRolModuleAction(moduleId: string, role: string, ActionRelationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Put('rolemoduleaction/:moduleId/:ActionRelationId/:role')@ApiOperation({summary: 'Update role module action', description: 'Updates the action of a role module for a specific role, module, and action relation.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:96\n                \n            \n\n\n            \n                \n                    Update role module action for a specific role, module, and action relation.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                                \n                                    ActionRelationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe action relation ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The result of the update.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateAccessModule: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update an access module by ID', description: 'Updates an access module by its ID.'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/access-modules/access-modules.controller.ts:163\n                \n            \n\n\n            \n                \n                    Update an access module by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the access module to update.\n\n\n                                    \n                                \n                                \n                                    updateAccessModule\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe updated access module data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The updated access module.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Body, Put, Param } from '@nestjs/common';\nimport { AccessModulesService } from './access-modules.service';\nimport { Public } from 'nest-keycloak-connect';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n/**\n * Controller for managing access modules.\n * This controller provides routes for retrieving information and updating access modules.\n */\n@Controller('access-modules')\n@ApiTags('ACCESS MODULES')\nexport class AccessModulesController {\n  constructor(private readonly accessModulesService: AccessModulesService) {}\n\n  /**\n   * Get the status of modules for a specific role.\n   * @param id - The role's ID.\n   * @returns {Object} Modules related to the role.\n   */\n  @Public(false)\n  @Get('roles/:id')\n  @ApiOperation({\n    summary: 'Get module status by role',\n    description: 'Retrieves the status of modules for a specific role.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  getModulesStatusByRole(@Param('id') id: string) {\n    return this.accessModulesService.getModulesStatusByRole(id);\n  }\n\n  /**\n   * Get paywall module action for a specific role and module.\n   * @param moduleId - The module's ID.\n   * @param role - The role.\n   * @returns {Object} Paywall module action.\n   */\n  @Public(false)\n  @Get('moduleaction/:moduleId/:role')\n  @ApiOperation({\n    summary: 'Get paywall module action',\n    description:\n      'Retrieves the action of a paywall module for a specific role and module.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  getPaywallModuleAction(\n    @Param('moduleId') moduleId: number,\n    @Param('role') role: string,\n  ) {\n    return this.accessModulesService.getPaywallModuleAction(moduleId, role);\n  }\n\n  /**\n   * Update paywall module action for a specific role and module.\n   * @param product - The product data.\n   * @param moduleId - The module's ID.\n   * @param role - The role.\n   * @param isActive - Indicates if the action is active.\n   * @returns {Object} The result of the update.\n   */\n  @Public(false)\n  @Put('moduleaction/:moduleId/:role/:isActive')\n  @ApiOperation({\n    summary: 'Update paywall module action',\n    description:\n      'Updates the action of a paywall module for a specific role and module.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  getUpdatePaywallModuleAction(\n    @Body() product: any,\n    @Param('moduleId') moduleId: string,\n    @Param('role') role: string,\n    @Param('isActive') isActive: string,\n  ) {\n    return this.accessModulesService.getUpdatePaywallModuleAction(\n      moduleId,\n      role,\n      isActive,\n    );\n  }\n\n  /**\n   * Update role module action for a specific role, module, and action relation.\n   * @param moduleId - The module's ID.\n   * @param role - The role.\n   * @param ActionRelationId - The action relation ID.\n   * @returns {Object} The result of the update.\n   */\n  @Public(false)\n  @Put('rolemoduleaction/:moduleId/:ActionRelationId/:role')\n  @ApiOperation({\n    summary: 'Update role module action',\n    description:\n      'Updates the action of a role module for a specific role, module, and action relation.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  setUpdateRolModuleAction(\n    @Param('moduleId') moduleId: string,\n    @Param('role') role: string,\n    @Param('ActionRelationId') ActionRelationId: string,\n  ) {\n    return this.accessModulesService.setUpdateRolModuleAction(\n      moduleId,\n      ActionRelationId,\n      role,\n    );\n  }\n\n  /**\n   * Get the list of paywall roles.\n   * @returns {Object} The list of paywall roles.\n   */\n  @Get('list')\n  @ApiOperation({\n    summary: 'Get the list of paywall roles',\n    description: 'Retrieves the list of paywall roles.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  getRolePaywallModulle() {\n    return this.accessModulesService.getRolePaywallModulle(2);\n  }\n\n  /**\n   * Get all access modules.\n   * @returns {Object} All access modules.\n   */\n  @Get()\n  @ApiOperation({\n    summary: 'Get all access modules',\n    description: 'Retrieves all access modules.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  findAll() {\n    return this.accessModulesService.findAll();\n  }\n\n  /**\n   * Get an access module by ID.\n   * @param id - The ID of the access module.\n   * @returns {Object} The access module with the specified ID.\n   */\n  @Get(':id')\n  @ApiOperation({\n    summary: 'Get an access module by ID',\n    description: 'Retrieves an access module by its ID.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  findOne(@Param('id') id: string) {\n    return this.accessModulesService.findOne(+id);\n  }\n\n  /**\n   * Update an access module by ID.\n   * @param id - The ID of the access module to update.\n   * @param updateAccessModule - The updated access module data.\n   * @returns {Object} The updated access module.\n   */\n  @Put(':id')\n  @ApiOperation({\n    summary: 'Update an access module by ID',\n    description: 'Updates an access module by its ID.',\n  })\n  @ApiResponse({ status: 200, description: 'Success' })\n  update(@Param('id') id: string, @Body() updateAccessModule: any) {\n    return this.accessModulesService.update(+id, updateAccessModule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccessModulesModule.html":{"url":"modules/AccessModulesModule.html","title":"module - AccessModulesModule","body":"\n                   \n\n\n\n\n    Modules\n    AccessModulesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccessModulesModule\n\n\n\ncluster_AccessModulesModule_providers\n\n\n\n\nAccessModulesService\n\nAccessModulesService\n\n\n\nAccessModulesModule\n\nAccessModulesModule\n\nAccessModulesModule -->\n\nAccessModulesService->AccessModulesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/access-modules/access-modules.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessModulesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccessModulesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccessModulesService } from './access-modules.service';\nimport { AccessModulesController } from './access-modules.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PaywallModule } from 'src/common/entity/paywallModule.entity';\nimport { RolePaywallModule } from 'src/common/entity/role-paywall-module.entity';\nimport { PaywallModuleAction } from 'src/common/entity/paywal-module-actions.entity';\nimport { PaywallModuleActionRelation } from 'src/common/entity/paywall-module-actions-relations.entity';\nimport { RolePaywallModuleActionRelation } from 'src/common/entity/role-paywall-module-actions.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PaywallModule, RolePaywallModule, PaywallModuleAction, \n    PaywallModuleActionRelation, RolePaywallModuleActionRelation])],\n  controllers: [AccessModulesController],\n  providers: [AccessModulesService],\n})\nexport class AccessModulesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessModulesService.html":{"url":"injectables/AccessModulesService.html","title":"injectable - AccessModulesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessModulesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/access-modules/access-modules.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getModuleActionsWithRelations\n                            \n                            \n                                    Async\n                                getModulesStatusByRole\n                            \n                            \n                                    Async\n                                getPaywallModuleAction\n                            \n                            \n                                    Async\n                                getQueryRolModule\n                            \n                            \n                                    Async\n                                getQueryRolModuleAction\n                            \n                            \n                                    Async\n                                getRolePaywallModulle\n                            \n                            \n                                    Async\n                                getUpdatePaywallModuleAction\n                            \n                            \n                                    Async\n                                setUpdateRolModuleAction\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(paywallModuleRpo: Repository, rolePaywallModuleRpo: Repository, paywallModuleAction: Repository, paywallModuleActionRelation: Repository, rolePaywallModuleActionRelation: Repository, entityManager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/access-modules/access-modules.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        paywallModuleRpo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolePaywallModuleRpo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paywallModuleAction\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paywallModuleActionRelation\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolePaywallModuleActionRelation\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getModuleActionsWithRelations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getModuleActionsWithRelations(moduleId: number, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:83\n                \n            \n\n\n            \n                \n                    Retrieve module actions with relations for a specific module and role.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to an array of module actions with relations.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getModulesStatusByRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getModulesStatusByRole(roleId: any)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPaywallModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaywallModuleAction(moduleId: number, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getQueryRolModule\n                        \n                    \n                \n            \n            \n                \n                    \n                    getQueryRolModule(moduleId: string, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:274\n                \n            \n\n\n            \n                \n                    Retrieve role module information for a specific module and role.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to an array of role module information.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getQueryRolModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getQueryRolModuleAction(moduleId: string, ActionRelationId: string, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:291\n                \n            \n\n\n            \n                \n                    Retrieve role module action information for a specific module, action relation, and role.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    ActionRelationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe action relation's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to an array of role module action information.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRolePaywallModulle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRolePaywallModulle(roleId: any)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:313\n                \n            \n\n\n            \n                \n                    Retrieve role paywall modules for a specific role.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role's ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to role paywall modules.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUpdatePaywallModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUpdatePaywallModuleAction(moduleId: string, role: string, isActiveP: string)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:128\n                \n            \n\n\n            \n                \n                    Update paywall module action for a specific module, role, and isActive status.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                                \n                                    isActiveP\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nIndicates if the action is active.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated module actions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setUpdateRolModuleAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUpdateRolModuleAction(moduleId: string, ActionRelationId: string, role: string)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:188\n                \n            \n\n\n            \n                \n                    Update role module action for a specific module, action relation, and role.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    moduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe module's ID.\n\n\n                                    \n                                \n                                \n                                    ActionRelationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe action relation's ID.\n\n\n                                    \n                                \n                                \n                                    role\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe role.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated role module actions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateAccessModule: any)\n                \n            \n\n\n            \n                \n                    Defined in src/access-modules/access-modules.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccessModule\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PaywallModuleAction } from 'src/common/entity/paywal-module-actions.entity';\nimport { PaywallModuleActionRelation } from 'src/common/entity/paywall-module-actions-relations.entity';\nimport { PaywallModule } from 'src/common/entity/paywallModule.entity';\nimport { RolePaywallModuleActionRelation } from 'src/common/entity/role-paywall-module-actions.entity';\nimport { RolePaywallModule } from 'src/common/entity/role-paywall-module.entity';\nimport { EntityManager, EntityRepository, Repository } from 'typeorm';\n\n@Injectable()\nexport class AccessModulesService {\n  constructor(\n    @InjectRepository(PaywallModule)\n    private readonly paywallModuleRpo: Repository,\n    @InjectRepository(RolePaywallModule)\n    private readonly rolePaywallModuleRpo: Repository,\n    @InjectRepository(PaywallModuleAction)\n    private readonly paywallModuleAction: Repository,\n\n    @InjectRepository(PaywallModuleActionRelation)\n    private readonly paywallModuleActionRelation: Repository,\n\n    @InjectRepository(RolePaywallModuleActionRelation)\n    private readonly rolePaywallModuleActionRelation: Repository,\n\n    private entityManager: EntityManager,\n  ) {}\n\n  findAll() {\n    return `This action returns all accessModules`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} accessModule`;\n  }\n\n  update(id: number, updateAccessModule: any) {\n    return `This action updates a #${id} accessModule`;\n  }\n\n  async getModulesStatusByRole(roleId: any): Promise {\n    try {\n      const paywallModules = await this.paywallModuleRpo.find();\n\n      const paywallModulesWithStatus = await Promise.all(\n        paywallModules.map(async (module: PaywallModule) => {\n          const rolePaywallModule = await this.rolePaywallModuleRpo.findOne({\n            where: { role: roleId, paywallModule: { id: module.id } },\n          });\n\n          return {\n            ...module,\n            idRole: roleId,\n            isActive:\n              rolePaywallModule == null\n                ? false\n                : rolePaywallModule.isActive\n                ? true\n                : false,\n          };\n        }),\n      );\n      return paywallModulesWithStatus;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async getPaywallModuleAction(moduleId: number, role: string): Promise {\n    try {\n      return this.getModuleActionsWithRelations(moduleId, role);\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Retrieve module actions with relations for a specific module and role.\n   * @param moduleId - The module's ID.\n   * @param role - The role.\n   * @returns {Promise} A promise that resolves to an array of module actions with relations.\n   */\n  async getModuleActionsWithRelations(\n    moduleId: number,\n    role: string,\n  ): Promise {\n    const queryBuilder = this.entityManager\n      .createQueryBuilder()\n      .select([\n        'c.*',\n        'a.*',\n        'b.*',\n        'd.\"role\"',\n        'd.\"paywallModuleActionRelationId\"',\n        'd.\"paywallModuleId\"',\n      ])\n      .from(PaywallModuleAction, 'a')\n      .innerJoin(\n        PaywallModuleActionRelation,\n        'b',\n        'a.id = b.\"paywallModuleActionId\"',\n      )\n      .innerJoin(PaywallModule, 'c', 'c.id = b.\"paywallModuleId\"')\n      .leftJoinAndSelect(\n        (subQuery) =>\n          subQuery\n            .from(RolePaywallModuleActionRelation, 'd')\n            .select([\n              'd.\"role\"',\n              'd.\"paywallModuleId\"',\n              'd.\"paywallModuleActionRelationId\"',\n            ]),\n        'd',\n        'd.\"paywallModuleId\" = c.id AND d.\"paywallModuleActionRelationId\" = b.\"paywallModuleActionId\" AND d.\"role\" = :role',\n        { role: role },\n      )\n      .where('c.id = :moduleId', { moduleId: moduleId });\n    return queryBuilder.getRawMany();\n  }\n\n  /**\n   * Update paywall module action for a specific module, role, and isActive status.\n   * @param moduleId - The module's ID.\n   * @param role - The role.\n   * @param isActiveP - Indicates if the action is active.\n   * @returns {Promise} A promise that resolves to the updated module actions.\n   */\n  async getUpdatePaywallModuleAction(\n    moduleId: string,\n    role: string,\n    isActiveP: string,\n  ): Promise {\n    const moduleIdAsNumber = parseInt(moduleId, 10);\n\n    try {\n      var resultModule = this.getQueryRolModule(moduleId, role);\n\n      if ((await resultModule).length > 0) {\n        var params = { isActive: isActiveP == 'true' ? true : false };\n        var updateModule = this.entityManager\n          .createQueryBuilder()\n          .update(RolePaywallModule)\n          .set(params)\n          .where('role = :role', { role: role })\n          .andWhere('paywallModuleId = :moduleId', { moduleId: moduleId });\n\n        const updateResult = await updateModule.execute();\n\n        if (updateResult.affected > 0) {\n          return this.getQueryRolModule(moduleId, role);\n        } else {\n          return [];\n        }\n      } else {\n        const moduleIdAsNumber = parseInt(moduleId, 10);\n\n        const paywallModule = await this.paywallModuleRpo.findOne({\n          where: { id: moduleIdAsNumber },\n        });\n\n        if (!paywallModule) {\n          console.log('No se encontró el módulo con el ID proporcionado.');\n          return;\n        }\n        var paramsInsert = {\n          isActive: isActiveP == 'true' ? true : false,\n          role: role,\n          paywallModule: paywallModule,\n        };\n        if ((await this.rolePaywallModuleRpo.insert(paramsInsert)).raw > 0) {\n          return this.getQueryRolModule(moduleId, role);\n        } else {\n          return [];\n        }\n      }\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Update role module action for a specific module, action relation, and role.\n   * @param moduleId - The module's ID.\n   * @param ActionRelationId - The action relation's ID.\n   * @param role - The role.\n   * @returns {Promise} A promise that resolves to the updated role module actions.\n   */\n  async setUpdateRolModuleAction(\n    moduleId: string,\n    ActionRelationId: string,\n    role: string,\n  ): Promise {\n    const moduleIdAsNumber = parseInt(moduleId, 10);\n\n    try {\n      var resultModule = this.getQueryRolModuleAction(\n        moduleId,\n        ActionRelationId,\n        role,\n      );\n\n      if ((await resultModule).length > 0) {\n        // var params = { \"isActive\": (isActiveP == \"true\" ? true : false) }\n        var updateModule = this.entityManager\n          .createQueryBuilder()\n          .delete()\n          .from(RolePaywallModuleActionRelation)\n          .where('role = :role', { role: role })\n          .andWhere('paywallModuleId = :moduleId', { moduleId: moduleId })\n          .andWhere('paywallModuleActionRelationId = :ActionRelationId', {\n            ActionRelationId: ActionRelationId,\n          });\n\n        // console.log(\" updateModule \", updateModule.getQuery())\n        // console.log(\" updateModule \", updateModule.getSql())\n        // console.log(\" updateModule \", updateModule.getParameters())\n\n        const updateResult = await updateModule.execute();\n        if (updateResult.affected > 0) {\n          return this.getQueryRolModuleAction(moduleId, ActionRelationId, role);\n        } else {\n          return [];\n        }\n      } else {\n        console.log(' REGISTRANDO AQUI ... ');\n        const moduleIdAsNumber = parseInt(moduleId, 10);\n\n        const paywallModule = await this.paywallModuleRpo.findOne({\n          where: { id: moduleIdAsNumber },\n        });\n\n        if (!paywallModule) {\n          console.log('No se encontró el módulo con el ID proporcionado.');\n          return;\n        }\n\n        const ActionRelationIdAsNumber = parseInt(ActionRelationId, 10);\n\n        const paywallModuleActionRelation =\n          await this.paywallModuleActionRelation.findOne({\n            where: { id: ActionRelationIdAsNumber },\n          });\n\n        if (!paywallModuleActionRelation) {\n          console.log('No se encontró el módulo con el ID proporcionado.');\n          return;\n        }\n\n        var paramsInsert = {\n          paywallModuleActionRelation: paywallModuleActionRelation,\n          role: role,\n          paywallModule: paywallModule,\n        };\n        if (\n          (await this.rolePaywallModuleActionRelation.insert(paramsInsert))\n            .raw > 0\n        ) {\n          return this.getQueryRolModuleAction(moduleId, ActionRelationId, role);\n        } else {\n          return [];\n        }\n      }\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Retrieve role module information for a specific module and role.\n   * @param moduleId - The module's ID.\n   * @param role - The role.\n   * @returns {Promise} A promise that resolves to an array of role module information.\n   */\n  async getQueryRolModule(moduleId: string, role: string): Promise {\n    const queryBuilder = this.entityManager\n      .createQueryBuilder()\n      .select(['a.*'])\n      .from(RolePaywallModule, 'a')\n      .where('a.role = :role', { role: role })\n      .andWhere('a.paywallModuleId = :moduleId', { moduleId: moduleId });\n    return queryBuilder.getRawMany();\n  }\n\n  /**\n   * Retrieve role module action information for a specific module, action relation, and role.\n   * @param moduleId - The module's ID.\n   * @param ActionRelationId - The action relation's ID.\n   * @param role - The role.\n   * @returns {Promise} A promise that resolves to an array of role module action information.\n   */\n  async getQueryRolModuleAction(\n    moduleId: string,\n    ActionRelationId: string,\n    role: string,\n  ): Promise {\n    const queryBuilder = this.entityManager\n      .createQueryBuilder()\n      .select(['a.*'])\n      .from(RolePaywallModuleActionRelation, 'a')\n      .where('a.role = :role', { role: role })\n      .andWhere('a.paywallModuleId = :moduleId', { moduleId: moduleId })\n      .andWhere('a.paywallModuleActionRelationId = :ActionRelationId', {\n        ActionRelationId: ActionRelationId,\n      });\n    return queryBuilder.getRawMany();\n  }\n\n  /**\n   * Retrieve role paywall modules for a specific role.\n   * @param roleId - The role's ID.\n   * @returns {Promise} A promise that resolves to role paywall modules.\n   */\n  async getRolePaywallModulle(roleId: any): Promise {\n    console.log('ingresó al servicio');\n    try {\n      const rolePaywallModule = await this.rolePaywallModuleRpo.find();\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiException.html":{"url":"classes/ApiException.html","title":"class - ApiException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    translation\n                                \n                                \n                                    args\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(key: I18nPath, _args?: any)\n                    \n                \n                        \n                            \n                                Defined in src/app.controller.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        I18nPath\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _args\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        translation\n                    \n                \n\n                \n                    \n                        gettranslation()\n                    \n                \n                            \n                                \n                                    Defined in src/app.controller.ts:34\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        args\n                    \n                \n\n                \n                    \n                        getargs()\n                    \n                \n                            \n                                \n                                    Defined in src/app.controller.ts:38\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n\n//Documentation\n\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\n\n//I18n\nimport { I18n, I18nContext } from 'nestjs-i18n';\nimport { I18nTranslations, I18nPath } from './i18n/generated/i18n.generated';\n\n@ApiTags('MAIN')\n@Controller()\n@Unprotected()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Main' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  // i18n example to translate hello\n  @Get()\n  getTranslation(@I18n() i18n: I18nContext) {\n    // return i18n.t('test.HELLO');\n  }\n}\n\n// i18n Exceptions translate\nexport class ApiException extends Error {\n  get translation(): I18nPath {\n    return this.message as I18nPath;\n  }\n\n  get args(): any {\n    return this._args;\n  }\n\n  constructor(\n    key: I18nPath,\n    private readonly _args?: any,\n  ) {\n    super(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getHello\n                            \n                            \n                                    \n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Main'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTranslation(i18n: I18nContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i18n\n                                    \n                                            I18nContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n\n//Documentation\n\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\n\n//I18n\nimport { I18n, I18nContext } from 'nestjs-i18n';\nimport { I18nTranslations, I18nPath } from './i18n/generated/i18n.generated';\n\n@ApiTags('MAIN')\n@Controller()\n@Unprotected()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Main' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  // i18n example to translate hello\n  @Get()\n  getTranslation(@I18n() i18n: I18nContext) {\n    // return i18n.t('test.HELLO');\n  }\n}\n\n// i18n Exceptions translate\nexport class ApiException extends Error {\n  get translation(): I18nPath {\n    return this.message as I18nPath;\n  }\n\n  get args(): any {\n    return this._args;\n  }\n\n  constructor(\n    key: I18nPath,\n    private readonly _args?: any,\n  ) {\n    super(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccessModulesModule\n\nAccessModulesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccessModulesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nKeycloakModule\n\nKeycloakModule\n\nAppModule -->\n\nKeycloakModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPlansModule\n\nPlansModule\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nSitesModule\n\nSitesModule\n\nAppModule -->\n\nSitesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsertypeModule\n\nUsertypeModule\n\nAppModule -->\n\nUsertypeModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccessModulesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            KeycloakModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PlansModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            SitesModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UsertypeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // Config env variables\nimport { ConfigModule } from '@nestjs/config';\nimport { enviroments } from './enviroments';\nimport config from './config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { SitesModule } from './sites/sites.module';\nimport { AuthModule } from './auth/auth.module';\nimport { RolesModule } from './roles/roles.module';\nimport { DatabaseModule } from './database/database.module';\nimport { MailModule } from './mail/mail.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport {\n  AcceptLanguageResolver,\n  HeaderResolver,\n  I18nModule,\n  QueryResolver,\n} from 'nestjs-i18n';\nimport { ProductModule } from './product/product.module';\nimport { PlansModule } from './plans/plans.module';\nimport { UsertypeModule } from './usertype/usertype.module';\nimport { join } from 'path';\nimport { CategoryModule } from './category/category.module';\nimport { CommonModule } from './common/common.module';\nimport {\n  AuthGuard,\n  KeycloakConnectModule,\n  ResourceGuard,\n  RoleGuard,\n} from 'nest-keycloak-connect';\nimport { KeycloakConfigService } from './auth/keycloak-config.service';\nimport { KeycloakModule } from './keycloak/keycloak.module';\nimport { AccessModulesModule } from './access-modules/access-modules.module';\nimport { TemplateManagerModule } from './template-manager/template-manager.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: enviroments[process.env.NODE_ENV] || '.env',\n      load: [config],\n      isGlobal: true,\n    }),\n    // JwtModule.register({\n    //   secret: 'secret',\n    //   signOptions: { expiresIn: '1h' },\n    // }),\n    KeycloakConnectModule.registerAsync({\n      useExisting: KeycloakConfigService,\n      imports: [AuthModule],\n    }),\n    UsersModule,\n    SitesModule,\n    AuthModule,\n    RolesModule,\n    DatabaseModule,\n    MailModule,\n    I18nModule.forRoot({\n      fallbackLanguage: 'en',\n      loaderOptions: {\n        path: join(__dirname, '/i18n/'),\n        watch: true,\n      },\n      typesOutputPath: join(\n        __dirname,\n        '../src/i18n/generated/i18n.generated.ts',\n      ),\n      resolvers: [\n        { use: QueryResolver, options: ['lang'] },\n        AcceptLanguageResolver,\n        new HeaderResolver(['x-lang']),\n      ],\n    }),\n    ProductModule,\n    PlansModule,\n    UsertypeModule,\n    CategoryModule,\n    CommonModule,\n    KeycloakModule,\n    AccessModulesModule,\n    // TemplateManagerModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ResourceGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RoleGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return `Hello World!`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n//Documentation\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('AUTH')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nKeycloakConfigService \n\nKeycloakConfigService \n\n\n\nAuthModule\n\nAuthModule\n\nKeycloakConfigService  -->\n\nAuthModule->KeycloakConfigService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nKeycloakConfigService\n\nKeycloakConfigService\n\nAuthModule -->\n\nKeycloakConfigService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            KeycloakConfigService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeycloakConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { KeycloakConfigService } from './keycloak-config.service';\n\n@Module({\n  imports: [\n  ],\n  controllers: [AuthController],\n  providers: [AuthService,\n    KeycloakConfigService\n  ],\n  exports:[KeycloakConfigService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n} from '@nestjs/common';\n@Injectable()\nexport class AuthService {\n  // Aquí puedes agregar cualquier lógica adicional relacionada con la autenticación\n  // si es necesario para tu aplicación.\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/entity/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                idCategory\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                            \n                                    \n                                rules\n                            \n                            \n                                    \n                                    \n                                site\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entity/category.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        idCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({name: 'idCategory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entity/category.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entity/category.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.category)@JoinColumn({name: 'idProduct'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entity/category.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rules\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entity/category.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        site\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Site\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, site => site.category)@JoinColumn({name: 'idSite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entity/category.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/entities/category.entity.ts\n\nimport { Product } from '../../product/entity/product.entity';\nimport { Site } from '../../sites/entities/site.entity';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\n\n@Entity({ name: 'categories' })\nexport class Category {\n  @PrimaryGeneratedColumn({ name: 'idCategory' })\n  idCategory: number;\n\n  @ManyToOne(() => Site, (site) => site.category)\n  @JoinColumn({ name: 'idSite' })\n  site: Site;\n\n  @ManyToOne(() => Product, (product) => product.category)\n  @JoinColumn({ name: 'idProduct' })\n  product: Product;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  rules: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createCategory\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAllPagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(body: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new category'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:43\n                \n            \n\n\n            \n                \n                    Create a new category.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCategory data to create.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the created category.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')@ApiOperation({summary: 'Find all categories'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:54\n                \n            \n\n\n            \n                \n                    Find all categories.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of categories.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        findAllPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPagination(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter-pagination')@ApiOperation({summary: 'Find all categories with pagination and filtering'})@ApiQuery({name: 'skip', type: Number, required: false})@ApiQuery({name: 'limit', type: Number, required: false})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:70\n                \n            \n\n\n            \n                \n                    Find all categories with pagination and filtering.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nQuery parameters for pagination and filtering.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to paginated and filtered categories.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(categoryId: number, updateData: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update/:id')@ApiOperation({summary: 'Update a category by ID'})@ApiParam({name: 'id', type: Number})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:94\n                \n            \n\n\n            \n                \n                    Update a category by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCategory ID.\n\n\n                                    \n                                \n                                \n                                    updateData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUpdated category data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated category.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  Query,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport {\n  Public,\n  Resource,\n  Roles,\n  Scopes,\n  Unprotected,\n} from 'nest-keycloak-connect';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiQuery,\n  ApiBody,\n  ApiParam,\n} from '@nestjs/swagger'; // Import Swagger decorators\n\n@Controller('category')\n@ApiTags('CATEGORIES') // Swagger tag for the controller\n@Unprotected() // Controller is unprotected\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /**\n   * Create a new category.\n   *\n   * @param body - Category data to create.\n   * @returns {Promise} A promise that resolves to the created category.\n   */\n  @Post('create')\n  @ApiOperation({ summary: 'Create a new category' }) // Add ApiOperation summary\n  async createCategory(@Body() body: any): Promise {\n    return await this.categoryService.createCategory(body);\n  }\n\n  /**\n   * Find all categories.\n   *\n   * @returns {Promise} A promise that resolves to a list of categories.\n   */\n  @Get('list')\n  @ApiOperation({ summary: 'Find all categories' }) // Add ApiOperation summary\n  async findAll(): Promise {\n    return await this.categoryService.findAll();\n  }\n\n  /**\n   * Find all categories with pagination and filtering.\n   *\n   * @param query - Query parameters for pagination and filtering.\n   * @returns {Promise} A promise that resolves to paginated and filtered categories.\n   */\n  @Get('filter-pagination')\n  @ApiOperation({\n    summary: 'Find all categories with pagination and filtering',\n  }) // Add ApiOperation summary\n  @ApiQuery({ name: 'skip', type: Number, required: false }) // Swagger query parameter definition\n  @ApiQuery({ name: 'limit', type: Number, required: false }) // Swagger query parameter definition\n  async findAllPagination(\n    @Query(new ValidationPipe({ transform: true })) query: any,\n  ): Promise {\n    // Convertir los valores de \"skip\" y \"limit\" a números enteros\n    const skip = parseInt(query.skip);\n    const limit = parseInt(query.limit);\n\n    return await this.categoryService.findAllWithPaginationAndFilter({\n      ...query,\n      skip,\n      limit,\n    });\n  }\n\n  /**\n   * Update a category by ID.\n   *\n   * @param categoryId - Category ID.\n   * @param updateData - Updated category data.\n   * @returns {Promise} A promise that resolves to the updated category.\n   */\n  @Put('update/:id')\n  @ApiOperation({ summary: 'Update a category by ID' }) // Add ApiOperation summary\n  @ApiParam({ name: 'id', type: Number }) // Swagger path parameter definition\n  async updateCategory(\n    @Param('id', ParseIntPipe) categoryId: number,\n    @Body() updateData: any,\n  ): Promise {\n    return await this.categoryService.updateCategory(categoryId, updateData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entity/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ Category ])],\n  controllers: [CategoryController],\n  providers: [CategoryService]\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithPaginationAndFilter\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: Category)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:19\n                \n            \n\n\n            \n                \n                    Create a new category.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                Category\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCategory data to create.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the created category.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:38\n                \n            \n\n\n            \n                \n                    Find all categories.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of categories with associated products.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithPaginationAndFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationAndFilter(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:59\n                \n            \n\n\n            \n                \n                    Find all categories with pagination and filtering.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nQuery parameters for pagination and filtering.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to paginated and filtered categories.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(idCategory: number, updatedCategory: Category)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:119\n                \n            \n\n\n            \n                \n                    Update a category by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    idCategory\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCategory ID.\n\n\n                                    \n                                \n                                \n                                    updatedCategory\n                                    \n                                                Category\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUpdated category data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated category.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Category } from './entity/category.entity';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new category.\n   *\n   * @param category - Category data to create.\n   * @returns {Promise} A promise that resolves to the created category.\n   */\n  async createCategory(category: Category): Promise {\n    try {\n      console.log('category', category);\n      const newCategory = await this.categoryRepository.save(category);\n      return {\n        statusCode: 200,\n        message: 'Category list',\n        data: newCategory,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Find all categories.\n   *\n   * @returns {Promise} A promise that resolves to a list of categories with associated products.\n   */\n  async findAll(): Promise {\n    try {\n      const categoriesWithProduct = await this.categoryRepository.find({\n        relations: ['product'],\n      });\n      return {\n        statusCode: 200,\n        message: 'Category list',\n        data: categoriesWithProduct,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Find all categories with pagination and filtering.\n   *\n   * @param query - Query parameters for pagination and filtering.\n   * @returns {Promise} A promise that resolves to paginated and filtered categories.\n   */\n  async findAllWithPaginationAndFilter(query: any): Promise {\n    console.log('query', query);\n    const { name, page, limit } = query;\n    try {\n      const skip = (page - 1) * limit;\n      const queryBuilder = this.categoryRepository\n        .createQueryBuilder('category')\n        .leftJoinAndSelect('category.product', 'product')\n        .leftJoinAndSelect('category.site', 'site')\n        .where('LOWER(category.name) LIKE :name', {\n          name: `%${name.toLowerCase()}%`,\n        })\n        .skip(skip)\n        .take(limit)\n        .select([\n          'category.idCategory',\n          'category.name',\n          'category.description',\n          'category.rules',\n        ])\n        .addSelect(['product.idProduct', 'site.idSite', 'site.name']);\n\n      console.log('queryBuilder', queryBuilder.getSql());\n      const [categories, totalCategory] = await queryBuilder.getManyAndCount();\n      const totalPages = Math.ceil(totalCategory / limit);\n\n      if (page > totalPages) {\n        throw new NotFoundException('No records found');\n      }\n\n      // Map the categories array to a flattened structure\n      const modifiedCategories = categories.map((category) => {\n        console.log('category', category);\n        return {\n          idCategory: category.idCategory,\n          name: category.name,\n          description: category.description,\n          rules: category.rules,\n          idProduct: category.product ? category.product.idProduct : null,\n          idSite: category.site ? category.site.idSite : null,\n          siteName: category.site ? category.site.name : null,\n        };\n      });\n\n      return {\n        data: modifiedCategories,\n        totalCategory,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Update a category by ID.\n   *\n   * @param idCategory - Category ID.\n   * @param updatedCategory - Updated category data.\n   * @returns {Promise} A promise that resolves to the updated category.\n   */\n  async updateCategory(\n    idCategory: number,\n    updatedCategory: Category,\n  ): Promise {\n    try {\n      const categoryToUpdate = await this.categoryRepository.findOne({\n        where: { idCategory },\n      });\n\n      if (!categoryToUpdate) {\n        throw new NotFoundException('Category not found');\n      }\n\n      // Update category fields with provided values\n      categoryToUpdate.name = updatedCategory.name;\n      categoryToUpdate.description = updatedCategory.description;\n      categoryToUpdate.rules = updatedCategory.rules;\n      categoryToUpdate.product = updatedCategory.product; // Update the relationship with the product\n\n      const savedCategory = await this.categoryRepository.save(\n        categoryToUpdate,\n      );\n\n      return {\n        statusCode: 200,\n        message: 'Category updated',\n        data: savedCategory,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChangePasswordEntity.html":{"url":"entities/ChangePasswordEntity.html","title":"entity - ChangePasswordEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChangePasswordEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/entitys/change-password.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mail/entitys/change-password.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mail/entitys/change-password.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mail/entitys/change-password.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class ChangePasswordEntity {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChangePasswordMailController.html":{"url":"controllers/ChangePasswordMailController.html","title":"controller - ChangePasswordMailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChangePasswordMailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/controller/change-password/change-password.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(mail: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')\n                \n            \n\n            \n                \n                    Defined in src/mail/controller/change-password/change-password.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Post, Body, Controller } from '@nestjs/common';\nimport { ChangePasswordMailService } from 'src/mail/service/change-password/change-password.mail.service';\n\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n@Controller('email')\n@Unprotected()\nexport class ChangePasswordMailController {\n  constructor(private changePasswordMailService: ChangePasswordMailService) {}\n\n  @Post('change-password')\n  async sendMail(@Body('mail') mail: string) {\n    console.log('email', mail);\n    return await this.changePasswordMailService.sendPasswordChange(mail);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChangePasswordMailService.html":{"url":"injectables/ChangePasswordMailService.html","title":"injectable - ChangePasswordMailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChangePasswordMailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/service/change-password/change-password.mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createChangePassword\n                            \n                            \n                                    Async\n                                sendPasswordChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(changePasswordRepository: Repository, userRepository: Repository, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/service/change-password/change-password.mail.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changePasswordRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createChangePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    createChangePassword(resetPasswordEntity: ChangePasswordEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/change-password/change-password.mail.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resetPasswordEntity\n                                    \n                                                ChangePasswordEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordChange(mail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/change-password/change-password.mail.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { changePasswordHTML } from 'src/mail/template/confirm-change-password/confirm-change-password..template';\nimport { UserAdminEntity } from 'src/users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport * as jwt from 'jsonwebtoken';\nimport { ChangePasswordEntity } from 'src/mail/entitys/change-password.entity';\n\n// cambiar los injectables de resetpassword a change passwords\n@Injectable()\nexport class ChangePasswordMailService {\n  constructor(\n    @InjectRepository(ChangePasswordEntity)\n    private readonly changePasswordRepository: Repository,\n    @InjectRepository(UserAdminEntity)\n    private readonly userRepository: Repository,\n    private readonly mailerService: MailerService,\n  ) {}\n\n  async sendPasswordChange(mail: string) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { email: mail },\n      });\n\n      if (!user) {\n        throw new NotFoundException('Usuario no encontrado');\n      }\n\n      const token = jwt.sign({ email: mail }, 'secret', { expiresIn: '1h' });\n\n      const code = token.slice(-6);\n      await this.mailerService.sendMail({\n        to: mail,\n        subject: 'Cambio de contraseña',\n        html: changePasswordHTML(code),\n      });\n\n      const changePasswordEntity: ChangePasswordEntity = {\n        email: mail,\n        token: code,\n      };\n\n      await this.createChangePassword(changePasswordEntity);\n\n      return {\n        message: 'Se ha enviado un correo para cambiar la contraseña',\n      };\n    } catch (error) {\n      console.error(error);\n      throw error; // Propaga el error al cliente\n    }\n  }\n\n  // cambiar metodo de reset password repositoy a change password repository\n  async createChangePassword(resetPasswordEntity: ChangePasswordEntity) {\n    try {\n      await this.changePasswordRepository.save(resetPasswordEntity);\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PlansProductCategory } from './entity/plans-products-categories.entity';\nimport { PaywallModule } from './entity/paywallModule.entity';\nimport { PaywallModuleActionRelation } from './entity/paywall-module-actions-relations.entity';\nimport { PaywallModuleAction } from './entity/paywal-module-actions.entity';\nimport { RolePaywallModuleActionRelation } from './entity/role-paywall-module-actions.entity';\nimport { RolePaywallModule } from './entity/role-paywall-module.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([\n    PlansProductCategory,\n    PaywallModule,\n    PaywallModuleActionRelation,\n    PaywallModuleAction,\n    RolePaywallModuleActionRelation,\n    RolePaywallModule,\n  ])],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConfirmCreateUserController.html":{"url":"controllers/ConfirmCreateUserController.html","title":"controller - ConfirmCreateUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConfirmCreateUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/controller/confirm-create-user/confirm-create-user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                confirmCreateUserMail\n                            \n                            \n                                    \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        confirmCreateUserMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmCreateUserMail(email: string, domine: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm-create-user')\n                \n            \n\n            \n                \n                    Defined in src/mail/controller/confirm-create-user/confirm-create-user.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domine\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('send')\n                \n            \n\n            \n                \n                    Defined in src/mail/controller/confirm-create-user/confirm-create-user.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get } from '@nestjs/common';\nimport { ConfirmCreateUserService } from '../../service/confirm-create-user/confirm-create-user.service';\n\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n@Controller('email')\n@Unprotected()\nexport class ConfirmCreateUserController {\n  constructor(\n    private readonly confirmCreateUserService: ConfirmCreateUserService,\n  ) {}\n\n  @Get('send')\n  async sendMail(): Promise {\n    return 'mail';\n  }\n\n  @Post('confirm-create-user')\n  async confirmCreateUserMail(\n    @Body('email') email: string,\n    @Body('domine') domine: string,\n  ): Promise {\n    console.log('data', email, domine);\n    return await this.confirmCreateUserService.sendConfirmCreateUser(\n      email,\n      domine,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfirmCreateUserService.html":{"url":"injectables/ConfirmCreateUserService.html","title":"injectable - ConfirmCreateUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfirmCreateUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/service/confirm-create-user/confirm-create-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendConfirmCreateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/service/confirm-create-user/confirm-create-user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendConfirmCreateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmCreateUser(email: string, domain: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/confirm-create-user/confirm-create-user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserAdminEntity } from 'src/users/entities/user.entity';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport * as jwt from 'jsonwebtoken';\n\n@Injectable()\nexport class ConfirmCreateUserService {\n  constructor(\n    @InjectRepository(UserAdminEntity)\n    private readonly userRepository: Repository,\n    private readonly mailerService: MailerService,\n  ) {}\n\n  async sendConfirmCreateUser(email: string, domain: string): Promise {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { email },\n      });\n\n      if (!user) {\n        throw new NotFoundException('El usuario no existe');\n      }\n\n      /*if (user.isVerified) {\n        throw new NotFoundException('El usuario ya está confirmado');\n      }*/\n\n      // Generar el código de verificación de 6 dígitos\n      const verificationCode = Math.floor(100000 + Math.random() * 900000);\n\n      // Generar el token con el código de verificación\n      const token = jwt.sign({ email: user.email }, 'secret', {\n        expiresIn: '1h',\n      });\n\n      // Actualizar el usuario con el código de verificación\n      //user.verificationCode = verificationCode;\n      await this.userRepository.save(user);\n\n      // Construir la URL de confirmación con el token y el dominio\n      const confirmationUrl = `${domain}/${token}`;\n\n      // Enviar la URL de confirmación y el código de verificación por correo electrónico\n      await this.mailerService.sendMail({\n        to: email,\n        subject: 'Confirmación de usuario',\n        html: `Bienvenido, ${user.firstName}!\n          Gracias por registrarte. Por favor, haz clic en el siguiente enlace para confirmar tu cuenta:\n          ${confirmationUrl}\n          Tu código de verificación es: ${verificationCode}\n        `,\n      });\n\n      return {\n        messageConfirmCreateUser:\n          'Verifica tu correo electrónico para confirmar tu cuenta',\n      };\n    } catch (error) {\n      console.log('Error al confirmar el usuario', error);\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                idCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                idSite\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'The description of the product', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/product.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        idCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'The category id of the product', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/product.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        idSite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'The site id of the product', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/product.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({description: 'Indicates if the product is active', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/product.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'The name of the product'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/product.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNumber,\n  IsOptional,\n  IsDecimal,\n  IsBoolean,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateProductDto {\n\n  @IsString()\n  @ApiProperty({ description: 'The name of the product' })\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({ description: 'The description of the product', required: false })\n  description?: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({ description: 'Indicates if the product is active', required: false })\n  isActive?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({ description: 'The site id of the product', required: false })\n  idSite?: number;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({ description: 'The category id of the product', required: false })\n  idCategory?: number;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDto.html":{"url":"classes/CreateRoleDto.html","title":"class - CreateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/create-role.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateRoleDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSiteDto.html":{"url":"classes/CreateSiteDto.html","title":"class - CreateSiteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSiteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sites/dto/create-site.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'El campo descripción del sitio es obligatorio'})@ApiProperty({description: 'Es la descripción del sitio'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/dto/create-site.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()@ApiProperty({description: 'Es el estado del sitio (Activo o Inactivo)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/dto/create-site.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty({message: undefined})@ApiProperty({description: 'Es el nombre del sitio'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/dto/create-site.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@IsNotEmpty({message: 'El campo url del sitio es obligatorio'})@ApiProperty({description: 'Es la url del sitio'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/dto/create-site.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUrl, IsNotEmpty, IsBoolean } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { I18nTranslations } from 'src/i18n/generated/i18n.generated';\n\nexport class CreateSiteDto {\n  @IsString({\n    message: i18nValidationMessage('validation.IS_STRING'),\n  })\n  @IsNotEmpty({\n    message: i18nValidationMessage('validation.NOT_EMPTY'),\n  })\n  @ApiProperty({ description: 'Es el nombre del sitio' })\n  readonly name: string;\n\n  @IsString()\n  @IsNotEmpty({ message: 'El campo descripción del sitio es obligatorio' })\n  @ApiProperty({ description: 'Es la descripción del sitio' })\n  readonly description: string;\n\n  @IsUrl()\n  @IsNotEmpty({ message: 'El campo url del sitio es obligatorio' })\n  @ApiProperty({ description: 'Es la url del sitio' })\n  readonly url: string;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'Es el estado del sitio (Activo o Inactivo)' })\n  readonly isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserAdminDto.html":{"url":"classes/CreateUserAdminDto.html","title":"class - CreateUserAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@ApiProperty({description: 'ddpream@unal.edu.co'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Deimar D.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Image'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Perea Moreno'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(8, 20)@ApiProperty({description: '1234'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'Role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, Length, IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserAdminDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'Deimar D.' })\n  readonly firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'Perea Moreno' })\n  readonly lastName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'Image' })\n  readonly image?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'Role' })\n  readonly role?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(8, 20)\n  @ApiProperty({ description: '1234' })\n  readonly password: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'ddpream@unal.edu.co' })\n  readonly email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        // typeORM\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigType } from '@nestjs/config';\nimport config from '../config';\nimport { Module, Global } from '@nestjs/common';\n//Instalar MongoDB con useFactory usando el ConfigService\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      inject: [config.KEY],\n      useFactory: (configService: ConfigType) => {\n        const { user, host, dbName, password, port } = configService.postgres;\n        return {\n          type: 'postgres',\n          username: user,\n          host,\n          database: dbName,\n          password,\n          port,\n          synchronize: false,\n          autoLoadEntities: true,\n        };\n      },\n    }),\n    //Instalar MongoDB con useFactory usando el ConfigService\n    // MongooseModule.forRootAsync({\n    //   inject: [config.KEY],\n    //   useFactory: (configService: ConfigType) => {\n    //     const { user, host, dbName, password, port } = configService.mongo;\n    //     return {\n    //       uri: `mongodb://${user}:${password}@${host}:${port}/${dbName}`,\n    //     };\n    //   }\n    // }),\n  ],\n  exports: [TypeOrmModule],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeycloakConfigService.html":{"url":"injectables/KeycloakConfigService.html","title":"injectable - KeycloakConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeycloakConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/keycloak-config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createKeycloakConnectOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createKeycloakConnectOptions\n                        \n                    \n                \n            \n            \n                \ncreateKeycloakConnectOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/keycloak-config.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     KeycloakConnectOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { KeycloakConnectOptions, KeycloakConnectOptionsFactory, PolicyEnforcementMode, TokenValidation } from 'nest-keycloak-connect';\n\n@Injectable()\nexport class KeycloakConfigService implements KeycloakConnectOptionsFactory {\n    \n  createKeycloakConnectOptions(): KeycloakConnectOptions {\n    return {\n      authServerUrl: process.env.KEYCLOAK_AUTH_SERVER_URL,\n      realm: process.env.KEYCLOAK_REALM,\n      clientId: process.env.KEYCLOAK_CLIENT_ID,\n      secret: process.env.KEYCLOAK_SECRET,\n      cookieKey: 'KEYCLOAK_JWT',\n      logLevels: ['verbose'],\n      useNestLogger: true,\n      policyEnforcement: PolicyEnforcementMode.PERMISSIVE,\n      tokenValidation: TokenValidation.OFFLINE,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeycloakController.html":{"url":"controllers/KeycloakController.html","title":"controller - KeycloakController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeycloakController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/keycloak/keycloak.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                keycloak\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createPaywallModule\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                editUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                listPaywallModule\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                listRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                listUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                listUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        createPaywallModule\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPaywallModule(paywallModule: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Post('paywallModule')@ApiOperation({summary: 'Create a new paywall module'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:82\n                \n            \n\n\n            \n                \n                    Create a new paywall module.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paywallModule\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPaywall module data to create.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the created paywall module data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: any, tokenAccess: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Post('users/create')@ApiOperation({summary: 'Create a new user'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:41\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser data to create.\n\n\n                                    \n                                \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the created user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(user: any, id: any, tokenAccess: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Put('users/edit/:id')@ApiOperation({summary: 'Edit a user by ID'})@ApiResponse({status: 200, description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:108\n                \n            \n\n\n            \n                \n                    Edit a user by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser data to update.\n\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser ID.\n\n\n                                    \n                                \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        listPaywallModule\n                        \n                    \n                \n            \n            \n                \n                    \n                    listPaywallModule()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Get('paywallModule')@ApiOperation({summary: 'List all paywall modules'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:93\n                \n            \n\n\n            \n                \n                    List all paywall modules.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of paywall modules.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        listRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    listRoles(tokenAccess: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Get('roles/list')@ApiOperation({summary: 'List all roles'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:69\n                \n            \n\n\n            \n                \n                    List all roles.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of roles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        listUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    listUser(tokenAccess: string, id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Get('users/:id')@ApiOperation({summary: 'Find a user by ID'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:125\n                \n            \n\n\n            \n                \n                    Find a user by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the found user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        listUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    listUsers(tokenAccess: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Get('users/list')@ApiOperation({summary: 'List all users'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:56\n                \n            \n\n\n            \n                \n                    List all users.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of users.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(credentials: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public(undefined)@Post('token')@ApiOperation({summary: 'Login and retrieve an authentication token'})\n                \n            \n\n            \n                \n                    Defined in src/keycloak/keycloak.controller.ts:27\n                \n            \n\n\n            \n                \n                    Login and retrieve an authentication token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    credentials\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser credentials for login.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the authentication token.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Headers,\n  Post,\n  Get,\n  Put,\n  Param,\n} from '@nestjs/common';\nimport { KeycloakService } from './keycloak.service';\nimport { Public } from 'nest-keycloak-connect';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('keycloak')\n@ApiTags('KEYCLOAK') // Swagger tag for the controller\nexport class KeycloakController {\n  constructor(private readonly keycloakService: KeycloakService) {}\n\n  /**\n   * Login and retrieve an authentication token.\n   * @param credentials - User credentials for login.\n   * @returns {Promise} A promise that resolves to the authentication token.\n   */\n  @Public(true)\n  @Post('token')\n  @ApiOperation({ summary: 'Login and retrieve an authentication token' })\n  async login(@Body() credentials: any): Promise {\n    console.log('credentials', credentials);\n    return await this.keycloakService.loginToken(credentials);\n  }\n\n  /**\n   * Create a new user.\n   * @param user - User data to create.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to the created user data.\n   */\n  @Public(true)\n  @Post('users/create')\n  @ApiOperation({ summary: 'Create a new user' })\n  async createUser(\n    @Body() user: any,\n    @Headers('Authorization') tokenAccess: string,\n  ): Promise {\n    return await this.keycloakService.createUser(user, tokenAccess);\n  }\n\n  /**\n   * List all users.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to a list of users.\n   */\n  @Public(true)\n  @Get('users/list')\n  @ApiOperation({ summary: 'List all users' })\n  async listUsers(@Headers('Authorization') tokenAccess: string): Promise {\n    console.log('token', tokenAccess);\n    return await this.keycloakService.listUsers(tokenAccess);\n  }\n\n  /**\n   * List all roles.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to a list of roles.\n   */\n  @Public(true)\n  @Get('roles/list')\n  @ApiOperation({ summary: 'List all roles' })\n  async listRoles(@Headers('Authorization') tokenAccess: string): Promise {\n    console.log('token', tokenAccess);\n    return await this.keycloakService.listRoles(tokenAccess);\n  }\n\n  /**\n   * Create a new paywall module.\n   * @param paywallModule - Paywall module data to create.\n   * @returns {Promise} A promise that resolves to the created paywall module data.\n   */\n  @Public(true)\n  @Post('paywallModule')\n  @ApiOperation({ summary: 'Create a new paywall module' })\n  async createPaywallModule(@Body() paywallModule: any): Promise {\n    return await this.keycloakService.createPaywallModule(paywallModule);\n  }\n\n  /**\n   * List all paywall modules.\n   * @returns {Promise} A promise that resolves to a list of paywall modules.\n   */\n  @Public(true)\n  @Get('paywallModule')\n  @ApiOperation({ summary: 'List all paywall modules' })\n  async listPaywallModule(): Promise {\n    return await this.keycloakService.listPaywallModules();\n  }\n\n  /**\n   * Edit a user by ID.\n   * @param user - User data to update.\n   * @param id - User ID.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to the updated user data.\n   */\n  @Public(true)\n  @Put('users/edit/:id')\n  @ApiOperation({ summary: 'Edit a user by ID' })\n  @ApiResponse({ status: 200, description: 'Success' })\n  async editUser(\n    @Body() user: any,\n    @Param('id') id: any,\n    @Headers('Authorization') tokenAccess: string,\n  ): Promise {\n    return await this.keycloakService.editUser(tokenAccess, user, id);\n  }\n\n  /**\n   * Find a user by ID.\n   * @param tokenAccess - Authorization token.\n   * @param id - User ID.\n   * @returns {Promise} A promise that resolves to the found user data.\n   */\n  @Public(true)\n  @Get('users/:id')\n  @ApiOperation({ summary: 'Find a user by ID' })\n  async listUser(\n    @Headers('Authorization') tokenAccess: string,\n    @Param('id') id: any,\n  ): Promise {\n    console.log('token', tokenAccess);\n    return await this.keycloakService.findUser(tokenAccess, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeycloakModule.html":{"url":"modules/KeycloakModule.html","title":"module - KeycloakModule","body":"\n                   \n\n\n\n\n    Modules\n    KeycloakModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_KeycloakModule\n\n\n\ncluster_KeycloakModule_imports\n\n\n\ncluster_KeycloakModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nKeycloakModule\n\nKeycloakModule\n\nKeycloakModule -->\n\nCommonModule->KeycloakModule\n\n\n\n\n\nKeycloakService\n\nKeycloakService\n\nKeycloakModule -->\n\nKeycloakService->KeycloakModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/keycloak/keycloak.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeycloakService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeycloakController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeycloakService } from './keycloak.service';\nimport { KeycloakController } from './keycloak.controller';\nimport { HttpModule } from '@nestjs/axios';\nimport { CommonModule } from 'src/common/common.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PaywallModule } from 'src/common/entity/paywallModule.entity';\n\n@Module({\n  imports: [HttpModule, CommonModule, TypeOrmModule.forFeature([ PaywallModule])],\n  providers: [KeycloakService],\n  controllers: [KeycloakController]\n})\nexport class KeycloakModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeycloakService.html":{"url":"injectables/KeycloakService.html","title":"injectable - KeycloakService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeycloakService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/keycloak/keycloak.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authServerUrl\n                            \n                            \n                                    Private\n                                clientIdNumber\n                            \n                            \n                                    Private\n                                realm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPaywallModule\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                listPaywallModules\n                            \n                            \n                                    Async\n                                listRoles\n                            \n                            \n                                    Async\n                                listUsers\n                            \n                            \n                                    Async\n                                loginToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, paywallModuleRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/keycloak/keycloak.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paywallModuleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPaywallModule\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPaywallModule(paywallModule: any)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:133\n                \n            \n\n\n            \n                \n                    Create a new paywall module.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    paywallModule\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPaywall module data to create.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise that resolves to the created paywall module.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: any, tokenAccess: string)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:57\n                \n            \n\n\n            \n                \n                    Create a new user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser data to create.\n\n\n                                    \n                                \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the created user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(tokenAccess: string, user: any, id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:162\n                \n            \n\n\n            \n                \n                    Edit a user by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser data to update.\n\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(tokenAccess: string, id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:196\n                \n            \n\n\n            \n                \n                    Find a user by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the found user data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listPaywallModules\n                        \n                    \n                \n            \n            \n                \n                    \n                    listPaywallModules()\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:146\n                \n            \n\n\n            \n                \n                    List all paywall modules.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of paywall modules.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listRoles\n                        \n                    \n                \n            \n            \n                \n                    \n                    listRoles(tokenAccess: string)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:108\n                \n            \n\n\n            \n                \n                    List all roles.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of roles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    listUsers(tokenAccess: string)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:83\n                \n            \n\n\n            \n                \n                    List all users.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokenAccess\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAuthorization token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of users.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginToken(credentials)\n                \n            \n\n\n            \n                \n                    Defined in src/keycloak/keycloak.service.ts:31\n                \n            \n\n\n            \n                \n                    Authenticate user and obtain an access token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    credentials\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser login credentials.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the obtained access token.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authServerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/keycloak/keycloak.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientIdNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/keycloak/keycloak.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        realm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/keycloak/keycloak.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { firstValueFrom } from 'rxjs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PaywallModule } from 'src/common/entity/paywallModule.entity';\nimport { Repository } from 'typeorm';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class KeycloakService {\n  private authServerUrl: string;\n  private realm: string;\n  private clientIdNumber: string;\n\n  constructor(\n    private readonly httpService: HttpService,\n    @InjectRepository(PaywallModule)\n    private readonly paywallModuleRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {\n    this.authServerUrl = this.configService.get('KEYCLOAK_AUTH_SERVER_URL');\n    this.realm = this.configService.get('KEYCLOAK_REALM');\n    this.clientIdNumber = this.configService.get('KEYCLOAK_CLIENT_ID_NUMBER');\n  }\n\n  /**\n   * Authenticate user and obtain an access token.\n   * @param credentials - User login credentials.\n   * @returns {Promise} A promise that resolves to the obtained access token.\n   */\n  async loginToken(credentials): Promise {\n    try {\n      const headersRequest = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      };\n\n      const response = await firstValueFrom(\n        this.httpService.post(\n          `${this.authServerUrl}/realms/${this.realm}/protocol/openid-connect/token`,\n          credentials,\n          { headers: headersRequest },\n        ),\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Create a new user.\n   * @param user - User data to create.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to the created user data.\n   */\n  async createUser(user: any, tokenAccess: string): Promise {\n    try {\n      const headersRequest = {\n        'Content-Type': 'application/json',\n        Authorization: `${tokenAccess}`,\n        'custom-header': 'custom-header-value',\n      };\n\n      const response = await firstValueFrom(\n        this.httpService.post(\n          `${this.authServerUrl}/admin/realms/${this.realm}/users`,\n          user,\n          { headers: headersRequest },\n        ),\n      );\n      return response.data;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * List all users.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to a list of users.\n   */\n  async listUsers(tokenAccess: string): Promise {\n    try {\n      const headersRequest = {\n        'Content-Type': 'application/json',\n        Authorization: `${tokenAccess}`,\n      };\n\n      const response = await firstValueFrom(\n        this.httpService.get(\n          `${this.authServerUrl}/admin/realms/${this.realm}/users`,\n          { headers: headersRequest },\n        ),\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * List all roles.\n   * @param tokenAccess - Authorization token.\n   * @returns {Promise} A promise that resolves to a list of roles.\n   */\n  async listRoles(tokenAccess: string): Promise {\n    try {\n      const headersRequest = {\n        'Content-Type': 'application/json',\n        Authorization: `${tokenAccess}`,\n      };\n\n      const response = await firstValueFrom(\n        this.httpService.get(\n          `${this.authServerUrl}/admin/realms/${this.realm}/clients/${this.clientIdNumber}/roles`,\n          { headers: headersRequest },\n        ),\n      );\n\n      return response.data;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Create a new paywall module.\n   * @param paywallModule - Paywall module data to create.\n   * @returns {Promise} A promise that resolves to the created paywall module.\n   */\n  async createPaywallModule(paywallModule: any): Promise {\n    try {\n      const response = await this.paywallModuleRepository.save(paywallModule);\n      return response;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * List all paywall modules.\n   * @returns {Promise} A promise that resolves to a list of paywall modules.\n   */\n  async listPaywallModules(): Promise {\n    try {\n      const response = await this.paywallModuleRepository.find();\n      return response;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Edit a user by ID.\n   * @param tokenAccess - Authorization token.\n   * @param user - User data to update.\n   * @param id - User ID.\n   * @returns {Promise} A promise that resolves to the updated user data.\n   */\n  async editUser(tokenAccess: string, user: any, id: any): Promise {\n    try {\n      const headersRequest = {\n        'Content-Type': 'application/json',\n        Authorization: `${tokenAccess}`,\n        'custom-header': 'custom-header-value',\n      };\n\n      const url = `${this.authServerUrl}/admin/realms/${this.realm}/users/${id}`;\n\n      const response = await firstValueFrom(\n        this.httpService.put(url, user, { headers: headersRequest }),\n      );\n\n      if (response.status === 204) {\n        return {\n          status: 200,\n          message: `User with id: ${id} has been edited`,\n          user: user,\n        };\n      } else {\n        throw new NotFoundException('Failed to update the user');\n      }\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Find a user by ID.\n   * @param tokenAccess - Authorization token.\n   * @param id - User ID.\n   * @returns {Promise} A promise that resolves to the found user data.\n   */\n  async findUser(tokenAccess: string, id: any): Promise {\n    try {\n      const headersRequest = {\n        'Content-Type': 'application/json',\n        Authorization: `${tokenAccess}`,\n      };\n\n      const url = `${this.authServerUrl}/admin/realms/${this.realm}/users/${id}`;\n      const response = await firstValueFrom(\n        this.httpService.get(url, { headers: headersRequest }),\n      );\n\n      if (response.status === 200) {\n        return response.data; // Return the found user.\n      } else if (response.status === 404) {\n        throw new NotFoundException('User not found');\n      } else {\n        throw new Error('Unknown error while searching for the user');\n      }\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nChangePasswordMailService \n\nChangePasswordMailService \n\n\n\nConfirmCreateUserService \n\nConfirmCreateUserService \n\n\n\nResetPasswordMailService \n\nResetPasswordMailService \n\n\n\nTwoFactorAuthenticationMailService \n\nTwoFactorAuthenticationMailService \n\n\n\nMailModule\n\nMailModule\n\nChangePasswordMailService  -->\n\nMailModule->ChangePasswordMailService \n\n\n\nConfirmCreateUserService  -->\n\nMailModule->ConfirmCreateUserService \n\n\n\nResetPasswordMailService  -->\n\nMailModule->ResetPasswordMailService \n\n\n\nTwoFactorAuthenticationMailService  -->\n\nMailModule->TwoFactorAuthenticationMailService \n\n\n\n\n\nChangePasswordMailService\n\nChangePasswordMailService\n\nMailModule -->\n\nChangePasswordMailService->MailModule\n\n\n\n\n\nConfirmCreateUserService\n\nConfirmCreateUserService\n\nMailModule -->\n\nConfirmCreateUserService->MailModule\n\n\n\n\n\nResetPasswordMailService\n\nResetPasswordMailService\n\nMailModule -->\n\nResetPasswordMailService->MailModule\n\n\n\n\n\nTwoFactorAuthenticationMailService\n\nTwoFactorAuthenticationMailService\n\nMailModule -->\n\nTwoFactorAuthenticationMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChangePasswordMailService\n                        \n                        \n                            ConfirmCreateUserService\n                        \n                        \n                            ResetPasswordMailService\n                        \n                        \n                            TwoFactorAuthenticationMailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ResetPasswordMailController\n                        \n                        \n                            ConfirmCreateUserController\n                        \n                        \n                            ChangePasswordMailController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChangePasswordMailService\n                        \n                        \n                            ConfirmCreateUserService\n                        \n                        \n                            ResetPasswordMailService\n                        \n                        \n                            TwoFactorAuthenticationMailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ResetPasswordMailController } from './controller/reset-password/reset-password.mail.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ResetPasswordEntity } from './entitys/reset-password.entity';\nimport { UserAdminEntity } from 'src/users/entities/user.entity';\nimport { TwoFactorAuthenticationMailService } from './service/two-factor-authenticate/two-factor-authentication.mail.service';\nimport { ResetPasswordMailService } from './service/reset-password/reset-password.mail.service';\nimport { ConfirmCreateUserController } from './controller/confirm-create-user/confirm-create-user.controller';\nimport { ConfirmCreateUserService } from './service/confirm-create-user/confirm-create-user.service';\nimport { ChangePasswordMailService } from './service/change-password/change-password.mail.service';\nimport { ChangePasswordEntity } from './entitys/change-password.entity';\nimport { ChangePasswordMailController } from './controller/change-password/change-password.controller';\n\n@Module({\n  imports: [\n    MailerModule.forRoot({\n      transport: {\n        host: 'smtp.gmail.com',\n        port: 587,\n        secure: false,\n        auth: {\n          user: 'ddpeream@unal.edu.co',\n          pass: 'zabtethusrgxdsuq',\n        },\n      },\n    }),\n    TypeOrmModule.forFeature([ResetPasswordEntity]),\n    TypeOrmModule.forFeature([UserAdminEntity]),\n    TypeOrmModule.forFeature([ChangePasswordEntity]),\n  ],\n  providers: [\n    ResetPasswordMailService,\n    TwoFactorAuthenticationMailService,\n    ConfirmCreateUserService,\n    ChangePasswordMailService,\n  ],\n  exports: [\n    ResetPasswordMailService,\n    TwoFactorAuthenticationMailService,\n    ConfirmCreateUserService,\n    ChangePasswordMailService,\n  ],\n  controllers: [\n    ResetPasswordMailController,\n    ConfirmCreateUserController,\n    ChangePasswordMailController,\n  ],\n})\nexport class MailModule {\n  constructor() {\n    //console.log('MailModule loaded');\n    //console.log(process.env);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PaywallModule.html":{"url":"entities/PaywallModule.html","title":"entity - PaywallModule","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PaywallModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/paywallModule.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywallModule.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywallModule.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywallModule.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywallModule.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn } from 'typeorm';\n\n@Entity()\nexport class PaywallModule {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @CreateDateColumn({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PaywallModuleAction.html":{"url":"entities/PaywallModuleAction.html","title":"entity - PaywallModuleAction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PaywallModuleAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/paywal-module-actions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywal-module-actions.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywal-module-actions.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class PaywallModuleAction {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PaywallModuleActionRelation.html":{"url":"entities/PaywallModuleActionRelation.html","title":"entity - PaywallModuleActionRelation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PaywallModuleActionRelation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/paywall-module-actions-relations.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                paywallModule\n                            \n                            \n                                    \n                                paywallModuleAction\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywall-module-actions-relations.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paywallModule\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaywallModule\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywall-module-actions-relations.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paywallModuleAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaywallModuleAction\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/paywall-module-actions-relations.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { PaywallModule } from './paywallModule.entity';\nimport { PaywallModuleAction } from './paywal-module-actions.entity';\n\n@Entity()\nexport class PaywallModuleActionRelation {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => PaywallModule, { eager: true })\n  paywallModule: PaywallModule;\n\n  @ManyToOne(() => PaywallModuleAction, { eager: true })\n  paywallModuleAction: PaywallModuleAction;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Plan.html":{"url":"entities/Plan.html","title":"entity - Plan","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plans/entity/plan.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                duration\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                    Optional\n                                idPlan\n                            \n                            \n                                    \n                                idVersionPlan\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isSpecialRateActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                plansProductsCategory\n                            \n                            \n                                    \n                                rate\n                            \n                            \n                                    \n                                renewalRate\n                            \n                            \n                                    \n                                renewalSpecialRate\n                            \n                            \n                                    \n                                specialRate\n                            \n                            \n                                    \n                                startDate\n                            \n                            \n                                    \n                                time\n                            \n                            \n                                    \n                                typeDuration\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'duration', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'end_date', type: 'date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        idPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({name: 'idPlan'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        idVersionPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'idVersionPlan', default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isSpecialRateActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'special_rate_enabled', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        plansProductsCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PlansProductCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, plansProductsCategory => plansProductsCategory.plan)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        renewalRate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'renewal_rate', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        renewalSpecialRate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'renewal_special_rate', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        specialRate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'special_rate', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'start_date', type: 'date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        typeDuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'typeDuration', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/entity/plan.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // import { PlansProducts } from '../../common/entity/plans-product.entity';\nimport { Product } from '../../product/entity/product.entity';\nimport { PlansProductCategory } from '../../common/entity/plans-products-categories.entity';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\n\n@Entity({ name: 'plans' })\nexport class Plan {\n  @PrimaryGeneratedColumn({ name: 'idPlan' })\n  idPlan?: number;\n\n  @Column({ name: 'idVersionPlan', default: 1 })\n  idVersionPlan: number = 1;\n\n  @Column()\n  description: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  userType: string;\n\n  @Column()\n  isActive: boolean;\n\n  @Column({ nullable: true })\n  time: string;\n\n  @Column({ name: 'typeDuration', nullable: true })\n  typeDuration: string;\n\n  @Column({ name: 'duration', nullable: true })\n  duration: number;\n\n  @Column({ nullable: true })\n  rate: number;\n\n  @Column({ name: 'renewal_rate', nullable: true })\n  renewalRate: number;\n\n  @Column({ name: 'special_rate_enabled', default: false })\n  isSpecialRateActive: boolean;\n\n  @Column({ name: 'special_rate', nullable: true })\n  specialRate: number;\n\n  @Column({ name: 'renewal_special_rate', nullable: true })\n  renewalSpecialRate: number;\n\n  @Column({ name: 'start_date', type: 'date', nullable: true })\n  startDate: Date;\n\n  @Column({ name: 'end_date', type: 'date', nullable: true })\n  endDate: Date;\n\n  @CreateDateColumn({ name: 'created_at', type: 'timestamp' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at', type: 'timestamp' })\n  updatedAt: Date;\n\n  @OneToMany(() => PlansProductCategory, plansProductsCategory => plansProductsCategory.plan)\n  plansProductsCategory: PlansProductCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plans/dto/create/plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                categories\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                contentQuantity\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                durationType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                frequencyType\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contentQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        durationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        frequencyType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/create/plan.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsString, IsOptional, IsBoolean, IsEnum } from 'class-validator';\n\nexport enum UserType {\n  Suscrito = 'Suscrito',\n  Anonimo = 'Anónimo',\n  RegistradoSinPago = 'Registrado sin pago',\n}\n\nexport class PlanDto {\n  @IsString()\n  description: string;\n\n  @IsString()\n  name: string;\n\n  @IsEnum(UserType) // Modificado aquí para utilizar el enum UserType\n  userType: UserType;\n\n  @IsBoolean()\n  isActive: boolean;\n\n  @IsOptional()\n  @IsString()\n  categories?: string;\n\n  @IsOptional()\n  @IsNumber()\n  contentQuantity?: number;\n\n  @IsOptional()\n  @IsString()\n  frequencyType?: string;\n\n  @IsOptional()\n  @IsString()\n  durationType?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlansController.html":{"url":"controllers/PlansController.html","title":"controller - PlansController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plans\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createPlan\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAllPagination\n                            \n                            \n                                    \n                                    \n                                findAllPlans\n                            \n                            \n                                    \n                                    \n                                findByFilter\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updatePlan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        createPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPlan(planDto: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new plan'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:40\n                \n            \n\n\n            \n                \n                    Create a new plan.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    planDto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan data to create.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        A promise that resolves to the created plan.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pagination')@ApiOperation({summary: 'Find all plans with pagination'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:76\n                \n            \n\n\n            \n                \n                    Find all plans with pagination.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                    \n                                        \nPage number.\n\n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        \nLimit of plans per page.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A promise that resolves to paginated plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findAllPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPagination(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter-pagination')@ApiOperation({summary: 'Find all plans with pagination and filtering'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:64\n                \n            \n\n\n            \n                \n                    Find all plans with pagination and filtering.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nQuery parameters for pagination and filtering.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to paginated and filtered plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findAllPlans\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPlans()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')@ApiOperation({summary: 'Find all plans'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:53\n                \n            \n\n\n            \n                \n                    Find all plans.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter')@ApiOperation({summary: 'Find plans by filtering criteria'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:92\n                \n            \n\n\n            \n                \n                    Find plans by filtering criteria.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nQuery parameters for filtering.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A promise that resolves to filtered plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find a plan by ID'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:104\n                \n            \n\n\n            \n                \n                    Find a plan by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A promise that resolves to the found plan.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, isActive: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update the status of a plan by ID'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:131\n                \n            \n\n\n            \n                \n                    Update the status of a plan by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan ID.\n\n\n                                    \n                                \n                                \n                                    isActive\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nNew status of the plan.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A promise that resolves to the updated plan.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        updatePlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlan(id: number, updatedPlanDto: UpdatePlanDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id/update')@ApiOperation({summary: 'Update a plan by ID'})\n                \n            \n\n            \n                \n                    Defined in src/plans/plans.controller.ts:116\n                \n            \n\n\n            \n                \n                    Update a plan by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan ID.\n\n\n                                    \n                                \n                                \n                                    updatedPlanDto\n                                    \n                                                UpdatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUpdated plan data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        A promise that resolves to the updated plan.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Query,\n  ParseIntPipe,\n  Post,\n  Body,\n  Param,\n  Put,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { PlansService } from './plans.service';\nimport { PlanDto } from './dto/create/plan.dto';\nimport { UpdatePlanDto } from './dto/update/plan-update.dto';\nimport { UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport {\n  Public,\n  Resource,\n  Roles,\n  Scopes,\n  Unprotected,\n} from 'nest-keycloak-connect';\nimport { ApiTags, ApiOperation } from '@nestjs/swagger'; // Import ApiOperation\n\n@Controller('plans')\n@ApiTags('PLANS') // Swagger tag for the controller\n@Unprotected() // Controller is unprotected\nexport class PlansController {\n  constructor(private readonly plansService: PlansService) {}\n\n  /**\n   * Create a new plan.\n   * @param planDto - Plan data to create.\n   * @returns {Promise} A promise that resolves to the created plan.\n   */\n  @Post('create')\n  @ApiOperation({ summary: 'Create a new plan' }) // Add ApiOperation summary\n  async createPlan(@Body() planDto: any) {\n    console.log('planDto', planDto);\n    const planWithDefaultVersion = { ...planDto, idVersionPlan: 1 };\n    console.log('planWithDefaultVersion', planWithDefaultVersion);\n    return this.plansService.create(planWithDefaultVersion);\n  }\n\n  /**\n   * Find all plans.\n   * @returns {Promise} A promise that resolves to a list of plans.\n   */\n  @Get('list')\n  @ApiOperation({ summary: 'Find all plans' }) // Add ApiOperation summary\n  findAllPlans(): Promise {\n    return this.plansService.findAllPlans();\n  }\n\n  /**\n   * Find all plans with pagination and filtering.\n   * @param query - Query parameters for pagination and filtering.\n   * @returns {Promise} A promise that resolves to paginated and filtered plans.\n   */\n  @Get('filter-pagination')\n  @ApiOperation({ summary: 'Find all plans with pagination and filtering' }) // Add ApiOperation summary\n  async findAllPagination(@Query() query: any): Promise {\n    return await this.plansService.findByFilterAndPagination(query);\n  }\n\n  /**\n   * Find all plans with pagination.\n   * @param page - Page number.\n   * @param limit - Limit of plans per page.\n   * @returns {Promise} A promise that resolves to paginated plans.\n   */\n  @Get('pagination')\n  @ApiOperation({ summary: 'Find all plans with pagination' }) // Add ApiOperation summary\n  findAll(\n    @Query('page', ParseIntPipe) page = 1,\n    @Query('limit', ParseIntPipe) limit = 10,\n  ) {\n    console.log('page', page);\n    console.log('limit', limit);\n    return this.plansService.findAll(page, limit);\n  }\n\n  /**\n   * Find plans by filtering criteria.\n   * @param query - Query parameters for filtering.\n   * @returns {Promise} A promise that resolves to filtered plans.\n   */\n  @Get('filter')\n  @ApiOperation({ summary: 'Find plans by filtering criteria' }) // Add ApiOperation summary\n  findByFilter(@Query(new ValidationPipe({ transform: true })) query: any) {\n    console.log('query', query);\n    return this.plansService.findByFilter(query);\n  }\n\n  /**\n   * Find a plan by ID.\n   * @param id - Plan ID.\n   * @returns {Promise} A promise that resolves to the found plan.\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Find a plan by ID' }) // Add ApiOperation summary\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.plansService.findOne(id);\n  }\n\n  /**\n   * Update a plan by ID.\n   * @param id - Plan ID.\n   * @param updatedPlanDto - Updated plan data.\n   * @returns {Promise} A promise that resolves to the updated plan.\n   */\n  @Put(':id/update')\n  @ApiOperation({ summary: 'Update a plan by ID' }) // Add ApiOperation summary\n  async updatePlan(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updatedPlanDto: UpdatePlanDto,\n  ) {\n    return this.plansService.updatePlan(id, updatedPlanDto);\n  }\n\n  /**\n   * Update the status of a plan by ID.\n   * @param id - Plan ID.\n   * @param isActive - New status of the plan.\n   * @returns {Promise} A promise that resolves to the updated plan.\n   */\n  @Put(':id')\n  @ApiOperation({ summary: 'Update the status of a plan by ID' }) // Add ApiOperation summary\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('isActive') isActive: boolean,\n  ) {\n    return this.plansService.updateIsActive(id, isActive);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlansModule.html":{"url":"modules/PlansModule.html","title":"module - PlansModule","body":"\n                   \n\n\n\n\n    Modules\n    PlansModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlansModule\n\n\n\ncluster_PlansModule_providers\n\n\n\n\nPlansService\n\nPlansService\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nPlansService->PlansModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/plans/plans.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlansService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlansController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlansService } from './plans.service';\nimport { PlansController } from './plans.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Plan } from './entity/plan.entity';\nimport { PlansProductCategory } from 'src/common/entity/plans-products-categories.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Plan,\n      PlansProductCategory\n    ]),\n  ],\n  controllers: [PlansController],\n  providers: [PlansService],\n})\nexport class PlansModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PlansProductCategory.html":{"url":"entities/PlansProductCategory.html","title":"entity - PlansProductCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PlansProductCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/plans-products-categories.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                duration\n                            \n                            \n                                    \n                                frequency\n                            \n                            \n                                    \n                                idCategory\n                            \n                            \n                                    \n                                idPlansProductCategory\n                            \n                            \n                                    \n                                idProduct\n                            \n                            \n                                    \n                                    \n                                plan\n                            \n                            \n                                    \n                                    \n                                sites\n                            \n                            \n                                    \n                                typeDuration\n                            \n                            \n                                    \n                                unlimited\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        idCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        idPlansProductCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({name: 'idPlansProductCategory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        idProduct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        plan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Plan\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, plan => plan.plansProductsCategory)@JoinColumn({name: 'idPlan'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Site\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, site => site.plansProductCategory)@JoinColumn({name: 'idSite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        typeDuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'typeDuration'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        unlimited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/plans-products-categories.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/entities/plans_products_categories.entity.ts\n\nimport { Entity, Column, ManyToOne, JoinColumn, PrimaryColumn, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Plan } from '../../plans/entity/plan.entity';\nimport { Site } from '../../sites/entities/site.entity';\n\n@Entity({ name: 'PlansProductCategory' })\nexport class PlansProductCategory {\n  @PrimaryGeneratedColumn({ name: 'idPlansProductCategory' })\n  idPlansProductCategory: number;\n\n  @ManyToOne(() => Site, site => site.plansProductCategory)\n  @JoinColumn({ name: 'idSite' })\n  sites: Site;\n\n  @ManyToOne(() => Plan, plan => plan.plansProductsCategory)\n  @JoinColumn({ name: 'idPlan' })\n  plan: Plan;\n\n  @Column()\n  idProduct: number;\n\n  @Column()\n  idCategory: number;\n\n  @Column()\n  amount: number;\n\n  @Column()\n  unlimited: boolean;\n\n  @Column()\n  frequency: string;\n\n  @Column({ name: 'typeDuration' })\n  typeDuration: string;\n\n  @Column()\n  duration: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansService.html":{"url":"injectables/PlansService.html","title":"injectable - PlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plans/plans.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllPlans\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                findByFilterAndPagination\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateIsActive\n                            \n                            \n                                    Async\n                                updatePlan\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(planRepository: Repository, plansProductCategoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/plans/plans.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        planRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        plansProductCategoryRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: any)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:20\n                \n            \n\n\n            \n                \n                    Create a new plan.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan data to create.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the created plan.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(page: number, limit: number)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:172\n                \n            \n\n\n            \n                \n                    Find all plans with pagination support.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPage number.\n\n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nNumber of items per page.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a paginated list of plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPlans\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPlans()\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:155\n                \n            \n\n\n            \n                \n                    Find all plans.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a list of plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:247\n                \n            \n\n\n            \n                \n                    Find plans based on filtering criteria.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nFiltering criteria.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise that resolves to a list of filtered plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilterAndPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilterAndPagination(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:286\n                \n            \n\n\n            \n                \n                    Find plans based on filtering criteria with pagination support.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nFiltering and pagination criteria.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to a paginated list of filtered plans.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:199\n                \n            \n\n\n            \n                \n                    Find a plan by its ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan ID.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise that resolves to the found plan.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateIsActive\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateIsActive(id: number, isActive: any)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:217\n                \n            \n\n\n            \n                \n                    Update the isActive status of a plan.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan ID.\n\n\n                                    \n                                \n                                \n                                    isActive\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nNew isActive status.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise that resolves to the updated plan.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePlan(id: number, updatedPlan: any)\n                \n            \n\n\n            \n                \n                    Defined in src/plans/plans.service.ts:85\n                \n            \n\n\n            \n                \n                    Update a plan by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPlan ID.\n\n\n                                    \n                                \n                                \n                                    updatedPlan\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUpdated plan data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise that resolves to the updated plan.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Plan } from './entity/plan.entity';\nimport { PlansProductCategory } from 'src/common/entity/plans-products-categories.entity';\n\n@Injectable()\nexport class PlansService {\n  constructor(\n    @InjectRepository(Plan) private readonly planRepository: Repository,\n    @InjectRepository(PlansProductCategory)\n    private readonly plansProductCategoryRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new plan.\n   * @param plan - Plan data to create.\n   * @returns {Promise} A promise that resolves to the created plan.\n   */\n  async create(plan: any): Promise {\n    try {\n      const planCreated = await this.planRepository.findOne({\n        where: { name: plan.name },\n      });\n\n      if (planCreated) {\n        throw new NotFoundException(\n          `Plan with name ${plan.name} already exists`,\n        );\n      }\n\n      const planEdited: any = {\n        userType: plan.userType,\n        name: plan.name,\n        description: plan.description,\n        isActive: plan.isActive,\n        idVersionPlan: plan.idVersionPlan,\n        time: plan.time,\n        typeDuration: plan.typeDuration,\n        duration: plan.duration,\n        rate: plan.rate,\n        renewalRate: plan.renewalRate,\n        isSpecialRateActive: plan.isSpecialRateActive,\n        specialRate: plan.specialRate,\n        renewalSpecialRate: plan.renewalSpecialRate,\n        startDate: plan.startDate,\n        endDate: plan.endDate,\n      };\n\n      const newPlan = await this.planRepository.save(planEdited);\n      console.log('newPlan', newPlan);\n\n      plan.categories.map(async (item: any) => {\n        console.log('item', item);\n        const newItems: any = {\n          plan: newPlan.idPlan,\n          sites: item.sites,\n          idProduct: item.idProduct,\n          idCategory: item.idCategory,\n          duration: item.duration,\n          typeDuration: item.typeDuration,\n          frequency: item.frequency,\n          unlimited: item.unlimited,\n          amount: item.amount,\n        };\n        console.log('newItems', newItems);\n        const franck = await this.plansProductCategoryRepository.save(newItems);\n      });\n\n      return {\n        message: 'Plan created successfully',\n        newPlan,\n      };\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Update a plan by ID.\n   * @param id - Plan ID.\n   * @param updatedPlan - Updated plan data.\n   * @returns {Promise} A promise that resolves to the updated plan.\n   */\n  async updatePlan(id: number, updatedPlan: any): Promise {\n    try {\n      const planToUpdate = await this.planRepository.findOne({\n        where: { idPlan: id },\n      });\n\n      if (!planToUpdate) {\n        throw new NotFoundException(`Plan with ID ${id} not found`);\n      }\n\n      const {\n        name,\n        userType,\n        description,\n        isActive,\n        idVersionPlan,\n        categories,\n      } = updatedPlan;\n\n      // Actualizar los campos del plan con los valores proporcionados\n      planToUpdate.name = name;\n      planToUpdate.userType = userType;\n      planToUpdate.description = description;\n      planToUpdate.isActive = isActive;\n      planToUpdate.idVersionPlan = idVersionPlan;\n\n      // Guardar los cambios en el plan\n      const updatedPlanResult = await this.planRepository.save(planToUpdate);\n\n      // Actualizar las categorías asociadas con el plan\n      for (const category of categories) {\n        const {\n          sites,\n          idProduct,\n          idCategory,\n          duration,\n          typeDuration,\n          frequency,\n          unlimited,\n          amount,\n        } = category;\n\n        const newCategory = {\n          plan: updatedPlanResult, // Asociamos la categoría con el plan actualizado\n          sites,\n          idProduct,\n          idCategory,\n          duration,\n          typeDuration,\n          frequency,\n          unlimited,\n          amount,\n        };\n\n        await this.plansProductCategoryRepository.save(newCategory);\n      }\n\n      return {\n        message: 'Plan updated successfully',\n        updatedPlan: updatedPlanResult,\n      };\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Find all plans.\n   * @returns {Promise} A promise that resolves to a list of plans.\n   */\n  async findAllPlans(): Promise {\n    try {\n      const plans = await this.planRepository.find();\n      const totalPlans = await this.planRepository.count();\n      return {\n        data: plans,\n        totalPlans,\n      };\n    } catch (error) {}\n  }\n\n  /**\n   * Find all plans with pagination support.\n   * @param page - Page number.\n   * @param limit - Number of items per page.\n   * @returns {Promise} A promise that resolves to a paginated list of plans.\n   */\n  async findAll(page: number, limit: number): Promise {\n    try {\n      const skip = (page - 1) * limit;\n      const [plans, totalPlans] = await this.planRepository.findAndCount({\n        skip,\n        take: limit,\n      });\n      const totalPages = Math.ceil(totalPlans / limit);\n\n      if (page > totalPages) {\n        throw new NotFoundException('Number of page is not valid');\n      }\n\n      return {\n        data: plans,\n        totalPlans,\n      };\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Find a plan by its ID.\n   * @param id - Plan ID.\n   * @returns {Promise} A promise that resolves to the found plan.\n   */\n  async findOne(id: number): Promise {\n    const plan = await this.planRepository.findOne({\n      where: { idPlan: id },\n    });\n\n    if (!plan) {\n      throw new NotFoundException(`Plan with ID ${id} not found`);\n    }\n\n    return plan;\n  }\n\n  /**\n   * Update the isActive status of a plan.\n   * @param id - Plan ID.\n   * @param isActive - New isActive status.\n   * @returns {Promise} A promise that resolves to the updated plan.\n   */\n  async updateIsActive(id: number, isActive: any): Promise {\n    try {\n      const planToUpdate = await this.planRepository.findOne({\n        where: { idPlan: id },\n      });\n\n      if (!planToUpdate) {\n        throw new NotFoundException(`Plan with ID ${id} not found`);\n      }\n\n      // Actualizar el campo isActive con el nuevo valor\n      planToUpdate.isActive = isActive;\n\n      // Guardar los cambios en la base de datos\n      const updatedPlan = await this.planRepository.save(planToUpdate);\n\n      return {\n        message: 'Plan updated successfully',\n        updatedPlan,\n      };\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  /**\n   * Find plans based on filtering criteria.\n   * @param query - Filtering criteria.\n   * @returns {Promise} A promise that resolves to a list of filtered plans.\n   */\n  async findByFilter(query: any): Promise {\n    const { name, rate, duration } = query;\n\n    try {\n      const queryBuilder = this.planRepository.createQueryBuilder('plan');\n\n      if (name) {\n        queryBuilder.where('LOWER(plan.name) LIKE :name', {\n          name: `%${name.toLowerCase()}%`,\n        });\n      }\n\n      if (rate) {\n        queryBuilder.where('LOWER(plan.rate) LIKE :rate', {\n          rate: `%${rate.toLowerCase()}%`,\n        });\n      }\n\n      if (duration) {\n        queryBuilder.where('LOWER(plan.duration) LIKE :duration', {\n          duration: `%${duration.toLowerCase()}%`,\n        });\n      }\n\n      const plans = await queryBuilder.getMany();\n      console.log('plans', plans);\n      return plans;\n    } catch (error) {\n      console.log('error', error);\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  //Unión entre findByFilter y findAll\n  /**\n   * Find plans based on filtering criteria with pagination support.\n   * @param query - Filtering and pagination criteria.\n   * @returns {Promise} A promise that resolves to a paginated list of filtered plans.\n   */\n  async findByFilterAndPagination(query: any): Promise {\n    const { name, rate, duration, page, limit } = query;\n\n    try {\n      const skip = (page - 1) * limit;\n      const queryBuilder = this.planRepository\n        .createQueryBuilder('plan')\n        .skip(skip)\n        .take(limit);\n\n      if (name) {\n        queryBuilder.where('LOWER(plan.name) LIKE :name', {\n          name: `%${name.toLowerCase()}%`,\n        });\n      }\n\n      if (rate) {\n        queryBuilder.where('LOWER(plan.rate) LIKE :rate', {\n          rate: `%${rate.toLowerCase()}%`,\n        });\n      }\n\n      if (duration) {\n        queryBuilder.where('LOWER(plan.duration) LIKE :duration', {\n          duration: `%${duration.toLowerCase()}%`,\n        });\n      }\n\n      const [plans, totalPlans] = await queryBuilder.getManyAndCount();\n      const totalPages = Math.ceil(totalPlans / limit);\n\n      if (page > totalPages) {\n        throw new NotFoundException('Number of page is not valid');\n      }\n\n      return {\n        data: plans,\n        totalPlans,\n      };\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entity/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                idProduct\n                            \n                            \n                                    \n                                    \n                                isActive\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                site\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, category => category.product)@JoinColumn({name: 'idCategory'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})@ApiProperty({description: 'The creation date of the product'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255, nullable: true})@ApiProperty({description: 'The description of the product', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        idProduct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()@ApiProperty({description: 'The unique identifier of the product'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})@ApiProperty({description: 'Indicates if the product is active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100})@ApiProperty({description: 'The name of the product'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        site\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Site\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, site => site.products)@JoinColumn({name: 'idSite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP, onUpdate: 'CURRENT_TIMESTAMP'})@ApiProperty({description: 'The last update date of the product'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entity/product.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Site } from '../../sites/entities/site.entity';\nimport { Category } from '../../category/entity/category.entity';\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn()\n  @ApiProperty({ description: 'The unique identifier of the product' })\n  idProduct: number;\n\n  @Column({ length: 100 })\n  @ApiProperty({ description: 'The name of the product' })\n  name: string;\n\n  @Column({ length: 255, nullable: true })\n  @ApiProperty({\n    description: 'The description of the product',\n    required: false,\n  })\n  description?: string;\n\n  @Column({ default: true })\n  @ApiProperty({ description: 'Indicates if the product is active' })\n  isActive: boolean;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  @ApiProperty({ description: 'The creation date of the product' })\n  createdAt: Date;\n\n  @Column({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n    onUpdate: 'CURRENT_TIMESTAMP',\n  })\n  @ApiProperty({ description: 'The last update date of the product' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Site, site => site.products)\n  @JoinColumn({ name: 'idSite' })\n  site: Site;\n\n  @OneToMany(() => Category, category => category.product)\n  @JoinColumn({ name: 'idCategory' })\n  category: Category[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createProduct\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                editProduct\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAllFilter\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAllPagination\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                selectProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a new product'})@ApiResponse({status: 201, description: 'The product has been successfully created', type: Product})\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        editProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    editProduct(product: any, id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('edit/:id')@ApiOperation({summary: 'Edit a product'})@ApiResponse({})\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')@ApiOperation({summary: 'Get all products'})@ApiResponse({status: 200, description: 'Returns an array of products', type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findAllFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFilter(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter-product')@ApiOperation({summary: 'Get products with filter for name, category and site'})\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findAllPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPagination(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter-pagination')@ApiOperation({summary: 'Get products with pagination and filter'})\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        selectProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectProduct(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('select/:id')@ApiOperation({summary: 'Get a product by id'})@ApiResponse({})\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Get,\n  Query,\n  ValidationPipe,\n  Put,\n  Param,\n} from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { Product } from './entity/product.entity';\nimport { CreateProductDto } from './dto/product.dto';\nimport {\n  Public,\n  Resource,\n  Roles,\n  Scopes,\n  Unprotected,\n} from 'nest-keycloak-connect';\n\n@Controller('product')\n@ApiTags('PRODUCTS')\n@Unprotected()\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n\n  @Post('create')\n  @ApiOperation({ summary: 'Create a new product' })\n  @ApiResponse({\n    status: 201,\n    description: 'The product has been successfully created',\n    type: Product,\n  })\n  async createProduct(\n    @Body() createProductDto: CreateProductDto,\n  ): Promise {\n    console.log('createProductDto', createProductDto);\n    return await this.productService.createProduct(createProductDto);\n  }\n\n  @Get('list')\n  @ApiOperation({ summary: 'Get all products' })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns an array of products',\n    type: [Product],\n  })\n  async findAll(): Promise {\n    return await this.productService.findAll();\n  }\n\n  @Get('filter-pagination')\n  @ApiOperation({ summary: 'Get products with pagination and filter' })\n  async findAllPagination(\n    @Query(new ValidationPipe({ transform: true })) query: any,\n  ): Promise {\n    return await this.productService.findAllWithPaginationAndFilter(query);\n  }\n\n  @Get('filter-product')\n  @ApiOperation({\n    summary: 'Get products with filter for name, category and site',\n  })\n  async findAllFilter(@Query() query: any): Promise {\n    return await this.productService.findByFilter(query);\n  }\n\n  @Put('edit/:id')\n  @ApiOperation({ summary: 'Edit a product' })\n  @ApiResponse({})\n  async editProduct(@Body() product: any, @Param() id: any): Promise {\n    return await this.productService.editProduct(product, id.id);\n  }\n\n  @Get('select/:id')\n  @ApiOperation({ summary: 'Get a product by id' })\n  @ApiResponse({})\n  async selectProduct(@Param('id') id: any): Promise {\n    return await this.productService.selecProduct(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './entity/product.entity';\nimport { Category } from 'src/category/entity/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product, Category])],\n  controllers: [ProductController],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                editProduct\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithPaginationAndFilter\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                selecProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository, categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: any)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    editProduct(product: any, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithPaginationAndFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationAndFilter(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        selecProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    selecProduct(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from './entity/product.entity';\nimport { CreateProductDto } from './dto/product.dto';\nimport { Category } from 'src/category/entity/category.entity';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n    @InjectRepository(Category) private readonly categoryRepository: Repository,\n  ) {}\n\n  async findAllWithPaginationAndFilter(query: any): Promise {\n    const { name, page, limit } = query;\n    try {\n      const skip = (page - 1) * limit;\n      const queryBuilder = this.productRepository\n        .createQueryBuilder('product')\n        .where('LOWER(product.name) LIKE :name', { name: `%${name.toLowerCase()}%` })\n        .skip(skip)\n        .take(limit);\n\n      const [products, totalProducts] = await queryBuilder.getManyAndCount();\n      const totalPages = Math.ceil(totalProducts / limit);\n\n      if (page > totalPages) {\n        throw new NotFoundException('No se encontraron registros');\n      }\n\n      return {\n        data: products,\n        totalProducts,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async createProduct(product: any): Promise {\n    try {\n      const newProduct = await this.productRepository.save(product);\n      return {\n        statusCode: 200,\n        message: 'Product list',\n        data: newProduct,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async findAll(): Promise {\n    try {\n      return await this.productRepository.find();\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async findByFilter(query: any): Promise {\n    const { idSite, idProduct } = query;\n    console.log('query', query)\n    try {\n      // Crear el queryBuilder sin ninguna condición inicial\n      const queryBuilder = this.productRepository.createQueryBuilder('product');\n      const queryBuilder2 = this.categoryRepository.createQueryBuilder('category')\n                                                   .leftJoin('category.site', 'site')\n                                                   .leftJoin('category.product', 'product');\n\n      // Agregar la relación con la tabla site y la condición para buscar por idSite\n      if (idSite) {\n        queryBuilder\n          .innerJoin('product.site', 'site')\n          .andWhere('site.idSite = :idSite', { idSite })\n          .andWhere('product.isActive = :isActive', { isActive: true });\n\n        queryBuilder2\n          .andWhere('site.idSite = :idSite', { idSite });\n        }\n\n      // Agregar la condición para buscar por idProduct\n      if (idProduct) {\n        queryBuilder.andWhere('product.idProduct = :idProduct', { idProduct })\n                    .andWhere('product.isActive = :isActive', { isActive: true });\n\n        console.log('idProduct', idProduct)\n        queryBuilder2.andWhere('product.idProduct = :idProduct', { idProduct })\n      }\n\n      if (idSite && idProduct) {\n        queryBuilder2\n          .innerJoin('category.product', 'product')\n          .andWhere('product.idProduct = :idProduct', { idProduct })\n          .andWhere('product.site.idSite = :idSite', { idSite });\n      }\n\n      // Obtener los productos que coinciden con las condiciones de búsqueda\n      const products = await queryBuilder.getMany();\n      console.log('products', products);\n      const category = await queryBuilder2.getMany();\n      console.log('category', category);\n\n      return {\n        products,\n        category,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async editProduct(product: any, id: number): Promise {\n    try {\n      const productToUpdated = await this.productRepository.findOne({ where: { idProduct: id } });\n\n      if (!productToUpdated) {\n        throw new NotFoundException('Product with id ${id} not found');\n      }\n\n      productToUpdated.name = product.name;\n      productToUpdated.description = product.description;\n\n      if(product.hasOwnProperty('isActive')){\n        productToUpdated.isActive = product.isActive;\n      }\n\n      const updatedProduct = await this.productRepository.save(productToUpdated);\n\n      return {\n        statusCode: 200,\n        message: 'Product updated',\n        product: updatedProduct,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async selecProduct(id: number): Promise {\n    try {\n      const product = await this.productRepository.findOne({ where: { idProduct: id } });\n\n      if (!product) {\n        throw new NotFoundException('Product with id ${id} not found');\n      }\n\n      return {\n        statusCode: 200,\n        message: 'Product selected',\n        product,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ResetPasswordEntity.html":{"url":"entities/ResetPasswordEntity.html","title":"entity - ResetPasswordEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ResetPasswordEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/entitys/reset-password.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mail/entitys/reset-password.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mail/entitys/reset-password.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mail/entitys/reset-password.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class ResetPasswordEntity {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ResetPasswordMailController.html":{"url":"controllers/ResetPasswordMailController.html","title":"controller - ResetPasswordMailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ResetPasswordMailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/controller/reset-password/reset-password.mail.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(mail: string, domine: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/mail/controller/reset-password/reset-password.mail.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domine\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { NotFoundException } from '@nestjs/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ResetPasswordMailService } from '../../service/reset-password/reset-password.mail.service';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n\n@Controller('email')\n@Unprotected()\nexport class ResetPasswordMailController {\n  constructor(private ResetPasswordMailService: ResetPasswordMailService) {}\n\n  @Post('reset-password')\n  async sendMail(@Body('mail') mail: string, @Body('domine') domine: string) {\n    try {\n      await this.ResetPasswordMailService.sendPasswordReset(mail, domine);\n      return 'Email sent successfully';\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      } else {\n        console.log('Error en el envío de la info', error);\n        throw new HttpException(\n          'Failed to send the email',\n          HttpStatus.INTERNAL_SERVER_ERROR,\n        );\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResetPasswordMailService.html":{"url":"injectables/ResetPasswordMailService.html","title":"injectable - ResetPasswordMailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResetPasswordMailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/service/reset-password/reset-password.mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUserToken\n                            \n                            \n                                    Async\n                                sendPasswordReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(resetPasswordRepository: Repository, userRepository: Repository, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/service/reset-password/reset-password.mail.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        resetPasswordRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUserToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserToken(resetPasswordEntity: ResetPasswordEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/reset-password/reset-password.mail.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resetPasswordEntity\n                                    \n                                                ResetPasswordEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPasswordReset\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPasswordReset(mail: string, domine: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/reset-password/reset-password.mail.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domine\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResetPasswordEntity } from '../../entitys/reset-password.entity';\nimport { Repository } from 'typeorm';\nimport { UserAdminEntity } from 'src/users/entities/user.entity';\nimport * as jwt from 'jsonwebtoken';\nimport { resetPasswordHTML } from '../../template/reset-password/reset-password.template';\n\n@Injectable()\nexport class ResetPasswordMailService {\n  constructor(\n    @InjectRepository(ResetPasswordEntity)\n    private readonly resetPasswordRepository: Repository,\n    @InjectRepository(UserAdminEntity)\n    private readonly userRepository: Repository,\n    private readonly mailerService: MailerService,\n  ) {}\n\n  async sendPasswordReset(mail: string, domine: string) {\n    try {\n      const user = await this.userRepository.findOne({\n        where: { email: mail },\n      });\n\n      if (!user) {\n        throw new NotFoundException('Usuario no encontrado');\n      }\n\n      const token = jwt.sign({ email: mail }, 'secret', { expiresIn: '1h' });\n\n      const url = `${domine}/${token}`;\n      await this.mailerService.sendMail({\n        to: mail,\n        subject: 'Restablecimiento de contraseña',\n        html: resetPasswordHTML(url),\n      });\n\n      const resetPasswordEntity: ResetPasswordEntity = {\n        email: mail,\n        token: token,\n      };\n\n      await this.createUserToken(resetPasswordEntity);\n    } catch (error) {\n      console.error(error);\n      throw error; // Propaga el error al cliente\n    }\n  }\n\n  async createUserToken(resetPasswordEntity: ResetPasswordEntity) {\n    try {\n      await this.resetPasswordRepository.save(resetPasswordEntity);\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Role {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RolePaywallModule.html":{"url":"entities/RolePaywallModule.html","title":"entity - RolePaywallModule","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RolePaywallModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/role-paywall-module.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                paywallModule\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paywallModule\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaywallModule\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { PaywallModule } from './paywallModule.entity';\n\n@Entity()\nexport class RolePaywallModule {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  role: string;\n\n  @ManyToOne(() => PaywallModule, { eager: false })\n  paywallModule: PaywallModule;\n\n  @Column({ nullable: true, default: false })\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RolePaywallModuleActionRelation.html":{"url":"entities/RolePaywallModuleActionRelation.html","title":"entity - RolePaywallModuleActionRelation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RolePaywallModuleActionRelation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/role-paywall-module-actions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                paywallModule\n                            \n                            \n                                    \n                                paywallModuleActionRelation\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module-actions.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paywallModule\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaywallModule\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module-actions.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paywallModuleActionRelation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaywallModuleActionRelation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module-actions.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/role-paywall-module-actions.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, ManyToOne, Column } from 'typeorm';\nimport { PaywallModule } from './paywallModule.entity';\nimport { PaywallModuleActionRelation } from './paywall-module-actions-relations.entity';\n\n@Entity()\nexport class RolePaywallModuleActionRelation {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  role: string;\n\n  @ManyToOne(() => PaywallModule, { eager: true })\n  paywallModule: PaywallModule;\n\n  @ManyToOne(() => PaywallModuleActionRelation, { eager: true })\n  paywallModuleActionRelation: PaywallModuleActionRelation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRoleDto: CreateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateRoleDto: UpdateRoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n\n//Documentation\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('ROLES')\n@Controller('roles')\n@Unprotected()\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Post()\n  create(@Body() createRoleDto: CreateRoleDto) {\n    return this.rolesService.create(createRoleDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateRoleDto: UpdateRoleDto) {\n    return this.rolesService.update(+id, updateRoleDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.rolesService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService\n\nRolesService\n\n\n\nRolesModule\n\nRolesModule\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  controllers: [RolesController],\n  providers: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createRoleDto: CreateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDto\n                                    \n                                                CreateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateRoleDto: UpdateRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRoleDto\n                                    \n                                                UpdateRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateRoleDto } from './dto/create-role.dto';\nimport { UpdateRoleDto } from './dto/update-role.dto';\n\n@Injectable()\nexport class RolesService {\n  create(createRoleDto: CreateRoleDto) {\n    return 'This action adds a new role';\n  }\n\n  findAll() {\n    return `This action returns all roles`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} role`;\n  }\n\n  update(id: number, updateRoleDto: UpdateRoleDto) {\n    return `This action updates a #${id} role`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} role`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691181176026.html":{"url":"classes/SetDb1691181176026.html","title":"class - SetDb1691181176026","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691181176026\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691181176026-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691181176026'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691181176026-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691181176026-set-db.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691181176026-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691181176026 implements MigrationInterface {\n    name = 'SetDb1691181176026'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"plans\" (\"idPlan\" SERIAL NOT NULL, \"idVersionPlan\" integer NOT NULL DEFAULT '1', \"description\" character varying NOT NULL, \"name\" character varying NOT NULL, \"userType\" character varying NOT NULL, \"isActive\" boolean NOT NULL, \"created_at\" TIMESTAMP NOT NULL DEFAULT now(), \"updated_at\" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT \"PK_af3c256f4edc5a9a4d49c3b42f1\" PRIMARY KEY (\"idPlan\"))`);\n        await queryRunner.query(`CREATE TABLE \"PlansProductCategory\" (\"idPlansProductCategory\" integer NOT NULL, \"amount\" integer NOT NULL, \"unlimited\" boolean NOT NULL, \"frequency\" character varying NOT NULL, \"typeDuration\" character varying NOT NULL, \"duration\" integer NOT NULL, \"sitesIdSite\" integer, \"idPlan\" integer, CONSTRAINT \"PK_a30433595707fb3f8c6f01bce52\" PRIMARY KEY (\"idPlansProductCategory\"))`);\n        await queryRunner.query(`CREATE TABLE \"site\" (\"idSite\" SERIAL NOT NULL, \"name\" character varying(255) NOT NULL, \"description\" text NOT NULL, \"url\" character varying(255) NOT NULL, \"isActive\" boolean NOT NULL, \"createAt\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updateAt\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), CONSTRAINT \"UQ_9669a09fcc0eb6d2794a658f647\" UNIQUE (\"name\"), CONSTRAINT \"UQ_cfeaa7e14361e11b3fdfd9fc69f\" UNIQUE (\"url\"), CONSTRAINT \"PK_5733d365f4c4c98065f277ab9ed\" PRIMARY KEY (\"idSite\"))`);\n        await queryRunner.query(`CREATE TABLE \"product\" (\"idProduct\" SERIAL NOT NULL, \"name\" character varying(100) NOT NULL, \"description\" character varying(255), \"isActive\" boolean NOT NULL DEFAULT true, \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(), \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(), \"siteIdSite\" integer, CONSTRAINT \"PK_318999ba9feeaa49ff117c91f64\" PRIMARY KEY (\"idProduct\"))`);\n        await queryRunner.query(`CREATE TABLE \"categories\" (\"idCategory\" SERIAL NOT NULL, \"name\" character varying NOT NULL, \"description\" character varying NOT NULL, \"rules\" character varying NOT NULL, \"siteIdSite\" integer, \"productIdProduct\" integer, CONSTRAINT \"PK_aff1975ddbbca8a721af0ef170f\" PRIMARY KEY (\"idCategory\"))`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ADD CONSTRAINT \"FK_cfe9c416caaabe7aa810b1eaa2a\" FOREIGN KEY (\"sitesIdSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ADD CONSTRAINT \"FK_1cfbe8c6655a8d0d92649a42022\" FOREIGN KEY (\"idPlan\") REFERENCES \"plans\"(\"idPlan\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"product\" ADD CONSTRAINT \"FK_35c00517e74eb50de31c6c1b343\" FOREIGN KEY (\"siteIdSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD CONSTRAINT \"FK_d1f695b7b6024f9de5be0ddb8eb\" FOREIGN KEY (\"siteIdSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD CONSTRAINT \"FK_b3351b0fd1acbaa06953535b8c4\" FOREIGN KEY (\"productIdProduct\") REFERENCES \"product\"(\"idProduct\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP CONSTRAINT \"FK_b3351b0fd1acbaa06953535b8c4\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP CONSTRAINT \"FK_d1f695b7b6024f9de5be0ddb8eb\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" DROP CONSTRAINT \"FK_35c00517e74eb50de31c6c1b343\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" DROP CONSTRAINT \"FK_1cfbe8c6655a8d0d92649a42022\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" DROP CONSTRAINT \"FK_cfe9c416caaabe7aa810b1eaa2a\"`);\n        await queryRunner.query(`DROP TABLE \"categories\"`);\n        await queryRunner.query(`DROP TABLE \"product\"`);\n        await queryRunner.query(`DROP TABLE \"site\"`);\n        await queryRunner.query(`DROP TABLE \"PlansProductCategory\"`);\n        await queryRunner.query(`DROP TABLE \"plans\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691184456498.html":{"url":"classes/SetDb1691184456498.html","title":"class - SetDb1691184456498","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691184456498\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691184456498-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691184456498'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691184456498-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691184456498-set-db.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691184456498-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691184456498 implements MigrationInterface {\n    name = 'SetDb1691184456498'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"product\" DROP CONSTRAINT \"FK_35c00517e74eb50de31c6c1b343\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" RENAME COLUMN \"siteIdSite\" TO \"idPlan\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" ADD CONSTRAINT \"FK_3b16c8cc0f96ff966afd61660c3\" FOREIGN KEY (\"idPlan\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"product\" DROP CONSTRAINT \"FK_3b16c8cc0f96ff966afd61660c3\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" RENAME COLUMN \"idPlan\" TO \"siteIdSite\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" ADD CONSTRAINT \"FK_35c00517e74eb50de31c6c1b343\" FOREIGN KEY (\"siteIdSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691184574917.html":{"url":"classes/SetDb1691184574917.html","title":"class - SetDb1691184574917","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691184574917\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691184574917-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691184574917'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691184574917-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691184574917-set-db.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691184574917-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691184574917 implements MigrationInterface {\n    name = 'SetDb1691184574917'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"product\" DROP CONSTRAINT \"FK_3b16c8cc0f96ff966afd61660c3\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" DROP CONSTRAINT \"FK_cfe9c416caaabe7aa810b1eaa2a\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" RENAME COLUMN \"idPlan\" TO \"idSite\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" RENAME COLUMN \"sitesIdSite\" TO \"idSite\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" ADD CONSTRAINT \"FK_4f88577c3ca6126a27e06e96414\" FOREIGN KEY (\"idSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ADD CONSTRAINT \"FK_b32e1b18700e9dc6e120160f086\" FOREIGN KEY (\"idSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" DROP CONSTRAINT \"FK_b32e1b18700e9dc6e120160f086\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" DROP CONSTRAINT \"FK_4f88577c3ca6126a27e06e96414\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" RENAME COLUMN \"idSite\" TO \"sitesIdSite\"`);\n        await queryRunner.query(`ALTER TABLE \"product\" RENAME COLUMN \"idSite\" TO \"idPlan\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ADD CONSTRAINT \"FK_cfe9c416caaabe7aa810b1eaa2a\" FOREIGN KEY (\"sitesIdSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"product\" ADD CONSTRAINT \"FK_3b16c8cc0f96ff966afd61660c3\" FOREIGN KEY (\"idPlan\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691186525496.html":{"url":"classes/SetDb1691186525496.html","title":"class - SetDb1691186525496","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691186525496\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691186525496-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691186525496'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691186525496-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691186525496-set-db.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691186525496-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691186525496 implements MigrationInterface {\n    name = 'SetDb1691186525496'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP CONSTRAINT \"FK_d1f695b7b6024f9de5be0ddb8eb\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP CONSTRAINT \"FK_b3351b0fd1acbaa06953535b8c4\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP COLUMN \"siteIdSite\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP COLUMN \"productIdProduct\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD \"idSite\" integer`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD \"idProduct\" integer`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD CONSTRAINT \"FK_2c2b0e50a64530b0efebb9815f0\" FOREIGN KEY (\"idSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD CONSTRAINT \"FK_b50a7fb7ec0fb1cf1a7bee1468e\" FOREIGN KEY (\"idProduct\") REFERENCES \"product\"(\"idProduct\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP CONSTRAINT \"FK_b50a7fb7ec0fb1cf1a7bee1468e\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP CONSTRAINT \"FK_2c2b0e50a64530b0efebb9815f0\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP COLUMN \"idProduct\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" DROP COLUMN \"idSite\"`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD \"productIdProduct\" integer`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD \"siteIdSite\" integer`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD CONSTRAINT \"FK_b3351b0fd1acbaa06953535b8c4\" FOREIGN KEY (\"productIdProduct\") REFERENCES \"product\"(\"idProduct\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"categories\" ADD CONSTRAINT \"FK_d1f695b7b6024f9de5be0ddb8eb\" FOREIGN KEY (\"siteIdSite\") REFERENCES \"site\"(\"idSite\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691512677390.html":{"url":"classes/SetDb1691512677390.html","title":"class - SetDb1691512677390","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691512677390\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691512677390-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691512677390'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691512677390-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691512677390-set-db.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691512677390-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691512677390 implements MigrationInterface {\n    name = 'SetDb1691512677390'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ADD \"idProduct\" integer NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ADD \"idCategory\" integer NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" DROP COLUMN \"idCategory\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" DROP COLUMN \"idProduct\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691515083659.html":{"url":"classes/SetDb1691515083659.html","title":"class - SetDb1691515083659","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691515083659\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691515083659-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691515083659'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691515083659-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691515083659-set-db.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691515083659-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691515083659 implements MigrationInterface {\n    name = 'SetDb1691515083659'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE SEQUENCE IF NOT EXISTS \"PlansProductCategory_idPlansProductCategory_seq\" OWNED BY \"PlansProductCategory\".\"idPlansProductCategory\"`);\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ALTER COLUMN \"idPlansProductCategory\" SET DEFAULT nextval('\"PlansProductCategory_idPlansProductCategory_seq\"')`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"PlansProductCategory\" ALTER COLUMN \"idPlansProductCategory\" DROP DEFAULT`);\n        await queryRunner.query(`DROP SEQUENCE \"PlansProductCategory_idPlansProductCategory_seq\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDb1691708514379.html":{"url":"classes/SetDb1691708514379.html","title":"class - SetDb1691708514379","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDb1691708514379\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1691708514379-set-db.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDb1691708514379'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1691708514379-set-db.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691708514379-set-db.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1691708514379-set-db.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDb1691708514379 implements MigrationInterface {\n    name = 'SetDb1691708514379'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"my_site\" (\"idMySite\" SERIAL NOT NULL, \"name\" character varying(255) NOT NULL, \"description\" text NOT NULL, \"url\" character varying(255) NOT NULL, \"isActive\" boolean NOT NULL, \"createAt\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), \"updateAt\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), CONSTRAINT \"UQ_6794ad6a0a39b194360d209e819\" UNIQUE (\"name\"), CONSTRAINT \"UQ_cae803417d3133fcd01ba998f85\" UNIQUE (\"url\"), CONSTRAINT \"PK_22c67c00ba975fbe51384cc64e7\" PRIMARY KEY (\"idMySite\"))`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP TABLE \"my_site\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDbPaywalmodule1692297610787.html":{"url":"classes/SetDbPaywalmodule1692297610787.html","title":"class - SetDbPaywalmodule1692297610787","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDbPaywalmodule1692297610787\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1692297610787-set-db-paywalmodule.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDbPaywalmodule1692297610787'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1692297610787-set-db-paywalmodule.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692297610787-set-db-paywalmodule.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692297610787-set-db-paywalmodule.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDbPaywalmodule1692297610787 implements MigrationInterface {\n    name = 'SetDbPaywalmodule1692297610787'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"paywall_module\" (\"id\" SERIAL NOT NULL, \"name\" character varying NOT NULL, \"description\" character varying NOT NULL, \"createAt\" TIMESTAMP NOT NULL, CONSTRAINT \"PK_59cca1a07374ab8239145ebccc2\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"paywall_module_action\" (\"id\" SERIAL NOT NULL, \"description\" character varying NOT NULL, CONSTRAINT \"PK_1334fb798cf8c960af1d9b7fd40\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"paywall_module_action_relation\" (\"id\" SERIAL NOT NULL, \"paywallModuleId\" integer, \"paywallModuleActionId\" integer, CONSTRAINT \"PK_da43db32f82b42b69b1a78ec17d\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"role_paywall_module_action_relation\" (\"id\" SERIAL NOT NULL, \"role\" integer NOT NULL, \"paywallModuleId\" integer, \"paywallModuleActionRelationId\" integer, CONSTRAINT \"PK_d50fdeadd31196d572847694f8d\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"role_paywall_module\" (\"id\" SERIAL NOT NULL, \"role\" integer NOT NULL, \"status\" integer NOT NULL, \"paywallModuleId\" integer, CONSTRAINT \"PK_5cf910d5478ec6a35693632fd29\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`ALTER TABLE \"paywall_module_action_relation\" ADD CONSTRAINT \"FK_1e2ff990d66e32b17ef77805843\" FOREIGN KEY (\"paywallModuleId\") REFERENCES \"paywall_module\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"paywall_module_action_relation\" ADD CONSTRAINT \"FK_51ff8387e9f4fc36e68306c96a2\" FOREIGN KEY (\"paywallModuleActionId\") REFERENCES \"paywall_module_action\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" ADD CONSTRAINT \"FK_594f85fa3a0b1028cdd8a3a81b5\" FOREIGN KEY (\"paywallModuleId\") REFERENCES \"paywall_module\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" ADD CONSTRAINT \"FK_f9d191fcac07207aba34d2ab7c0\" FOREIGN KEY (\"paywallModuleActionRelationId\") REFERENCES \"paywall_module_action_relation\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD CONSTRAINT \"FK_4072d596466fdb1f515f53ddace\" FOREIGN KEY (\"paywallModuleId\") REFERENCES \"paywall_module\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP CONSTRAINT \"FK_4072d596466fdb1f515f53ddace\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" DROP CONSTRAINT \"FK_f9d191fcac07207aba34d2ab7c0\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" DROP CONSTRAINT \"FK_594f85fa3a0b1028cdd8a3a81b5\"`);\n        await queryRunner.query(`ALTER TABLE \"paywall_module_action_relation\" DROP CONSTRAINT \"FK_51ff8387e9f4fc36e68306c96a2\"`);\n        await queryRunner.query(`ALTER TABLE \"paywall_module_action_relation\" DROP CONSTRAINT \"FK_1e2ff990d66e32b17ef77805843\"`);\n        await queryRunner.query(`DROP TABLE \"role_paywall_module\"`);\n        await queryRunner.query(`DROP TABLE \"role_paywall_module_action_relation\"`);\n        await queryRunner.query(`DROP TABLE \"paywall_module_action_relation\"`);\n        await queryRunner.query(`DROP TABLE \"paywall_module_action\"`);\n        await queryRunner.query(`DROP TABLE \"paywall_module\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDbPaywalmodule1692380137673.html":{"url":"classes/SetDbPaywalmodule1692380137673.html","title":"class - SetDbPaywalmodule1692380137673","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDbPaywalmodule1692380137673\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1692380137673-set-db-paywalmodule.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetDbPaywalmodule1692380137673'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1692380137673-set-db-paywalmodule.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692380137673-set-db-paywalmodule.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692380137673-set-db-paywalmodule.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetDbPaywalmodule1692380137673 implements MigrationInterface {\n    name = 'SetDbPaywalmodule1692380137673'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"time\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"typeDuration\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"duration\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"renewal_rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"special_rate_enabled\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"special_rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"renewal_special_rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"start_date\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"end_date\"`);\n        await queryRunner.query(`ALTER TABLE \"paywall_module\" ALTER COLUMN \"createAt\" SET DEFAULT now()`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"paywall_module\" ALTER COLUMN \"createAt\" DROP DEFAULT`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"end_date\" date`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"start_date\" date`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"renewal_special_rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"special_rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"special_rate_enabled\" boolean NOT NULL DEFAULT false`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"renewal_rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"duration\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"typeDuration\" character varying`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"time\" character varying`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetNewPlansFields1692380743605.html":{"url":"classes/SetNewPlansFields1692380743605.html","title":"class - SetNewPlansFields1692380743605","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetNewPlansFields1692380743605\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1692380743605-set-new-plans-fields.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetNewPlansFields1692380743605'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1692380743605-set-new-plans-fields.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692380743605-set-new-plans-fields.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692380743605-set-new-plans-fields.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetNewPlansFields1692380743605 implements MigrationInterface {\n    name = 'SetNewPlansFields1692380743605'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"time\" character varying`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"typeDuration\" character varying`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"duration\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"renewal_rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"special_rate_enabled\" boolean NOT NULL DEFAULT false`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"special_rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"renewal_special_rate\" integer`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"start_date\" date`);\n        await queryRunner.query(`ALTER TABLE \"plans\" ADD \"end_date\" date`);\n        await queryRunner.query(`ALTER TABLE \"paywall_module\" ALTER COLUMN \"createAt\" DROP DEFAULT`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"paywall_module\" ALTER COLUMN \"createAt\" SET DEFAULT now()`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"end_date\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"start_date\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"renewal_special_rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"special_rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"special_rate_enabled\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"renewal_rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"rate\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"duration\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"typeDuration\"`);\n        await queryRunner.query(`ALTER TABLE \"plans\" DROP COLUMN \"time\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetNewPlansFields1692815139944.html":{"url":"classes/SetNewPlansFields1692815139944.html","title":"class - SetNewPlansFields1692815139944","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetNewPlansFields1692815139944\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1692815139944-set-new-plans-fields.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetNewPlansFields1692815139944'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1692815139944-set-new-plans-fields.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692815139944-set-new-plans-fields.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692815139944-set-new-plans-fields.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetNewPlansFields1692815139944 implements MigrationInterface {\n    name = 'SetNewPlansFields1692815139944'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"status\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"paywall_module_id\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"isActive\" boolean NOT NULL DEFAULT false`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"paywallModuleId\" integer`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" DROP COLUMN \"role\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" ADD \"role\" character varying NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"role\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"role\" character varying`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"role\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"role\" integer`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" DROP COLUMN \"role\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" ADD \"role\" integer NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"paywallModuleId\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"isActive\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"paywall_module_id\" integer`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"status\" integer NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetNewPlansFields1692822538207.html":{"url":"classes/SetNewPlansFields1692822538207.html","title":"class - SetNewPlansFields1692822538207","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetNewPlansFields1692822538207\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1692822538207-set-new-plans-fields.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetNewPlansFields1692822538207'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1692822538207-set-new-plans-fields.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692822538207-set-new-plans-fields.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692822538207-set-new-plans-fields.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetNewPlansFields1692822538207 implements MigrationInterface {\n    name = 'SetNewPlansFields1692822538207'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"paywallModuleId\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" DROP COLUMN \"role\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" ADD \"role\" integer NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ALTER COLUMN \"role\" SET NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ALTER COLUMN \"isActive\" DROP NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ALTER COLUMN \"isActive\" SET NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ALTER COLUMN \"role\" DROP NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" DROP COLUMN \"role\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module_action_relation\" ADD \"role\" character varying NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"paywallModuleId\" integer`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetNewPlansFields1692824385127.html":{"url":"classes/SetNewPlansFields1692824385127.html","title":"class - SetNewPlansFields1692824385127","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetNewPlansFields1692824385127\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1692824385127-set-new-plans-fields.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SetNewPlansFields1692824385127'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1692824385127-set-new-plans-fields.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692824385127-set-new-plans-fields.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1692824385127-set-new-plans-fields.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class SetNewPlansFields1692824385127 implements MigrationInterface {\n    name = 'SetNewPlansFields1692824385127'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD \"paywallModuleId\" integer`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" ADD CONSTRAINT \"FK_4072d596466fdb1f515f53ddace\" FOREIGN KEY (\"paywallModuleId\") REFERENCES \"paywall_module\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP CONSTRAINT \"FK_4072d596466fdb1f515f53ddace\"`);\n        await queryRunner.query(`ALTER TABLE \"role_paywall_module\" DROP COLUMN \"paywallModuleId\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Site.html":{"url":"entities/Site.html","title":"entity - Site","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Site\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sites/entities/site.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                createAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                idSite\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                plansProductCategory\n                            \n                            \n                                    \n                                products\n                            \n                            \n                                    \n                                updateAt\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, category => category.site)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        idSite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        plansProductCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PlansProductCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, plansProductCategory => plansProductCategory.sites)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.site)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sites/entities/site.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { PlansProductCategory } from '../../common/entity/plans-products-categories.entity';\nimport { Product } from '../../product/entity/product.entity';\nimport {\n  Column,\n  PrimaryGeneratedColumn,\n  Entity,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Category } from '../../category/entity/category.entity';\n\n@Entity()\nexport class Site {\n  @PrimaryGeneratedColumn()\n  idSite: number;\n\n  @Column({ type: 'varchar', length: 255, unique: true })\n  name: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 255, unique: true })\n  url: string;\n\n  @Column({ type: 'boolean' })\n  isActive: boolean;\n\n  @CreateDateColumn({ type: 'timestamptz', default: () => 'CURRENT_TIMESTAMP' })\n  createAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamptz', default: () => 'CURRENT_TIMESTAMP' })\n  updateAt: Date;\n\n  @OneToMany(() => Category, category => category.site)\n  category: Category[];\n\n  @OneToMany(() => PlansProductCategory, plansProductCategory => plansProductCategory.sites)\n  plansProductCategory: PlansProductCategory[];\n\n  @OneToMany(() => Product, product => product.site)\n  products: Product[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SitesController.html":{"url":"controllers/SitesController.html","title":"controller - SitesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SitesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sites/sites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sites\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                filterSites\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAllPagination\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                selectSite\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createSiteDto: CreateSiteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiOperation({summary: 'Create a site'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:39\n                \n            \n\n\n            \n                \n                    Create a site.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createSiteDto\n                                    \n                                                CreateSiteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe DTO object for creating a site.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The created site.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        filterSites\n                        \n                    \n                \n            \n            \n                \n                    \n                    filterSites(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter-site')@ApiOperation({summary: 'Get all the created sites'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')@ApiOperation({summary: 'Get all the created sites'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:50\n                \n            \n\n\n            \n                \n                    Get all the created sites.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        All the created sites.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findAllPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPagination(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('filter-pagination')@ApiOperation({summary: 'Get products with pagination and filter'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a created sites by id'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:77\n                \n            \n\n\n            \n                \n                    Get a created site by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The found site.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('remove/:id')@ApiOperation({summary: 'Delete a site by id'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:102\n                \n            \n\n\n            \n                \n                    Delete a site by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the site to delete.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        selectSite\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectSite(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('select/:id')@ApiOperation({summary: 'Get all the created sites'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateSiteDto: UpdateSiteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update a site by id'})\n                \n            \n\n            \n                \n                    Defined in src/sites/sites.controller.ts:90\n                \n            \n\n\n            \n                \n                    Update a site by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the site to update.\n\n\n                                    \n                                \n                                \n                                    updateSiteDto\n                                    \n                                                UpdateSiteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe DTO object containing updated site data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The updated site.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { SitesService } from './sites.service';\nimport { CreateSiteDto } from './dto/create-site.dto';\nimport { UpdateSiteDto } from './dto/update-site.dto';\nimport {\n  Public,\n  Resource,\n  Roles,\n  Scopes,\n  Unprotected,\n} from 'nest-keycloak-connect';\n//Documentation\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('SITES')\n@Controller('sites')\n@Unprotected()\nexport class SitesController {\n  constructor(private readonly sitesService: SitesService) {}\n\n  /**\n   * Create a site.\n   *\n   * @param {CreateSiteDto} createSiteDto - The DTO object for creating a site.\n   * @returns {Promise} The created site.\n   */\n  @Post('create')\n  @ApiOperation({ summary: 'Create a site' })\n  create(@Body() createSiteDto: CreateSiteDto) {\n    return this.sitesService.create(createSiteDto);\n  }\n\n  /**\n   * Get all the created sites.\n   *\n   * @returns {Promise} All the created sites.\n   */\n  @Get('list')\n  @ApiOperation({ summary: 'Get all the created sites' })\n  findAll() {\n    return this.sitesService.findAll();\n  }\n\n  @Get('filter-site')\n  @ApiOperation({ summary: 'Get all the created sites' })\n  filterSites(@Query() query: any): Promise {\n    return this.sitesService.findByFilter(query);\n  }\n\n  @Get('filter-pagination')\n  @ApiOperation({ summary: 'Get products with pagination and filter' })\n  async findAllPagination(\n    @Query(new ValidationPipe({ transform: true })) query: any,\n  ): Promise {\n    console.log('query', query)\n    return await this.sitesService.findAllWithPaginationAndFilter(query);\n  }\n\n  /**\n   * Get a created site by ID.\n   *\n   * @param {string} idSite - The ID of the site to retrieve.\n   * @returns {Promise} The found site.\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Get a created sites by id' })\n  findOne(@Param('id') id: string) {\n    return this.sitesService.findOne(+id);\n  }\n\n  /**\n   * Update a site by ID.\n   *\n   * @param {string} id - The ID of the site to update.\n   * @param {UpdateSiteDto} updateSiteDto - The DTO object containing updated site data.\n   * @returns {Promise} The updated site.\n   */\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update a site by id' })\n  update(@Param('id') id: string, @Body() updateSiteDto: UpdateSiteDto) {\n    return this.sitesService.update(+id, updateSiteDto);\n  }\n\n  /**\n   * Delete a site by ID.\n   *\n   * @param {string} id - The ID of the site to delete.\n   * @returns {Promise}\n   */\n  @Delete('remove/:id')\n  @ApiOperation({ summary: 'Delete a site by id' })\n  remove(@Param('id') id: number) {\n    return this.sitesService.remove(id);\n  }\n\n  @Get('select/:id')\n  @ApiOperation({ summary: 'Get all the created sites' })\n  selectSite(@Param('id') id: number) {\n    return this.sitesService.selectSites(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SitesModule.html":{"url":"modules/SitesModule.html","title":"module - SitesModule","body":"\n                   \n\n\n\n\n    Modules\n    SitesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SitesModule\n\n\n\ncluster_SitesModule_providers\n\n\n\n\nSitesService\n\nSitesService\n\n\n\nSitesModule\n\nSitesModule\n\nSitesModule -->\n\nSitesService->SitesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sites/sites.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SitesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SitesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // TypeORM\nimport { TypeOrmModule } from '@nestjs/typeorm/dist';\n\nimport { Module } from '@nestjs/common';\n\nimport { SitesController } from './sites.controller';\nimport { SitesService } from './sites.service';\nimport { Site } from './entities/site.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Site])],\n  controllers: [SitesController],\n  providers: [SitesService],\n})\nexport class SitesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SitesService.html":{"url":"injectables/SitesService.html","title":"injectable - SitesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SitesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sites/sites.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithPaginationAndFilter\n                            \n                            \n                                    Async\n                                findByFilter\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                selectSites\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(siteRepo: Repository, i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/sites/sites.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        siteRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createSiteDto: CreateSiteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:27\n                \n            \n\n\n            \n                \n                    Creates a new Site with id and timestamps for createdAt and updatedAt.\nconst newSite = await this.sitesService.create(createSiteDto);\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createSiteDto\n                                    \n                                                CreateSiteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe DTO object for creating a site.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const newSite = await this.sitesService.create(createSiteDto);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The created site.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:38\n                \n            \n\n\n            \n                \n                    Retrieves all sites.\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        All the sites.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithPaginationAndFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithPaginationAndFilter(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilter\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilter(query: any)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:52\n                \n            \n\n\n            \n                \n                    Finds a site by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the site to find.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The found site.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:83\n                \n            \n\n\n            \n                \n                    Removes a site by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the site to remove.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        selectSites\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectSites(id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateSiteDto: UpdateSiteDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sites/sites.service.ts:68\n                \n            \n\n\n            \n                \n                    Updates a site by ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ID of the site to update.\n\n\n                                    \n                                \n                                \n                                    updateSiteDto\n                                    \n                                                UpdateSiteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe DTO object containing updated site data.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The updated site.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm/dist/common';\nimport { Repository } from 'typeorm';\nimport { Site } from './entities/site.entity';\n\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateSiteDto } from './dto/create-site.dto';\nimport { UpdateSiteDto } from './dto/update-site.dto';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\n@Injectable()\nexport class SitesService {\n  constructor(\n    @InjectRepository(Site) private siteRepo: Repository,\n    private readonly i18n: I18nService,\n  ) {}\n\n  /**\n   * Creates a new Site with id and timestamps for createdAt and updatedAt.\n   *\n   * @param {CreateSiteDto} createSiteDto - The DTO object for creating a site.\n   * @returns {Promise} The created site.\n   *\n   * @example\n   * const newSite = await this.sitesService.create(createSiteDto);\n   */\n  create(createSiteDto: CreateSiteDto): Promise {\n    console.log('createSiteDto', createSiteDto);\n    const site = this.siteRepo.save(createSiteDto);\n    return site;\n  }\n\n  /**\n   * Retrieves all sites.\n   *\n   * @returns {Promise} All the sites.\n   */\n  findAll(): Promise {\n    return this.siteRepo.find();\n    // return this.i18n.t('validation.IS_STRING', {\n    //   lang: I18nContext.current().lang,\n    // });\n  }\n\n  /**\n   * Finds a site by ID.\n   *\n   * @param {number} id - The ID of the site to find.\n   * @returns {Promise} The found site.\n   * @throws {NotFoundException} If the site with the given ID is not found.\n   */\n  async findOne(id: number): Promise {\n    const site = await this.siteRepo.findOne({ where: { idSite: id } });\n    if (!site) {\n      throw new NotFoundException(`Site #${id} not found`);\n    }\n    return site;\n  }\n\n  /**\n   * Updates a site by ID.\n   *\n   * @param {number} id - The ID of the site to update.\n   * @param {UpdateSiteDto} updateSiteDto - The DTO object containing updated site data.\n   * @returns {Promise} The updated site.\n   * @throws {NotFoundException} If the site with the given ID is not found.\n   */\n  async update(id: number, updateSiteDto: UpdateSiteDto): Promise {\n    const site = await this.siteRepo.findOne({ where: { idSite: id } });\n    if (!site) {\n      throw new NotFoundException(`Site #${id} not found`);\n    }\n    this.siteRepo.merge(site, updateSiteDto);\n    return this.siteRepo.save(site);\n  }\n\n  /**\n   * Removes a site by ID.\n   *\n   * @param {number} id - The ID of the site to remove.\n   * @returns {Promise}\n   */\n  remove(id: number): Promise {\n    return this.siteRepo.delete(id);\n  }\n\n  async selectSites(id: any): Promise {\n    try {\n      console.log('id', id);\n      const site = await this.siteRepo.findOne({ where: { idSite: id } });\n\n      if (!site) {\n        throw new NotFoundException(`Site #${id} not found`);\n      }\n\n      return site;\n    } catch (error: any) {\n      console.log('error', error);\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async findByFilter(query: any): Promise {\n    const { name } = query;\n\n    try {\n      const queryBuilder = this.siteRepo\n        .createQueryBuilder('site')\n        .where('LOWER(site.name) LIKE :name', {\n          name: `%${name.toLowerCase()}%`,\n        });\n\n      const sites = await queryBuilder.getMany();\n      console.log('sites', sites);\n      return sites;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async findAllWithPaginationAndFilter(query: any): Promise {\n    const { name, isActive, page, limit } = query;\n\n    try {\n      const skip = (page - 1) * limit;\n      const queryBuilder = this.siteRepo.createQueryBuilder('site');\n\n      if (name) {\n        queryBuilder.andWhere('LOWER(site.name) LIKE :name', {\n          name: `%${name.toLowerCase()}%`,\n        });\n      }\n\n      if (isActive) {\n        queryBuilder.andWhere('site.isActive = :isActive', { isActive: isActive});\n      }\n\n      queryBuilder.skip(skip).take(limit);\n      //   console.log('queryBuilder: ', queryBuilder.getQuery());\n      const [sites, totalSites] = await queryBuilder.getManyAndCount();\n      const totalPages = Math.ceil(totalSites / limit);\n\n      if (page > totalPages) {\n        throw new NotFoundException('Number of page is not valid');\n      }\n\n      return {\n        data: sites,\n        totalSites,\n      };\n    } catch (error: any) {\n      throw new NotFoundException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Template.html":{"url":"classes/Template.html","title":"class - Template","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Template\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/template-manager/chemma/template.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                css\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                html\n                            \n                            \n                                    \n                                img\n                            \n                            \n                                    \n                                js\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        css\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        html\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        js\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/template-manager/chemma/template.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Schema, Prop, SchemaFactory } from '@nestjs/mongoose'\nimport { HydratedDocument } from 'mongoose'\n\nexport type TemplateDocument = HydratedDocument\n\n@Schema()\nexport class Template {\n\n    @Prop()\n    name: string\n\n    @Prop()\n    description: string\n\n    @Prop()\n    html: string\n\n    @Prop()\n    css: string\n\n    @Prop()\n    js: string\n\n    @Prop()\n    img: string\n\n    @Prop()\n    tags: string[]\n\n    @Prop()\n    date: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TemplateManagerController.html":{"url":"controllers/TemplateManagerController.html","title":"controller - TemplateManagerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TemplateManagerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/template-manager/template-manager.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                template-manager\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport { TemplateManagerService } from './template-manager.service';\n\n\n@Controller('template-manager')\nexport class TemplateManagerController {\n\n  // constructor(private readonly templateManagerService: TemplateManagerService) { }\n\n  // @Post('create')\n  // async create(@Body() body: any) {\n  //   return await this.templateManagerService.create(body)\n  // }\n\n  // @Get('findAll')\n  // async findAll() {\n  //   return await this.templateManagerService.findAll()\n  // }\n\n  // @Get('findOne')\n  // async findOne(@Param('id') id: string) {\n  //   return await this.templateManagerService.findOne(id)\n  // }\n\n  // @Put('update')\n  // async update(@Param('id') id: string, @Body() body: any) {\n  //   return await this.templateManagerService.update(id, body)\n  // }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TemplateManagerModule.html":{"url":"modules/TemplateManagerModule.html","title":"module - TemplateManagerModule","body":"\n                   \n\n\n\n\n    Modules\n    TemplateManagerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TemplateManagerModule\n\n\n\ncluster_TemplateManagerModule_providers\n\n\n\n\nTemplateManagerService\n\nTemplateManagerService\n\n\n\nTemplateManagerModule\n\nTemplateManagerModule\n\nTemplateManagerModule -->\n\nTemplateManagerService->TemplateManagerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/template-manager/template-manager.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TemplateManagerService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TemplateManagerController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TemplateManagerService } from './template-manager.service';\nimport { TemplateManagerController } from './template-manager.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Template } from './chemma/template.schema';\n\n@Module({\n  // imports: [MongooseModule.forFeature([{ name: 'Template', schema: Template }])],\n  providers: [TemplateManagerService],\n  controllers: [TemplateManagerController]\n})\nexport class TemplateManagerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemplateManagerService.html":{"url":"injectables/TemplateManagerService.html","title":"injectable - TemplateManagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TemplateManagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/template-manager/template-manager.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Template, TemplateDocument } from './chemma/template.schema';\n\n@Injectable()\nexport class TemplateManagerService {\n\n  // constructor(@InjectModel(Template.name) private templateModel: Model) { }\n\n  // async create(template: Template): Promise {\n  //   try {\n\n  //     const templateExist = await this.templateModel.findOne({ name: template.name })\n\n  //     if (templateExist) {\n  //       throw new NotFoundException('Template already exist')\n  //     }\n\n  //     const createdTemplate = new this.templateModel(template)\n  //     const templateSaved = await createdTemplate.save()\n  //     return templateSaved\n  //   } catch (error) {\n  //     throw new NotFoundException(error.message)\n  //   }\n  // }\n\n  // async findAll(): Promise {\n  //   try {\n  //     const templates = await this.templateModel.find()\n  //     return templates\n  //   } catch (error) {\n  //     throw new NotFoundException(error.message)\n  //   }\n  // }\n\n  // async findOne(id: string): Promise {\n  //   try {\n\n  //     const template = await this.templateModel.findById(id)\n\n  //     if (!template) {\n  //       throw new NotFoundException('Template not found')\n  //     }\n\n  //     return template\n\n  //   } catch (error) {}\n  // }\n\n  // async update(id: string, template: Template): Promise {\n  //   try {\n  //     const templateExist = this.templateModel.findById(id)\n\n  //     if (!templateExist) {\n  //       throw new NotFoundException('Template not found')\n  //     }\n\n  //     return templateExist\n  //   } catch (error) {}\n  // }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationMailService.html":{"url":"injectables/TwoFactorAuthenticationMailService.html","title":"injectable - TwoFactorAuthenticationMailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationMailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/service/two-factor-authenticate/two-factor-authentication.mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendConfirmationTwoFactorAuthenticationMail\n                            \n                            \n                                    Async\n                                sendTwoFactorAuthenticationMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntity: Repository, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/service/two-factor-authenticate/two-factor-authentication.mail.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntity\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendConfirmationTwoFactorAuthenticationMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendConfirmationTwoFactorAuthenticationMail(firstName: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/two-factor-authenticate/two-factor-authentication.mail.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    firstName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendTwoFactorAuthenticationMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendTwoFactorAuthenticationMail(mail: string, domine: string, firstName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/service/two-factor-authenticate/two-factor-authentication.mail.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domine\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    firstName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UserAdminEntity } from 'src/users/entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as jwt from 'jsonwebtoken';\nimport { twoFactorAuthHTML } from '../../template/two--factor-authentication/two-factor-authentication.template';\nimport { twoFactorAuthConfirmedHTML } from '../../template/two--factor-authentication/two-factor-confirmed.template';\n\n@Injectable()\nexport class TwoFactorAuthenticationMailService {\n  constructor(\n    @InjectRepository(UserAdminEntity)\n    private readonly userEntity: Repository,\n    private readonly mailerService: MailerService,\n  ) {}\n\n  async sendTwoFactorAuthenticationMail(\n    mail: string,\n    domine: string,\n    firstName: string,\n  ) {\n    try {\n      const token = jwt.sign({ mail: mail }, 'secret', { expiresIn: '1h' });\n      const url = `${domine}/${token}`;\n\n      await this.mailerService.sendMail({\n        to: mail,\n        subject: 'Two Factor Authentication',\n        html: twoFactorAuthHTML(mail, firstName, url),\n      });\n\n      return {\n        token: token,\n        message:\n          'Se ha enviado un correo a su cuenta de correo electrónico. Por favor, verifique su bandeja de entrada y complete el proceso de registro.',\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async sendConfirmationTwoFactorAuthenticationMail(\n    firstName: string,\n    email: string,\n  ) {\n    try {\n      await this.mailerService.sendMail({\n        to: email,\n        subject: 'Two Factor Authentication',\n        html: twoFactorAuthConfirmedHTML(email, firstName),\n      });\n    } catch (error) {\n      console.error(error);\n      throw new NotFoundException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlanDto.html":{"url":"classes/UpdatePlanDto.html","title":"class - UpdatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/plans/dto/update/plan-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                categories\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                contentQuantity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                durationType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                frequencyType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                idPlan\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                idVersionPlan\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contentQuantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        durationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        frequencyType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        idPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        idVersionPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        userType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/plans/dto/update/plan-update.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNumber,\n  IsString,\n  IsOptional,\n} from 'class-validator';\n\nexport class UpdatePlanDto {\n  @IsOptional()\n  @IsNumber()\n  idPlan?: number;\n\n  @IsOptional()\n  @IsNumber()\n  idVersionPlan?: number;\n\n  @IsOptional()\n  @IsString()\n  userType?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @IsOptional()\n  @IsString()\n  categories?: string;\n\n  @IsOptional()\n  @IsNumber()\n  contentQuantity?: number;\n\n  @IsOptional()\n  @IsString()\n  frequencyType?: string;\n\n  @IsOptional()\n  @IsString()\n  durationType?: string;\n\n  @IsOptional()\n  @IsString()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoleDto.html":{"url":"classes/UpdateRoleDto.html","title":"class - UpdateRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/dto/update-role.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoleDto } from './create-role.dto';\n\nexport class UpdateRoleDto extends PartialType(CreateRoleDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSiteDto.html":{"url":"classes/UpdateSiteDto.html","title":"class - UpdateSiteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSiteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sites/dto/update-site.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateSiteDto } from './create-site.dto';\n\nexport class UpdateSiteDto extends PartialType(CreateSiteDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserAdminDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserAdminDto) {}\n// OmitType to not include the fields name, lastname, email, role, only password\nexport class UpdateUserPasswordDto extends OmitType(CreateUserAdminDto, [\n  'firstName',\n  'lastName',\n  'email',\n  'role',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasswordDto.html":{"url":"classes/UpdateUserPasswordDto.html","title":"class - UpdateUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\nimport { CreateUserAdminDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserAdminDto) {}\n// OmitType to not include the fields name, lastname, email, role, only password\nexport class UpdateUserPasswordDto extends OmitType(CreateUserAdminDto, [\n  'firstName',\n  'lastName',\n  'email',\n  'role',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserAdminEntity.html":{"url":"entities/UserAdminEntity.html","title":"entity - UserAdminEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserAdminEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creationDate\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastLogin\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastLogin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class UserAdminEntity {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  image?: string;\n\n  @Column({ nullable: true })\n  role?: string;\n\n  @Column()\n  password: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ default: false })\n  isActive: boolean;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  lastLogin: Date;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  creationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserProfileController.html":{"url":"controllers/UserProfileController.html","title":"controller - UserProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/profile/users.controller.profile.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateUserPasswordDto: UpdateUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/profile/users.controller.profile.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserPasswordDto\n                                    \n                                                UpdateUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UpdateUserPasswordDto } from '../dto/update-user.dto';\n\n//Documentation\nimport { ApiTags } from '@nestjs/swagger';\nimport { UserProfileService } from './users.service.profile';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n\n@ApiTags('USERS-PROFILE')\n@Controller('profile')\n@Unprotected()\nexport class UserProfileController {\n  constructor(private readonly UserProfileService: UserProfileService) {}\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateUserPasswordDto: UpdateUserPasswordDto,\n  ) {\n    return this.UserProfileService.updatePassword(+id, updateUserPasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserProfileService.html":{"url":"injectables/UserProfileService.html","title":"injectable - UserProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/profile/users.service.profile.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/profile/users.service.profile.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(id: number, updateUserPasswordDto: UpdateUserPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/profile/users.service.profile.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserPasswordDto\n                                    \n                                                UpdateUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UserAdminEntity } from '../entities/user.entity';\nimport { UpdateUserPasswordDto } from '../dto/update-user.dto';\n\n@Injectable()\nexport class UserProfileService {\n  constructor(\n    @InjectRepository(UserAdminEntity)\n    private userRepo: Repository,\n  ) {}\n\n  async updatePassword(\n    id: number,\n    updateUserPasswordDto: UpdateUserPasswordDto,\n  ) {\n    const user = await this.userRepo.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException(`User #${id} not found`);\n    }\n    user.password = updateUserPasswordDto.password;\n    return this.userRepo.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserType.html":{"url":"entities/UserType.html","title":"entity - UserType","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usertype/entity/usertype.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'Anónimo'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/usertype/entity/usertype.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/usertype/entity/usertype.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'user_types' })\nexport class UserType {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ default: 'Anónimo' })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTypeDto.html":{"url":"classes/UserTypeDto.html","title":"class - UserTypeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTypeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usertype/dto/usertype.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@Column({default: 'Anónimo'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/usertype/dto/usertype.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { Column } from 'typeorm';\n\nexport class UserTypeDto {\n  @IsNotEmpty()\n  @IsString()\n  @Column({ default: 'Anónimo' })\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sig-up')@ApiOperation({summary: 'Create user'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { CreateUserAdminDto } from './dto/create-user.dto';\n\n//Documentation\nimport { ApiTags, ApiOperation } from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n@ApiTags('USERS')\n@Controller('users')\n@Unprotected()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post('sig-up')\n  @ApiOperation({ summary: 'Create user' })\n  create(@Body() createUserDto: CreateUserAdminDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserProfileService\n\nUserProfileService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUserProfileService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserProfileService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UserProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm/dist';\nimport { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserAdminEntity } from './entities/user.entity';\nimport { UsersService } from './users.service';\nimport { UserProfileController } from './profile/users.controller.profile';\nimport { UserProfileService } from './profile/users.service.profile';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserAdminEntity])],\n  controllers: [UsersController, UserProfileController],\n  providers: [UsersService, UserProfileService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserAdminDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserAdminDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserAdminEntity } from './entities/user.entity';\nimport { CreateUserAdminDto } from './dto/create-user.dto';\nimport { hashPassword } from 'src/utils/hash-password';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserAdminEntity)\n    private readonly userRepo: Repository,\n  ) {}\n\n  async create(createUserDto: CreateUserAdminDto) {\n    // Verificar si el usuario ya existe en la base de datos\n    const existingUser = await this.userRepo.findOne({\n      where: { email: createUserDto.email },\n    });\n    if (existingUser) {\n      throw new BadRequestException('Username already exists');\n    }\n\n    // Generar el hash de la contraseña del usuario\n    const hashedPassword = await hashPassword(createUserDto.password);\n\n    // Obtener la fecha y hora actual\n    const currentDate = new Date();\n\n    // Crear una instancia del usuario con los datos proporcionados\n    const newUser = this.userRepo.create({\n      ...createUserDto,\n      password: hashedPassword,\n      lastLogin: currentDate,\n      creationDate: currentDate,\n    });\n\n    // Guardar el nuevo usuario en la base de datos\n    return this.userRepo.save(newUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsertypeController.html":{"url":"controllers/UsertypeController.html","title":"controller - UsertypeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsertypeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usertype/usertype.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                usertype\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findUserType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userType: UserTypeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/usertype/usertype.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userType\n                                    \n                                                UserTypeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findUserType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserType()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/usertype/usertype.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Get } from '@nestjs/common';\nimport { UsertypeService } from './usertype.service';\nimport { UserTypeDto } from './dto/usertype.dto';\nimport { Public, Resource, Roles, Scopes, Unprotected } from 'nest-keycloak-connect';\n@Controller('usertype')\n@Unprotected()\nexport class UsertypeController {  \n  constructor(private readonly usertypeService: UsertypeService) {}\n\n  @Post()\n  create(@Body() userType: UserTypeDto) {\n    return this.usertypeService.create(userType);\n  }\n\n  @Get()\n  findUserType() {\n    return this.usertypeService.findUserType();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsertypeModule.html":{"url":"modules/UsertypeModule.html","title":"module - UsertypeModule","body":"\n                   \n\n\n\n\n    Modules\n    UsertypeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsertypeModule\n\n\n\ncluster_UsertypeModule_providers\n\n\n\n\nUsertypeService\n\nUsertypeService\n\n\n\nUsertypeModule\n\nUsertypeModule\n\nUsertypeModule -->\n\nUsertypeService->UsertypeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/usertype/usertype.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsertypeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsertypeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsertypeService } from './usertype.service';\nimport { UsertypeController } from './usertype.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserType } from './entity/usertype.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserType])],\n  controllers: [UsertypeController],\n  providers: [UsertypeService]\n})\nexport class UsertypeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsertypeService.html":{"url":"injectables/UsertypeService.html","title":"injectable - UsertypeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsertypeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usertype/usertype.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findUserType\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userTypeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/usertype/usertype.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userTypeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userType: any)\n                \n            \n\n\n            \n                \n                    Defined in src/usertype/usertype.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userType\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserType()\n                \n            \n\n\n            \n                \n                    Defined in src/usertype/usertype.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserType } from './entity/usertype.entity';\n\n@Injectable()\nexport class UsertypeService {\n\n  constructor(@InjectRepository(UserType) private readonly userTypeRepository: Repository){}\n\n  async create(userType: any): Promise {\n    try {\n      console.log(userType);\n      return await this.userTypeRepository.save(userType);\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n  async findUserType(): Promise {\n    try {\n      const userType = await this.userTypeRepository.find();\n      return userType;\n    } catch (error) {\n      throw new NotFoundException(error.message);\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[0.0.1] - 2023-07-17\nAdded\nFiles were defined for log registration and a utility script for developers.\nFixed\nRemoved\nChanged\n[0.0.2] - 2023-08-01\nAdded\nThe integration with keycloak was added.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/access-modules/access-modules.controller.ts\n            \n            controller\n            AccessModulesController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/access-modules/access-modules.service.ts\n            \n            injectable\n            AccessModulesService\n            \n                46 %\n                (6/13)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            class\n            ApiException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/keycloak-config.service.ts\n            \n            injectable\n            KeycloakConfigService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/category/entity/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entity/paywal-module-actions.entity.ts\n            \n            entity\n            PaywallModuleAction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entity/paywall-module-actions-relations.entity.ts\n            \n            entity\n            PaywallModuleActionRelation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entity/paywallModule.entity.ts\n            \n            entity\n            PaywallModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entity/plans-products-categories.entity.ts\n            \n            entity\n            PlansProductCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entity/role-paywall-module-actions.entity.ts\n            \n            entity\n            RolePaywallModuleActionRelation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/entity/role-paywall-module.entity.ts\n            \n            entity\n            RolePaywallModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/data-source.ts\n            \n            variable\n            AppDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1691181176026-set-db.ts\n            \n            class\n            SetDb1691181176026\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1691184456498-set-db.ts\n            \n            class\n            SetDb1691184456498\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1691184574917-set-db.ts\n            \n            class\n            SetDb1691184574917\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1691186525496-set-db.ts\n            \n            class\n            SetDb1691186525496\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1691512677390-set-db.ts\n            \n            class\n            SetDb1691512677390\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1691515083659-set-db.ts\n            \n            class\n            SetDb1691515083659\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1691708514379-set-db.ts\n            \n            class\n            SetDb1691708514379\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1692297610787-set-db-paywalmodule.ts\n            \n            class\n            SetDbPaywalmodule1692297610787\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1692380137673-set-db-paywalmodule.ts\n            \n            class\n            SetDbPaywalmodule1692380137673\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1692380743605-set-new-plans-fields.ts\n            \n            class\n            SetNewPlansFields1692380743605\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1692815139944-set-new-plans-fields.ts\n            \n            class\n            SetNewPlansFields1692815139944\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1692822538207-set-new-plans-fields.ts\n            \n            class\n            SetNewPlansFields1692822538207\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1692824385127-set-new-plans-fields.ts\n            \n            class\n            SetNewPlansFields1692824385127\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/enviroments.ts\n            \n            variable\n            enviroments\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/keycloak/keycloak.controller.ts\n            \n            controller\n            KeycloakController\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/keycloak/keycloak.service.ts\n            \n            injectable\n            KeycloakService\n            \n                61 %\n                (8/13)\n            \n        \n        \n            \n                \n                src/mail/controller/change-password/change-password.controller.ts\n            \n            controller\n            ChangePasswordMailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/controller/confirm-create-user/confirm-create-user.controller.ts\n            \n            controller\n            ConfirmCreateUserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/controller/reset-password/reset-password.mail.controller.ts\n            \n            controller\n            ResetPasswordMailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/entitys/change-password.entity.ts\n            \n            entity\n            ChangePasswordEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/entitys/reset-password.entity.ts\n            \n            entity\n            ResetPasswordEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/service/change-password/change-password.mail.service.ts\n            \n            injectable\n            ChangePasswordMailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mail/service/confirm-create-user/confirm-create-user.service.ts\n            \n            injectable\n            ConfirmCreateUserService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/service/reset-password/reset-password.mail.service.ts\n            \n            injectable\n            ResetPasswordMailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mail/service/two-factor-authenticate/two-factor-authentication.mail.service.ts\n            \n            injectable\n            TwoFactorAuthenticationMailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mail/template/confirm-change-password/confirm-change-password..template.ts\n            \n            variable\n            changePasswordHTML\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/template/reset-password/reset-password.template.ts\n            \n            variable\n            resetPasswordHTML\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/template/two--factor-authentication/two-factor-authentication.template.ts\n            \n            variable\n            twoFactorAuthHTML\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/template/two--factor-authentication/two-factor-confirmed.template.ts\n            \n            variable\n            twoFactorAuthConfirmedHTML\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plans/dto/create/plan.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/plans/dto/update/plan-update.dto.ts\n            \n            class\n            UpdatePlanDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/plans/entity/plan.entity.ts\n            \n            entity\n            Plan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/plans/plans.controller.ts\n            \n            controller\n            PlansController\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/plans/plans.service.ts\n            \n            injectable\n            PlansService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/product/dto/product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/entity/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/roles/dto/create-role.dto.ts\n            \n            class\n            CreateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/dto/update-role.dto.ts\n            \n            class\n            UpdateRoleDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            class\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sites/dto/create-site.dto.ts\n            \n            class\n            CreateSiteDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sites/dto/update-site.dto.ts\n            \n            class\n            UpdateSiteDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sites/entities/site.entity.ts\n            \n            entity\n            Site\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sites/sites.controller.ts\n            \n            controller\n            SitesController\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                src/sites/sites.service.ts\n            \n            injectable\n            SitesService\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/template-manager/chemma/template.schema.ts\n            \n            class\n            Template\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/template-manager/template-manager.controller.ts\n            \n            controller\n            TemplateManagerController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/template-manager/template-manager.service.ts\n            \n            injectable\n            TemplateManagerService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserAdminDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserPasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            UserAdminEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/profile/users.controller.profile.ts\n            \n            controller\n            UserProfileController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/profile/users.service.profile.ts\n            \n            injectable\n            UserProfileService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usertype/dto/usertype.dto.ts\n            \n            class\n            UserTypeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/usertype/entity/usertype.entity.ts\n            \n            entity\n            UserType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usertype/usertype.controller.ts\n            \n            controller\n            UsertypeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usertype/usertype.service.ts\n            \n            injectable\n            UsertypeService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/hash-password.ts\n            \n            function\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/axios : ^3.0.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.3\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mongoose : ^10.0.0\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @sendgrid/mail : ^7.7.0\n        \n            @types/passport-facebook : ^2.1.11\n        \n            axios : ^1.4.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.3.1\n        \n            handlebars : ^4.7.7\n        \n            jsonwebtoken : ^9.0.1\n        \n            keycloak-connect : ^21.1.2\n        \n            mongoose : ^7.2.2\n        \n            nest-keycloak-connect : ^1.9.2\n        \n            nestjs-i18n : ^10.2.6\n        \n            nodemailer : ^6.9.3\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-keycloak-bearer : ^2.4.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.11.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.6.3\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserType   (src/.../plan.dto.ts)\n                        \n                        \n                            UserType   (src/.../usertype.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/plans/dto/create/plan.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 Suscrito\n                            \n                        \n                        \n                            \n                                Value : Suscrito\n                            \n                        \n                        \n                            \n                                 Anonimo\n                            \n                        \n                        \n                            \n                                Value : Anónimo\n                            \n                        \n                        \n                            \n                                 RegistradoSinPago\n                            \n                        \n                        \n                            \n                                Value : Registrado sin pago\n                            \n                        \n            \n        \n\n    src/plans/dto/create/usertype.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        UserType\n                    \n                \n                        \n                            \n                                 Suscrito\n                            \n                        \n                        \n                            \n                                Value : Suscrito\n                            \n                        \n                        \n                            \n                                 Anonimo\n                            \n                        \n                        \n                            \n                                Value : Anónimo\n                            \n                        \n                        \n                            \n                                 RegistradoSinPago\n                            \n                        \n                        \n                            \n                                Value : Registrado sin pago\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            hashPassword   (src/.../hash-password.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/hash-password.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n            \n                \nhashPassword(password: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccessModulesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeycloakModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlansModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SitesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TemplateManagerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsertypeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccessModulesModule\n\n\n\ncluster_AccessModulesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_KeycloakModule\n\n\n\ncluster_KeycloakModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PlansModule\n\n\n\ncluster_PlansModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_SitesModule\n\n\n\ncluster_SitesModule_providers\n\n\n\ncluster_TemplateManagerModule\n\n\n\ncluster_TemplateManagerModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsertypeModule\n\n\n\ncluster_UsertypeModule_providers\n\n\n\n\nAccessModulesService\n\nAccessModulesService\n\n\n\nAccessModulesModule\n\nAccessModulesModule\n\nAccessModulesModule -->\n\nAccessModulesService->AccessModulesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccessModulesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nKeycloakConfigService \n\nKeycloakConfigService \n\nKeycloakConfigService  -->\n\nAuthModule->KeycloakConfigService \n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nKeycloakModule\n\nKeycloakModule\n\nKeycloakModule -->\n\nCommonModule->KeycloakModule\n\n\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nKeycloakModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nChangePasswordMailService \n\nChangePasswordMailService \n\nChangePasswordMailService  -->\n\nMailModule->ChangePasswordMailService \n\n\n\n\n\nConfirmCreateUserService \n\nConfirmCreateUserService \n\nConfirmCreateUserService  -->\n\nMailModule->ConfirmCreateUserService \n\n\n\n\n\nResetPasswordMailService \n\nResetPasswordMailService \n\nResetPasswordMailService  -->\n\nMailModule->ResetPasswordMailService \n\n\n\n\n\nTwoFactorAuthenticationMailService \n\nTwoFactorAuthenticationMailService \n\nTwoFactorAuthenticationMailService  -->\n\nMailModule->TwoFactorAuthenticationMailService \n\n\n\n\n\nPlansModule\n\nPlansModule\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nSitesModule\n\nSitesModule\n\nAppModule -->\n\nSitesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsertypeModule\n\nUsertypeModule\n\nAppModule -->\n\nUsertypeModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nKeycloakConfigService\n\nKeycloakConfigService\n\nAuthModule -->\n\nKeycloakConfigService->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nKeycloakService\n\nKeycloakService\n\nKeycloakModule -->\n\nKeycloakService->KeycloakModule\n\n\n\n\n\nChangePasswordMailService\n\nChangePasswordMailService\n\nMailModule -->\n\nChangePasswordMailService->MailModule\n\n\n\n\n\nConfirmCreateUserService\n\nConfirmCreateUserService\n\nMailModule -->\n\nConfirmCreateUserService->MailModule\n\n\n\n\n\nResetPasswordMailService\n\nResetPasswordMailService\n\nMailModule -->\n\nResetPasswordMailService->MailModule\n\n\n\n\n\nTwoFactorAuthenticationMailService\n\nTwoFactorAuthenticationMailService\n\nMailModule -->\n\nTwoFactorAuthenticationMailService->MailModule\n\n\n\n\n\nPlansService\n\nPlansService\n\nPlansModule -->\n\nPlansService->PlansModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nSitesService\n\nSitesService\n\nSitesModule -->\n\nSitesService->SitesModule\n\n\n\n\n\nTemplateManagerService\n\nTemplateManagerService\n\n\n\nTemplateManagerModule\n\nTemplateManagerModule\n\nTemplateManagerModule -->\n\nTemplateManagerService->TemplateManagerModule\n\n\n\n\n\nUserProfileService\n\nUserProfileService\n\nUsersModule -->\n\nUserProfileService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUsertypeService\n\nUsertypeService\n\nUsertypeModule -->\n\nUsertypeService->UsertypeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.2\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            I18nPath   (dist/.../i18n.generated.ts)\n                        \n                        \n                            I18nPath   (src/.../i18n.generated.ts)\n                        \n                        \n                            I18nTranslations   (dist/.../i18n.generated.ts)\n                        \n                        \n                            I18nTranslations   (src/.../i18n.generated.ts)\n                        \n                        \n                            TemplateDocument   (src/.../template.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    dist/i18n/generated/i18n.generated.ts\n    \n    \n        \n            \n                \n                    \n                    I18nPath\n                \n            \n            \n                \n                        Path\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    I18nTranslations\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/i18n/generated/i18n.generated.ts\n    \n    \n        \n            \n                \n                    \n                    I18nPath\n                \n            \n            \n                \n                        Path\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    I18nTranslations\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/template-manager/chemma/template.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TemplateDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDataSource   (src/.../data-source.ts)\n                        \n                        \n                            changePasswordHTML   (src/.../confirm-change-password..template.ts)\n                        \n                        \n                            enviroments   (src/.../enviroments.ts)\n                        \n                        \n                            resetPasswordHTML   (src/.../reset-password.template.ts)\n                        \n                        \n                            twoFactorAuthConfirmedHTML   (src/.../two-factor-confirmed.template.ts)\n                        \n                        \n                            twoFactorAuthHTML   (src/.../two-factor-authentication.template.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/data-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource({\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  synchronize: false,\n  logging: false,\n  entities: ['src/**/*.entity.ts'],\n  migrations: ['src/database/migrations/*.ts'],\n  migrationsTableName: 'migrations',\n})\n                    \n                \n\n\n        \n    \n\n    src/mail/template/confirm-change-password/confirm-change-password..template.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        changePasswordHTML\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (code: string) =>\n  `\n  \n  \n    \n      \n      \n      Cambio de contraseña\n      \n        body {\n          font-family: Arial, sans-serif;\n          line-height: 1.4;\n          background-color: #f4f4f4;\n          margin: 0;\n          padding: 0;\n        }\n        .container {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 40px 20px;\n          background-color: #fff;\n          border-radius: 6px;\n          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n          font-size: 24px;\n          color: #333;\n          margin-bottom: 20px;\n        }\n        p {\n          font-size: 16px;\n          color: #555;\n          margin-bottom: 10px;\n        }\n        a {\n          color: pink;\n          text-decoration: underline;\n        }\n      \n    \n    \n      \n        Cambio de contraseña\n        Hola,\n        Para completar el cambio de contraseña, utiliza el siguiente código de confirmación:\n        ${code}\n        Si no has solicitado cambiar tu contraseña, por favor ignora este correo.\n        Gracias,\n        LoyaltyWall\n      \n    \n  \n`\n                    \n                \n\n\n        \n    \n\n    src/enviroments.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        enviroments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  dev: '.env',\n  stag: '.stag.env',\n  prod: '.prod.env',\n}\n                    \n                \n\n\n        \n    \n\n    src/mail/template/reset-password/reset-password.template.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resetPasswordHTML\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (url: string) =>\n  `\n  \n  \n    \n      \n      \n      Restablecimiento de contraseña\n      \n        body {\n          font-family: Arial, sans-serif;\n          line-height: 1.4;\n          background-color: #f4f4f4;\n          margin: 0;\n          padding: 0;\n        }\n        .container {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 40px 20px;\n          background-color: #fff;\n          border-radius: 6px;\n          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n          font-size: 24px;\n          color: #333;\n          margin-bottom: 20px;\n        }\n        p {\n          font-size: 16px;\n          color: #555;\n          margin-bottom: 10px;\n        }\n        a {\n          color: pink;\n          text-decoration: underline;\n        }\n      \n    \n    \n      \n        Restablecimiento de contraseña\n        Hola,\n        Haz clic en el siguiente enlace para restablecer tu contraseña:\n        Si no solicitaste restablecer tu contraseña, puedes ignorar este correo.\n        Gracias,\n        El Colombiano\n      \n    \n  \n`\n                    \n                \n\n\n        \n    \n\n    src/mail/template/two--factor-authentication/two-factor-confirmed.template.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        twoFactorAuthConfirmedHTML\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  firstName: string,\n  email: string,\n) => `\n  \n  \n    \n      \n      \n      Autenticación de doble factor confirmada\n      \n        body {\n          font-family: Arial, sans-serif;\n          line-height: 1.4;\n          background-color: #f4f4f4;\n          margin: 0;\n          padding: 0;\n        }\n        .container {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 40px 20px;\n          background-color: #fff;\n          border-radius: 6px;\n          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n          font-size: 24px;\n          color: #333;\n          margin-bottom: 20px;\n        }\n        p {\n          font-size: 16px;\n          color: #555;\n          margin-bottom: 10px;\n        }\n      \n    \n    \n      \n        Autenticación de doble factor confirmada\n        Hola ${firstName},\n        La autenticación de doble factor para tu cuenta con el correo electrónico ${email} ha sido confirmada correctamente.\n        Desde ahora, podrás disfrutar de la seguridad adicional proporcionada por la autenticación de doble factor en tu cuenta.\n        Si no realizaste esta confirmación, te recomendamos cambiar tu contraseña y revisar la seguridad de tu cuenta.\n        Gracias por utilizar nuestro servicio.\n        Atentamente,\n        Tu aplicación\n      \n    \n  \n`\n                    \n                \n\n\n        \n    \n\n    src/mail/template/two--factor-authentication/two-factor-authentication.template.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        twoFactorAuthHTML\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (name: string, email: string, url: string) => `\n  \n  \n    \n      \n      \n      Autenticación de doble factor\n      \n        body {\n          font-family: Arial, sans-serif;\n          line-height: 1.4;\n          background-color: #f4f4f4;\n          margin: 0;\n          padding: 0;\n        }\n        .container {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 40px 20px;\n          background-color: #fff;\n          border-radius: 6px;\n          box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n          font-size: 24px;\n          color: #333;\n          margin-bottom: 20px;\n        }\n        p {\n          font-size: 16px;\n          color: #555;\n          margin-bottom: 10px;\n        }\n        a {\n          color: pink;\n          text-decoration: underline;\n        }\n      \n    \n    \n      \n        Autenticación de doble factor\n        Hola ${name},\n        Estás a un paso de completar la autenticación de doble factor para tu cuenta con el correo electrónico ${email}.\n        Haz clic en el siguiente enlace para continuar el proceso de autenticación de doble factor:\n        ${url}\n        Si no iniciaste este proceso, puedes ignorar este correo.\n        Gracias,\n        Tu aplicación\n      \n    \n  \n`\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
